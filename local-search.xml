<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在排序数组中查找元素的第一个和最后一个位置-二分查找</title>
    <link href="/2023/03/31/%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/03/31/%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>给你一个按照非递减顺序排列的整数数组 nums，和一个目标值 target。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 target，返回 [-1, -1]。</p><p>你必须设计并实现时间复杂度为 O(log n) 的算法解决此问题<br>(力扣 34)</p><h2 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入 输出"></a>输入 输出</h2><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入：nums = [5,7,7,8,8,10], target = 8<br>输出：[3,4]</p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>输入：nums = [5,7,7,8,8,10], target = 6<br>输出：[-1,-1]</p><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><p>输入：nums = [], target = 0<br>输出：[-1,-1]</p><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] searchRange(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> left(a, target);<br>        <span class="hljs-keyword">if</span> (x == -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>&#125;;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;x, right(a, target)&#125;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">left</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,r = a.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l&lt;=r)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l+r)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (a[mid]&gt;=target)&#123;<br>                r = mid-<span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                l = mid+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">right</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = a.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">candidate</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= j) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (target &lt; a[m]) &#123;<br>                j = m - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[m] &lt; target) &#123;<br>                i = m + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                candidate = m;<br>                i = m + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> candidate;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法不能丢</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git设置SSH公钥</title>
    <link href="/2023/03/22/git%E8%AE%BE%E7%BD%AESSH%E5%85%AC%E9%92%A5/"/>
    <url>/2023/03/22/git%E8%AE%BE%E7%BD%AESSH%E5%85%AC%E9%92%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="生成-SSH-Key"><a href="#生成-SSH-Key" class="headerlink" title="生成 SSH Key"></a>生成 SSH Key</h1><p>邮箱为 <code>1695165447@qq.com</code>,文件保存地址为 <code>C:/Users/mzd/.ssh/gitee</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &#x27;1695165447@qq.com&#x27; -f  C:/Users/mzd/.ssh/gitee<br></code></pre></td></tr></table></figure><p>查看公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat C:/Users/mzd/.ssh/gitee.pub<br></code></pre></td></tr></table></figure><h1 id="将公钥添加到-gitee"><a href="#将公钥添加到-gitee" class="headerlink" title="将公钥添加到 gitee"></a>将公钥添加到 gitee</h1><p><img src="/articleimages/git%E8%AE%BE%E7%BD%AESSH%E5%85%AC%E9%92%A5/1680316927503.jpg"></p><h1 id="修改-ssh-配置"><a href="#修改-ssh-配置" class="headerlink" title="修改 ssh 配置"></a>修改 ssh 配置</h1><p>如果有多个 ssh 地址，则添加配置文件<code>C:\Users\dgh\.ssh\config</code>,内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs config"># github<br><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/github<br><br># gitee<br><br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~/.ssh/gitee<br><br># gitlab<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker安装常用中间件</title>
    <link href="/2023/03/19/docker%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <url>/2023/03/19/docker%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="下载安装-docker-和-compose"><a href="#下载安装-docker-和-compose" class="headerlink" title="下载安装 docker 和 compose"></a>下载安装 docker 和 compose</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装docker</span><br>curl -sSL https://get.daocloud.io/docker | sh<br><span class="hljs-comment"># 启动docker</span><br>systemctl start docker.service<br><span class="hljs-comment"># 开启自启动</span><br>systemctl <span class="hljs-built_in">enable</span> docker<br><span class="hljs-comment"># Compose 安装</span><br>curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`<span class="hljs-built_in">uname</span> -s`-`<span class="hljs-built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose<br><span class="hljs-comment"># 将可执行权限应用于二进制文件：</span><br>sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br><span class="hljs-comment"># 创建软链：</span><br>sudo <span class="hljs-built_in">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose<br><span class="hljs-comment"># 测试是否安装成功：</span><br>docker compose version<br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 新建文件夹</span><br><span class="hljs-string">mkdir</span> <span class="hljs-string">compose</span><br><span class="hljs-string">cd</span> <span class="hljs-string">compose</span><br><br><span class="hljs-comment"># 上传 docker-compose.yml 文件</span><br><span class="hljs-comment"># 在 docker-compose.yml 文件夹中 输入</span><br><span class="hljs-string">docker-compose</span> <span class="hljs-string">up</span> <span class="hljs-string">-d</span><br></code></pre></td></tr></table></figure><h2 id="docker-compose-yml-文件信息"><a href="#docker-compose-yml-文件信息" class="headerlink" title="docker-compose.yml 文件信息"></a>docker-compose.yml 文件信息</h2><p>以 mysql8，redis ，mongo 为例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 注意：所有持久化容器（MySQL、Redis、Elasticsearch）的Docker Compose文件禁止配置`# restart: always`；</span><br><span class="hljs-comment"># 否则可能导致反复重启，占用大量CPU与内存，导致死机，进而可能影响到物理机\n</span><br><span class="hljs-comment"># 一定要对容器资源进行限制</span><br><br><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-comment">##########################################################################################################</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0.30</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-comment"># hostname: mysql</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">mysqld</span> <span class="hljs-string">--character-set-server=utf8mb4</span> <span class="hljs-string">--collation-server=utf8mb4_unicode_ci</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=mima123?</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/mysql/my.cnf/:/etc/my.cnf</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/mysql/data/:/var/lib/mysql</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/mysql/log/:/var/log/mysql</span><br>    <span class="hljs-comment"># restart: always</span><br>    <span class="hljs-comment"># 健康监测</span><br>    <span class="hljs-attr">healthcheck:</span><br>      <span class="hljs-attr">test:</span> [<span class="hljs-string">&#x27;CMD&#x27;</span>, <span class="hljs-string">&#x27;mysqladmin&#x27;</span>, <span class="hljs-string">&#x27;ping&#x27;</span>, <span class="hljs-string">&#x27;-h&#x27;</span>, <span class="hljs-string">&#x27;localhost&#x27;</span>]<br>      <span class="hljs-attr">interval:</span> <span class="hljs-string">5s</span><br>      <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span><br>      <span class="hljs-attr">retries:</span> <span class="hljs-number">10</span><br><br>    <span class="hljs-comment"># # 资源限制</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;2&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">500M</span><br>        <span class="hljs-attr">reservations:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.5&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">100M</span><br><br>    <span class="hljs-comment"># 权限</span><br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-comment">##########################################################################################################</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/library/redis:latest</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6379</span><span class="hljs-string">:6379</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-comment"># hostname: redis</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/redis/redis.conf:/usr/local/etc/redis/redis.conf</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span> <span class="hljs-string">/usr/local/etc/redis/redis.conf</span><br><br>    <span class="hljs-comment"># # 资源限制</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;1&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">500M</span><br>        <span class="hljs-attr">reservations:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.5&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">100M</span><br><br>    <span class="hljs-comment"># 权限</span><br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-attr">mongo-server:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mongo</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:latest</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">mima123?</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">27017</span><span class="hljs-string">:27017</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime</span> <span class="hljs-comment"># 时区</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/mongo/mongo-server/data:/data/db</span> <span class="hljs-comment"># 挂载数据目录</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/mongo/mongo-server/log:/var/log/mongodb</span> <span class="hljs-comment"># 挂载日志目录</span><br>    <span class="hljs-comment">#  - /data/mongo/mongo-server/config:/etc/mongo  # 挂载配置目录</span><br><br>    <span class="hljs-comment"># # 资源限制</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;2&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">500M</span><br>        <span class="hljs-attr">reservations:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.5&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">100M</span><br><br>    <span class="hljs-comment"># 权限</span><br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="Mysql8-配置"><a href="#Mysql8-配置" class="headerlink" title="Mysql8 配置"></a>Mysql8 配置</h2><h3 id="1-设置启动-docker-时，即运行-mysql"><a href="#1-设置启动-docker-时，即运行-mysql" class="headerlink" title="1. 设置启动 docker 时，即运行 mysql"></a>1. 设置启动 docker 时，即运行 mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@hadoop-104 ~]<span class="hljs-comment"># docker update mysql --restart=always</span><br></code></pre></td></tr></table></figure><h3 id="2-限制-mysql8-内存"><a href="#2-限制-mysql8-内存" class="headerlink" title="2. 限制 mysql8 内存"></a>2. 限制 mysql8 内存</h3><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[mysqld]<br>performance_schema_max_table_instances=400 <span class="hljs-comment">#设置效果不明显</span><br>table_definition_cache=400 <span class="hljs-comment">#缓存</span><br>performance_schema=off     <span class="hljs-comment">#效果明显 , 用于监控MySQL server在一个较低级别的运行过程中的资源消耗、资源东西</span><br>table_open_cache=64       <span class="hljs-comment"># #打开表的缓存</span><br>innodb_buffer_pool_chunk_size=64M <span class="hljs-comment">#效果不明显  #InnoDB缓冲池大小调整操作的块大小</span><br>innodb_buffer_pool_size=64M <span class="hljs-comment">#效果不明显  #InnoDB 存储引擎的表数据和索引数据的最大内存缓冲区大小</span><br></code></pre></td></tr></table></figure><p>查看修改后的内存情况 : <code>docker stats</code></p><h3 id="3-设置-root-用户远程访问"><a href="#3-设置-root-用户远程访问" class="headerlink" title="3. 设置 root 用户远程访问"></a>3. 设置 root 用户远程访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入mysql 容器</span><br>docker <span class="hljs-built_in">exec</span> -it mysql /bin/bash<br><span class="hljs-comment"># 连接 mysql</span><br>mysql -uroot -p<br><span class="hljs-comment"># 选择数据库</span><br>use mysql;<br><span class="hljs-comment"># 在 mysql 数据库的 user 表中查看当前 root 用户的相关信息</span><br>select host, user, authentication_string, plugin from user;<br><span class="hljs-comment"># 授权 root 用户的所有权限并设置远程访问</span><br>update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>GRANT ALL ON *.* TO <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><br><span class="hljs-comment"># 更新 root 用户密码 为：root</span><br>ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;root&#x27;</span>;<br><br><span class="hljs-comment"># 刷新权限</span><br>flush privileges;<br><span class="hljs-comment"># 重启mysql</span><br></code></pre></td></tr></table></figure><h2 id="Mongo-配置"><a href="#Mongo-配置" class="headerlink" title="Mongo 配置"></a>Mongo 配置</h2><h3 id="1-设置启动-docker-时，即运行-mongo"><a href="#1-设置启动-docker-时，即运行-mongo" class="headerlink" title="1. 设置启动 docker 时，即运行 mongo"></a>1. 设置启动 docker 时，即运行 mongo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@hadoop-104 ~]<span class="hljs-comment"># docker update mongo --restart=always</span><br></code></pre></td></tr></table></figure><h3 id="2-创建用户"><a href="#2-创建用户" class="headerlink" title="2. 创建用户"></a>2. 创建用户</h3><p>登录 mongo 容器，并进入到【admin】数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it mongo mongosh admin<br><span class="hljs-comment"># 登录 root 用户</span><br>db.auth(<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;mima123??&#x27;</span>)<br><span class="hljs-comment"># 创建数据库，</span><br>use demodb<br><span class="hljs-comment"># 创建用户 admin 注意root用户没有操作其他数据的权限，必须新建一个用户，并且用户和数据库是绑定关系</span><br>db.createUser(&#123;user: <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-built_in">pwd</span>: <span class="hljs-string">&quot;mima123??&quot;</span>, roles: [&#123; role: <span class="hljs-string">&quot;dbOwner&quot;</span>, db: <span class="hljs-string">&quot;demodb&quot;</span> &#125;]&#125;);<br><span class="hljs-comment"># 切换到 用户 admin</span><br>db.auth(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;mima123??&#x27;</span>)<br><span class="hljs-comment"># 插入一条数据</span><br>db.user.insert(&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;我叫123&quot;</span>&#125;)<br><span class="hljs-comment"># 查看数据</span><br>db.user.find()<br></code></pre></td></tr></table></figure><h3 id="3-navcat-连接"><a href="#3-navcat-连接" class="headerlink" title="3.navcat 连接"></a>3.navcat 连接</h3><p><img src="/articleimages/docker%20%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%207518f132bf5f43cbb43e5e9c7bd287c8/Untitled.png" alt="Untitled"></p><h3 id="4-mongo-其他命令"><a href="#4-mongo-其他命令" class="headerlink" title="4. mongo 其他命令"></a>4. mongo 其他命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前数据库中的所有用户</span><br>db.getUsers()<br><span class="hljs-comment"># 查看所有数据库</span><br>show dbs<br><br><span class="hljs-comment"># 新建副本集 TODO</span><br>rs.initiate(<br>   &#123;<br>      _id: <span class="hljs-string">&quot;myReplSet&quot;</span>,<br>      members: [<br>         &#123; _id: 0, host : <span class="hljs-string">&quot;8.219.228.60:27017&quot;</span> &#125;<br>      ]<br>   &#125;<br>)<br>db.createUser(&#123;user: <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-built_in">pwd</span>: <span class="hljs-string">&quot;123456aA?&quot;</span>, roles: [&#123; role: <span class="hljs-string">&quot;dbOwner&quot;</span>, db: <span class="hljs-string">&quot;demo&quot;</span> &#125;]&#125;);<br>db.auth(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;123456aA?&#x27;</span>)<br><br>db.user.insert(&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;我叫123&quot;</span>&#125;)<br><br>db.updateUser(<span class="hljs-string">&quot;admin&quot;</span>,&#123;db: <span class="hljs-string">&quot;demo&quot;</span> &#125;)<br></code></pre></td></tr></table></figure><h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><h2 id="查询-近-100-行日志"><a href="#查询-近-100-行日志" class="headerlink" title="查询 近 100 行日志"></a>查询 近 100 行日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs -f -t  --<span class="hljs-built_in">tail</span>=100 CONTAINER_ID<br></code></pre></td></tr></table></figure><h2 id="查看某个时间之后的日志"><a href="#查看某个时间之后的日志" class="headerlink" title="查看某个时间之后的日志"></a>查看某个时间之后的日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs -t --since=<span class="hljs-string">&quot;2018-02-08&quot;</span> CONTAINER_ID<br></code></pre></td></tr></table></figure><h2 id="限制容器内存"><a href="#限制容器内存" class="headerlink" title="限制容器内存"></a>限制容器内存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name mongo -m 100M --memory-swap -1 -d mongo<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红黑树</title>
    <link href="/2023/03/18/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <url>/2023/03/18/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>红黑树（Red Black Tree）是一种含有红黑结点并能自平衡的二叉查找树。</p><p>它必须除了满足二叉搜索树的性质外，还要满足下面的性质：</p><ol><li>每个结点或者为黑色或者为红色。</li><li>根结点为黑色。</li><li>每个叶结点(实际上就是 NULL 指针)都是黑色的。</li><li>如果一个结点是红色的，那么它的两个子节点都是黑色的（也就是说，不能有两个相邻的红色结点）。</li><li>对于每个结点，从该结点到其所有子孙叶结点的路径中所包含的黑色结点数量必须相同。</li></ol><h1 id="变色"><a href="#变色" class="headerlink" title="变色"></a><strong>变色</strong></h1><p>红黑树的变色在 2-3 树中插入节点 3 后，便不再满足 2-3 树的定义，需要进行分解，将元素 2 抽出作为 1 和 3 的父节点，然后 2 继续向上融合。<br>对应到红黑树中就是，首先插入节点 3，在红黑树中新插入的节点默认为红色，然后不满足定义，所以需要进行分解，分解后各个节点都为 2 节点，所以变为黑色。而 2 节点需要继续向上融合，故要变成红色。</p><p><img src="/articleimages/%E7%BA%A2%E9%BB%91%E6%A0%91%201f652ec0e17448bbb65292b85ef8e666/Untitled.png" alt="Untitled"></p><h1 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a><strong>右旋</strong></h1><p>红黑树的右旋转插入元素 1 后，进行右旋转操作，首先把 2 节点与 3 节点断开连接，同时把 2 与 2 的右子树断开连接，然后把 2 的右子树连接至 3 的左子树位置，不会违背二分搜索树的性质，然后再把 3 连接至 2 的右子树位置。最后还要改变对应节点的颜色，即把 2 节点的颜色改为原来 3 节点的黑色，把 3 节点的颜色改为原来 2 节点的红色。</p><p><img src="/articleimages/%E7%BA%A2%E9%BB%91%E6%A0%91%201f652ec0e17448bbb65292b85ef8e666/Untitled%201.png" alt="Untitled"></p><h1 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a><strong>左旋</strong></h1><p>与右旋类似，红黑树的左旋转插入元素 3 后，进行左旋转操作，首先把 2 节点与 3 节点断开连接，同时把 3 与 3 的左子树断开连接，然后把 3 的左子树连接至 2 的右子树位置，不会违背二分搜索树的性质，然后再把 2 连接至 3 的左子树位置。最后还要改变对应节点的颜色，即把 2 节点的颜色改为原来 3 节点的红色，把 3 节点的颜色改为原来 2 节点的黑色。</p><p><img src="/articleimages/%E7%BA%A2%E9%BB%91%E6%A0%91%201f652ec0e17448bbb65292b85ef8e666/Untitled%202.png" alt="Untitled"></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>向红黑树中依次插入 10，9，8，7，6，5，4，3，2，1，其如图：</p><p><img src="/articleimages/%E7%BA%A2%E9%BB%91%E6%A0%91%201f652ec0e17448bbb65292b85ef8e666/Untitled%203.png" alt="Untitled"></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedBlackTree</span>&lt;Key <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;Key&gt;, Value&gt; &#123;<br>    <span class="hljs-keyword">private</span> Node root;      <span class="hljs-comment">//红黑树根结点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> N;  <span class="hljs-comment">//树中元素个数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">RED</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;        <span class="hljs-comment">//红链接</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">BLACK</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;     <span class="hljs-comment">//黑链接</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;     <span class="hljs-comment">//结点类</span><br>        <span class="hljs-keyword">public</span> Key key;     <span class="hljs-comment">//存储键</span><br>        <span class="hljs-keyword">private</span> Value value;    <span class="hljs-comment">//值</span><br>        <span class="hljs-keyword">public</span> Node left;   <span class="hljs-comment">//左子树</span><br>        <span class="hljs-keyword">public</span> Node right;  <span class="hljs-comment">//右子树</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> color;   <span class="hljs-comment">//父节点指向它的连接的颜色</span><br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Key key, Value value, Node left, Node right, <span class="hljs-type">boolean</span> color)</span> &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.value = value;<br>            <span class="hljs-built_in">this</span>.left = left;<br>            <span class="hljs-built_in">this</span>.right = right;<br>            <span class="hljs-built_in">this</span>.color = color;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取元素个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br>    <span class="hljs-comment">//判断连接颜色</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRed</span><span class="hljs-params">(Node x)</span>&#123;<br>        <span class="hljs-keyword">if</span>(x == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> BLACK;<br>        <span class="hljs-keyword">return</span> x.color;<br>    &#125;<br>    <span class="hljs-comment">//左旋转</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">rotateLeft</span><span class="hljs-params">(Node h)</span>&#123;<br>        <span class="hljs-comment">//获取h结点的右子结点，表示为x</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> h.right;<br>        <span class="hljs-comment">//让x结点的左子节点称为h结点的右子结点</span><br>        h.right = x.left;<br>        <span class="hljs-comment">//让h称为x结点的左子节点</span><br>        x.left = h;<br>        <span class="hljs-comment">//让x结点的color属性等于h结点的color属性</span><br>        x.color = h.color;<br>        <span class="hljs-comment">//让h结点的color属性变为红色</span><br>        h.color = RED;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-comment">//右旋</span><br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">rotateRight</span><span class="hljs-params">(Node h)</span>&#123;<br>        <span class="hljs-comment">//获取h结点的左子结点，表示为x</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> h.left;<br>        <span class="hljs-comment">//让x结点的右子节点称为h结点的左子结点</span><br>        h.left = x.right;<br>        <span class="hljs-comment">//让h称为x结点的右子节点</span><br>        x.right = h;<br>        <span class="hljs-comment">//让x结点的color属性等于h结点的color属性</span><br>        x.color = h.color;<br>        <span class="hljs-comment">//让h结点的color属性变为红色</span><br>        h.color = RED;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>    <span class="hljs-comment">//反转颜色</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flipColors</span><span class="hljs-params">(Node h)</span>&#123;<br>        h.color = RED;<br>        h.left.color = BLACK;<br>        h.right.color = BLACK;<br>    &#125;<br>    <span class="hljs-comment">//插入</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(Key key, Value value)</span>&#123;<br>        root = put(root,key,value);<br>        <span class="hljs-comment">//根节点的颜色总是为黑色</span><br>        root.color = BLACK;<br>    &#125;<br>    <span class="hljs-comment">//向指定位置插入</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">put</span><span class="hljs-params">(Node h,Key key, Value value)</span>&#123;<br>        <span class="hljs-comment">//判断h是否为空，如果为空则直接返回一个红色的结点即可</span><br>        <span class="hljs-keyword">if</span>(h == <span class="hljs-literal">null</span>)&#123;<br>            N++;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key,value,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>, RED);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> key.compareTo(h.key);<br>        <span class="hljs-keyword">if</span>(cmp&lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//继续往左</span><br>            h.left = put(h.left,key,value);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmp&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//继续往右</span><br>            h.right = put(h.right,key,value);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//发生值的替换</span><br>            h.value = value;<br>        &#125;<br>        <span class="hljs-comment">//左旋:当前结点的左子节点为黑色，右子节点为红色时，需要左旋</span><br>        <span class="hljs-keyword">if</span>(isRed(h.right) &amp;&amp; !isRed(h.left))&#123;<br>            h = rotateLeft(h);<br>        &#125;<br>        <span class="hljs-comment">//右旋:当前结点的左子节点和左子节点的左子节点都为红色，需要右旋</span><br>        <span class="hljs-keyword">if</span>(isRed(h.left) &amp;&amp; isRed(h.left.left))&#123;<br>            h = rotateRight(h);<br>        &#125;<br>        <span class="hljs-comment">//颜色反转：当前结点的左子结点和右子结点都为红色，需要颜色反转</span><br>        <span class="hljs-keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.right))&#123;<br>            flipColors(h);<br>        &#125;<br>        <span class="hljs-keyword">return</span> h;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Value <span class="hljs-title function_">getKey</span><span class="hljs-params">(Key key)</span>&#123;<br><br>        <span class="hljs-keyword">return</span> getKey(root,key);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Value <span class="hljs-title function_">getKey</span><span class="hljs-params">(Node x,Key key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//比较x结点的键和key的大小</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> key.compareTo(x.key);<br>        <span class="hljs-keyword">if</span>(cmp&lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> getKey(x.left,key);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cmp&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> getKey(x.right,key);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> x.value;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="红黑树在线演示"><a href="#红黑树在线演示" class="headerlink" title="红黑树在线演示"></a>红黑树在线演示</h1><p><a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">Red/Black Tree</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Netty 框架学习</title>
    <link href="/2022/01/20/Netty/"/>
    <url>/2022/01/20/Netty/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>netty是一个异步的，基于事件驱动的网络应用框架，用于快速开发可维护、高性能的网络服务器和客户端。</p><p><code>netty的异步还是基于多路复用的，并没有实现真正意义上的异步IO</code></p><h2 id="2-Netty的优势"><a href="#2-Netty的优势" class="headerlink" title="2. Netty的优势"></a>2. Netty的优势</h2><p>如果使用传统NIO，其工作量大，bug 多</p><ul><li>需要自己构建协议</li><li>解决 TCP 传输问题，如粘包、半包</li><li>因为bug的存在，epoll 空轮询导致 CPU 100%</li></ul><p>Netty 对 API 进行增强，使之更易用，如</p><ul><li>FastThreadLocal =&gt; ThreadLocal</li><li>ByteBuf =&gt; ByteBuffer</li></ul>]]></content>
    
    
    <categories>
      
      <category>Netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NIO 基础</title>
    <link href="/2022/01/15/NIO%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/01/15/NIO%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一、三大组件"><a href="#一、三大组件" class="headerlink" title="一、三大组件"></a>一、三大组件</h1><h2 id="1、Channel-amp-Buffer"><a href="#1、Channel-amp-Buffer" class="headerlink" title="1、Channel &amp; Buffer"></a>1、<strong>Channel &amp; Buffer</strong></h2><p>channel是一个读写数据的双向通道，通过channel可以将数据读入buffer，也可以将buffer中的数据写入channel，类似于stream，但是比stream更为底层。</p><p>常见<strong>Channel</strong> ：</p><ul><li>FileChannel（文件传输通道）</li><li>DatagramChannel（UDP网络传输通道）</li><li>SocketChannel（TCP网络传输通道，专用于服务器端）</li><li>ServerSocketChannel（TCP网络传输通道）</li></ul><p>常见<strong>Buffer：</strong></p><ul><li>ByteBuffer<ul><li>MappedByteBuffer</li><li>DirectByteBuffer</li><li>HeapByteBuffer</li></ul></li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li><li>CharBuffer</li></ul><h2 id="2、Selector"><a href="#2、Selector" class="headerlink" title="2、Selector"></a>2、<strong>Selector</strong></h2><p>selector是让一个线程同时管理多个channel，线程可以通过selector获取channel上发生的事件，不会让线程吊死在一个 channel 上，适合连数据量多但流量低的场景。</p><p><img src="/myimages/e2f7696577b74c65ad876c29b182f121.png" alt="NIO基础"></p><h1 id="二、ByteBuffer"><a href="#二、ByteBuffer" class="headerlink" title="二、ByteBuffer"></a>二、ByteBuffer</h1><h2 id="1、属性方法"><a href="#1、属性方法" class="headerlink" title="1、属性方法"></a>1、属性方法</h2><p>capacity（缓存容量） position（当前位置） limit （读取限制）</p><p><img src="/myimages/e2f7696577b74c65ad876c29b182f1211.png" alt="NIO基础"></p><p>写模式下，position是写入位置，limit 等于容量capacity</p><p><img src="/myimages/e2f7696577b74c65ad876c29b182f1212.png" alt="NIO基础"></p><p>flip 动作发生后，position是读取位置，limit 等于读取限制</p><p><img src="/myimages/e2f7696577b74c65ad876c29b182f1213.png" alt="NIO基础"></p><p>clear 动作触发后，状态</p><p><img src="/myimages/e2f7696577b74c65ad876c29b182f1214.png" alt="NIO基础"></p><p>compact 方法，是把未读完的部分向前压缩，然后切换至写模式</p><p><img src="/myimages/e2f7696577b74c65ad876c29b182f1215.png" alt="NIO基础"></p><p>ByteBuffer常用实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBufferAllocate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(ByteBuffer.allocate(<span class="hljs-number">16</span>).getClass());<br><span class="hljs-comment">//        class java.nio.HeapByteBuffer     </span><br><span class="hljs-comment">//        堆内存，读写效率较低，受GC影响</span><br>        System.out.println(ByteBuffer.allocateDirect(<span class="hljs-number">16</span>).getClass());<br><span class="hljs-comment">//        class java.nio.DirectByteBuffer   </span><br><span class="hljs-comment">//        直接内存，读写效率较高（少一次数据拷贝），不受GC影响，分配效率低，可能会导致内存泄漏</span><br>&#125;<br></code></pre></td></tr></table></figure><p>HeapByteBuffer 和 DirectByteBuffer 关系图：</p><p><img src="/myimages/e2f7696577b74c65ad876c29b182f1216.png" alt="NIO基础"></p><h2 id="2、粘包与半包"><a href="#2、粘包与半包" class="headerlink" title="2、粘包与半包"></a>2、<strong>粘包与半包</strong></h2><p>网络上有多条数据发送给服务端，数据之间使用 \n 进行分隔但由于某种原因这些数据在接收时，被进行了重新组合，例如原始数据有3条为</p><ul><li>Hello,world\n</li><li>I’m Nyima\n</li><li>How are you?\n</li></ul><p>变成了下面的两个 byteBuffer (粘包，半包)</p><ul><li>Hello,world\nI’m Nyima\nHo</li><li>w are you?\n</li></ul><h3 id="原因"><a href="#原因" class="headerlink" title="原因:"></a><strong>原因:</strong></h3><p>粘包：发送方在发送数据时，并不是一条一条地发送数据，而是<strong>将数据整合在一起</strong>，当数据达到一定的数量后再一起发送。这就会导致多条信息被放在一个缓冲区中被一起发送出去</p><p>半包：接收方的缓冲区的大小是有限的，当接收方的缓冲区满了以后，就需要<strong>将信息截断</strong>，等缓冲区空了以后再继续放入数据。这就会发生一段完整的数据最后被截断的现象</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a><strong>解决办法</strong></h3><ul><li>通过get(index)方法遍历ByteBuffer，遇到分隔符时进行处理。<strong>注意</strong>：get(index)不会改变position的值<ul><li>记录该段数据长度，以便于申请对应大小的缓冲区</li><li>将缓冲区的数据通过get()方法写入到target中</li></ul></li><li>调用<strong>compact方法</strong>切换模式，因为缓冲区中可能还有未读的数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.plum.netty.nio.ByteBufferUtil.debugAll;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestByteBufferExam</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">32</span>);<br>        source.put(<span class="hljs-string">&quot;hello,word\nI,m zhangsan\nHo&quot;</span>.getBytes());<br>        split(source);<br>        source.put(<span class="hljs-string">&quot;w are you&quot;</span>.getBytes());<br>        split(source);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">split</span><span class="hljs-params">(ByteBuffer source)</span> &#123;<br>        source.flip();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; source.limit(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (source.get(i) == <span class="hljs-string">&#x27;\n&#x27;</span>)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span> - source.position();<br>                <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(length);<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; length; j++) &#123;<br>                    target.put(source.get());<br>                &#125;<br>                debugAll(target);<br>            &#125;<br>        &#125;<br><br>        source.compact();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、文件编程"><a href="#三、文件编程" class="headerlink" title="三、文件编程"></a>三、文件编程</h1><h2 id="1、FileChannel"><a href="#1、FileChannel" class="headerlink" title="1、FileChannel"></a>1、<strong>FileChannel</strong></h2><p>FileChannel<strong>只能在阻塞模式下工作</strong>，所以无法搭配Selector</p><p><strong>获取</strong></p><p>通过 FileInputStream、FileOutputStream 或者 RandomAccessFile 来获取 FileChannel，它们都有 getChannel 方法</p><ul><li>通过 FileInputStream 获取的 channel <strong>只能读</strong></li><li>通过 FileOutputStream 获取的 channel <strong>只能写</strong></li><li>通过 RandomAccessFile 是否能读写<strong>根据构造 RandomAccessFile 时的读写模式决定</strong></li></ul><h2 id="2、两个Channel传输数据"><a href="#2、两个Channel传输数据" class="headerlink" title="2、两个Channel传输数据"></a>2、<strong>两个Channel传输数据</strong></h2><p>使用transferTo方法可以快速、高效地将一个channel中的数据传输到另一个channel中，但<strong>一次只能传输2G的内容</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestChannel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;stu.txt&quot;</span>);<br>             <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;student.txt&quot;</span>);<br>             <span class="hljs-type">FileChannel</span> <span class="hljs-variable">inputChannel</span> <span class="hljs-operator">=</span> fis.getChannel();<br>             <span class="hljs-type">FileChannel</span> <span class="hljs-variable">outputChannel</span> <span class="hljs-operator">=</span> fos.getChannel()) &#123;<br>            <span class="hljs-comment">// 参数：inputChannel的起始位置，传输数据的大小，目的channel</span><br>            <span class="hljs-comment">// 返回值为传输的数据的字节数</span><br>            <span class="hljs-comment">// transferTo一次只能传输2G的数据</span><br>            inputChannel.transferTo(<span class="hljs-number">0</span>, inputChannel.size(), outputChannel);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当传输的文件<strong>大于2G</strong>时，需要使用以下方法进行多次传输</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestChannel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;stu.txt&quot;</span>);<br>             <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;student.txt&quot;</span>);<br>             <span class="hljs-type">FileChannel</span> <span class="hljs-variable">inputChannel</span> <span class="hljs-operator">=</span> fis.getChannel();<br>             <span class="hljs-type">FileChannel</span> <span class="hljs-variable">outputChannel</span> <span class="hljs-operator">=</span> fos.getChannel()) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> inputChannel.size();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">capacity</span> <span class="hljs-operator">=</span> inputChannel.size();<br>            <span class="hljs-comment">// 分多次传输</span><br>            <span class="hljs-keyword">while</span> (capacity &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// transferTo返回值为传输了的字节数</span><br>                capacity -= inputChannel.transferTo(size-capacity, capacity, outputChannel);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、网络编程"><a href="#五、网络编程" class="headerlink" title="五、网络编程"></a>五、网络编程</h1><h2 id="1、阻塞"><a href="#1、阻塞" class="headerlink" title="1、阻塞"></a>1、阻塞</h2><ul><li>阻塞模式下，相关方法都会导致线程暂停<ul><li>ServerSocketChannel.accept 会在<strong>没有连接建立时</strong>让线程暂停</li><li>SocketChannel.read 会在<strong>通道中没有数据可读时</strong>让线程暂停</li><li>阻塞的表现其实就是线程暂停了，暂停期间不会占用 cpu，但线程相当于闲置</li></ul></li><li>单线程下，阻塞方法之间相互影响，几乎不能正常工作，需要多线程支持</li><li>但多线程下，有新的问题，体现在以下方面<ul><li>32 位 jvm 一个线程 320k，64 位 jvm 一个线程 1024k，如果连接数过多，必然导致 OOM，并且线程太多，反而会因为频繁上下文切换导致性能降低</li><li>可以采用线程池技术来减少线程数和线程上下文切换，但治标不治本，如果有很多连接建立，但长时间 inactive，会阻塞线程池中所有线程，因此不适合长连接，只适合短连接</li></ul></li></ul><p><strong>服务端代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建缓冲区</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 获得服务器通道</span><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ServerSocketChannel.open()) &#123;<br>            <span class="hljs-comment">// 为服务器通道绑定端口</span><br>            server.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>            <span class="hljs-comment">// 用户存放连接的集合</span><br>            ArrayList&lt;SocketChannel&gt; channels = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-comment">// 循环接收连接</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;before connecting...&quot;</span>);<br>                <span class="hljs-comment">// 没有连接时，会阻塞线程</span><br>                <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> server.accept();<br>                System.out.println(<span class="hljs-string">&quot;after connecting...&quot;</span>);<br>                channels.add(socketChannel);<br>                <span class="hljs-comment">// 循环遍历集合中的连接</span><br>                <span class="hljs-keyword">for</span>(SocketChannel channel : channels) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;before reading&quot;</span>);<br>                    <span class="hljs-comment">// 处理通道中的数据</span><br>                    <span class="hljs-comment">// 当通道中没有数据可读时，会阻塞线程</span><br>                    channel.read(buffer);<br>                    buffer.flip();<br>                    ByteBufferUtil.debugRead(buffer);<br>                    buffer.clear();<br>                    System.out.println(<span class="hljs-string">&quot;after reading&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>客户端代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> SocketChannel.open()) &#123;<br>            <span class="hljs-comment">// 建立连接</span><br>            socketChannel.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br>            socketChannel.write(Charset.defaultCharset().encode(<span class="hljs-string">&quot;hello!&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;waiting...&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、非阻塞"><a href="#2、非阻塞" class="headerlink" title="2、非阻塞"></a>2、非阻塞</h2><ul><li>可以通过ServerSocketChannel的configureBlocking(<strong>false</strong>)方法将<strong>获得连接设置为非阻塞的</strong>。此时若没有连接，accept会返回null</li><li>可以通过SocketChannel的configureBlocking(<strong>false</strong>)方法将从通道中<strong>读取数据设置为非阻塞的</strong>。若此时通道中没有数据可读，read会返回-1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建缓冲区</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 获得服务器通道</span><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ServerSocketChannel.open()) &#123;<br>            <span class="hljs-comment">// 为服务器通道绑定端口</span><br>            server.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>            <span class="hljs-comment">// 用户存放连接的集合</span><br>            ArrayList&lt;SocketChannel&gt; channels = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-comment">// 循环接收连接</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 设置为非阻塞模式，没有连接时返回null，不会阻塞线程</span><br>                server.configureBlocking(<span class="hljs-literal">false</span>);<br>                <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> server.accept();<br>                <span class="hljs-comment">// 通道不为空时才将连接放入到集合中</span><br>                <span class="hljs-keyword">if</span> (socketChannel != <span class="hljs-literal">null</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;after connecting...&quot;</span>);<br>                    channels.add(socketChannel);<br>                &#125;<br>                <span class="hljs-comment">// 循环遍历集合中的连接</span><br>                <span class="hljs-keyword">for</span>(SocketChannel channel : channels) &#123;<br>                    <span class="hljs-comment">// 处理通道中的数据</span><br>                    <span class="hljs-comment">// 设置为非阻塞模式，若通道中没有数据，会返回0，不会阻塞线程</span><br>                    channel.configureBlocking(<span class="hljs-literal">false</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> channel.read(buffer);<br>                    <span class="hljs-keyword">if</span>(read &gt; <span class="hljs-number">0</span>) &#123;<br>                        buffer.flip();<br>                        ByteBufferUtil.debugRead(buffer);<br>                        buffer.clear();<br>                        System.out.println(<span class="hljs-string">&quot;after reading&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、Selector"><a href="#3、Selector" class="headerlink" title="3、Selector"></a>3、<strong>Selector</strong></h2><p><strong>多路复用</strong></p><p>单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用</p><ul><li><strong>多路复用仅针对网络 IO</strong>，普通文件 IO 无法利用多路复用</li><li>如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证<ul><li>有可连接事件时才去连接</li><li>有可读事件才去读取</li><li>有可写事件才去写入</li></ul></li><li>限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件</li></ul><p><strong>selector多路复用步骤：</strong></p><ul><li>通道设置为非阻塞模式并注册到选择器中，并设置感兴趣的事件</li><li>channel 必须工作在非阻塞模式</li><li>FileChannel 没有非阻塞模式，因此不能配合 selector 一起使用</li><li>绑定的<strong>事件类型</strong>可以有<ul><li>connect - 客户端连接成功时触发</li><li>accept - 服务器端成功接受连接时触发</li><li>read - 数据可读入时触发，有因为接收能力弱，数据暂不能读入的情况</li><li>write - 数据可写出时触发，有因为发送能力弱，数据暂不能写出的情况</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通道必须设置为非阻塞模式</span><br>server.configureBlocking(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 将通道注册到选择器中，并设置感兴趣的实践</span><br>server.register(selector, SelectionKey.OP_ACCEPT);<br></code></pre></td></tr></table></figure></li><li>Selector监听事件：获取就绪通道个数，若没有通道就绪，线程阻塞  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//阻塞直至有绑定事件发生</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.select();<br><span class="hljs-comment">//阻塞直到绑定事件发生，或是超时（时间单位为 ms）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.select(<span class="hljs-type">long</span> timeout);<br><span class="hljs-comment">//不会阻塞，也就是不管有没有事件，立刻返回，自己根据返回值检查是否有事件</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> selector.selectNow();<br></code></pre></td></tr></table></figure></li><li><strong>事件发生后，要么处理，要么取消（cancel），不能什么都不做，否则下次该事件仍会触发，这是因为 nio 底层使用的是水平触发。</strong></li></ul><p><strong>多路复用服务端代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 获得服务器通道</span><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ServerSocketChannel.open()) &#123;<br>            server.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>            <span class="hljs-comment">// 创建选择器</span><br>            <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br><br>            <span class="hljs-comment">// 通道必须设置为非阻塞模式</span><br>            server.configureBlocking(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 将通道注册到选择器中，并设置感兴趣的事件</span><br>            server.register(selector, SelectionKey.OP_ACCEPT);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 若没有事件就绪，线程会被阻塞，反之不会被阻塞。从而避免了CPU空转</span><br>                <span class="hljs-comment">// 返回值为就绪的事件个数</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">ready</span> <span class="hljs-operator">=</span> selector.select();<br>                System.out.println(<span class="hljs-string">&quot;selector ready counts : &quot;</span> + ready);<br><br>                <span class="hljs-comment">// 获取所有事件</span><br>                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br><br>                <span class="hljs-comment">// 使用迭代器遍历事件</span><br>                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br><br>                    <span class="hljs-comment">// 判断key的类型</span><br>                    <span class="hljs-keyword">if</span>(key.isAcceptable()) &#123;<br>                        <span class="hljs-comment">// 获得key对应的channel</span><br>                        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> (ServerSocketChannel) key.channel();<br>                        System.out.println(<span class="hljs-string">&quot;before accepting...&quot;</span>);<br><br>                        <span class="hljs-comment">// 获取连接并处理，而且是必须处理，否则需要取消</span><br>                        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> channel.accept();<br>                        System.out.println(<span class="hljs-string">&quot;after accepting...&quot;</span>);<br><br>                        <span class="hljs-comment">// 处理完毕后移除</span><br>                        iterator.remove();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、Read事件"><a href="#4、Read事件" class="headerlink" title="4、Read事件"></a>4、Read事件</h2><p>在Accept事件中，若有客户端与服务器端建立了连接，需要将其对应的SocketChannel设置为非阻塞，并注册到选择其中Selector 中 关联read事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 获得服务器通道</span><br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ServerSocketChannel.open()) &#123;<br>            server.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>            <span class="hljs-comment">// 创建选择器</span><br>            <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>            <span class="hljs-comment">// 通道必须设置为非阻塞模式</span><br>            server.configureBlocking(<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">// 将通道注册到选择器中，并设置感兴趣的实践</span><br>            server.register(selector, SelectionKey.OP_ACCEPT);<br>            <span class="hljs-comment">// 为serverKey设置感兴趣的事件</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-comment">// 若没有事件就绪，线程会被阻塞，反之不会被阻塞。从而避免了CPU空转</span><br>                <span class="hljs-comment">// 返回值为就绪的事件个数</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">ready</span> <span class="hljs-operator">=</span> selector.select();<br>                System.out.println(<span class="hljs-string">&quot;selector ready counts : &quot;</span> + ready);<br>                <span class="hljs-comment">// 获取所有事件</span><br>                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br>                <span class="hljs-comment">// 使用迭代器遍历事件</span><br>                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br>                    <span class="hljs-comment">// 判断key的类型</span><br>                    <span class="hljs-keyword">if</span>(key.isAcceptable()) &#123;<br>                        <span class="hljs-comment">// 获得key对应的channel</span><br>                        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> (ServerSocketChannel) key.channel();<br>                        System.out.println(<span class="hljs-string">&quot;before accepting...&quot;</span>);<br>                        <span class="hljs-comment">// 获取连接</span><br>                        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socketChannel</span> <span class="hljs-operator">=</span> channel.accept();<br>                        System.out.println(<span class="hljs-string">&quot;after accepting...&quot;</span>);<br>                        <span class="hljs-comment">// 设置为非阻塞模式，同时将连接的通道也注册到选择其中</span><br>                        socketChannel.configureBlocking(<span class="hljs-literal">false</span>);<br>                        socketChannel.register(selector, SelectionKey.OP_READ);<br>                        <span class="hljs-comment">// 处理完毕后移除</span><br>                        iterator.remove();<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isReadable()) &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> (SocketChannel) key.channel();<br>                            System.out.println(<span class="hljs-string">&quot;before reading...&quot;</span>);<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> channel.read(buffer);<br>                            System.out.println(<span class="hljs-string">&quot;after reading...&quot;</span>);<br>                            <span class="hljs-keyword">if</span> (read == -<span class="hljs-number">1</span>)&#123;<br>                                key.cancel();<br>                            &#125;<span class="hljs-keyword">else</span> &#123;<br>                                buffer.flip();<br>                                ByteBufferUtil.debugRead(buffer);<br>                            &#125;<br>                        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                            e.printStackTrace();<br>                            key.cancel();   <span class="hljs-comment">//客户端断开后，channel.read 会抛出 IOException ，并取消事件</span><br>                        &#125;<span class="hljs-keyword">finally</span> &#123;<br>                            buffer.clear();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>处理消息的边界</strong></p><p>客户端发送中文字符 “你好”，共6个字节，而服务端byteBuffer大小设置为4，不足以一次性接收所有信息，则会出现乱码情况。</p><p><img src="/myimages/e2f7696577b74c65ad876c29b182f1217.png" alt="NIO基础"></p><p>解决思路：</p><ul><li><strong>固定消息长度</strong>，数据包大小一样，服务器按预定长度读取，当发送的数据较少时，需要将数据进行填充，直到长度与消息规定长度一致。缺点是浪费带宽</li><li>另一种思路是按分隔符拆分，缺点是效率低，需要一个一个字符地去匹配分隔符</li><li><strong>TLV 格式，即 Type 类型、Length 长度、Value 数据</strong>（也就是在消息开头<strong>用一些空间存放后面数据的长度</strong>），如HTTP请求头中的Content-Type与<strong>Content-Length</strong>。类型和长度已知的情况下，就可以方便获取消息大小，分配合适的 buffer，缺点是 buffer 需要提前分配，如果内容过大，则影响 server 吞吐量<ul><li>Http 1.1 是 TLV 格式</li><li>Http 2.0 是 LTV 格式</li></ul>  <img src="/myimages/e2f7696577b74c65ad876c29b182f1218.png" alt="NIO基础"></li></ul><h2 id="5、Write事件"><a href="#5、Write事件" class="headerlink" title="5、Write事件"></a>5、Write事件</h2><p>服务器通过Buffer向通道中写入数据时，<strong>如果通道容量小于Buffer中的数据大小，便需要分多次写入：</strong></p><ul><li>执行一次写操作，向将buffer中的内容写入到SocketChannel中，然后判断Buffer中是否还有数据</li><li>若Buffer中还有数据，则需要将SockerChannel注册到Seletor中，并关注写事件，同时将未写完的Buffer作为附件一起放入到SelectionKey中</li><li>添加写事件的相关操作key.isWritable()，对Buffer再次进行写操作。每次写后需要判断Buffer中是否还有数据（是否写完）。<strong>若写完，需要移除SelecionKey中的Buffer附件，避免其占用过多内存，同时还需移除对写事件的关注。</strong></li></ul><p><strong>服务端发送数据代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">ssc</span> <span class="hljs-operator">=</span> ServerSocketChannel.open();<br>        ssc.configureBlocking(<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br>        ssc.register(selector, SelectionKey.OP_ACCEPT);<br>        ssc.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            selector.select();<br>            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();<br>            <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>                <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br>                iterator.remove();<br>                <span class="hljs-keyword">if</span> (key.isAcceptable())&#123;<br>                    <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> ssc.accept();<br>                    sc.configureBlocking(<span class="hljs-literal">false</span>);<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">sckey</span> <span class="hljs-operator">=</span> sc.register(selector, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>                    <span class="hljs-comment">// 1. 向客户端发送大量数据</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30000000</span>; i++) &#123;<br>                        sb.append(<span class="hljs-string">&quot;a&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> Charset.defaultCharset().encode(sb.toString());<br>                    <span class="hljs-comment">// 2. 返回值代表实际写入的字节数</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">write</span> <span class="hljs-operator">=</span> sc.write(buffer);<br>                    System.out.println(write);<br>                    <span class="hljs-comment">// 3. 判断是否有剩余内容</span><br>                    <span class="hljs-keyword">if</span> (buffer.hasRemaining())&#123;<br>                        <span class="hljs-comment">// 4. 关注可写事件</span><br>                        sckey.interestOps(sckey.interestOps() + SelectionKey.OP_WRITE);<br>                        <span class="hljs-comment">// 5. 把未写完的数据挂到 sckey上</span><br>                        sckey.attach(buffer);<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key.isWritable())&#123;<br>                    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> (ByteBuffer) key.attachment();<br>                    <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> (SocketChannel)key.channel();<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">write</span> <span class="hljs-operator">=</span> sc.write(buffer);<br>                    System.out.println(write);<br>                    <span class="hljs-comment">//清理操作</span><br>                    <span class="hljs-keyword">if</span> (!buffer.hasRemaining())&#123;<br>                        key.attach(<span class="hljs-literal">null</span>);   <span class="hljs-comment">//清楚 buffer</span><br>                        key.interestOps(key.interestOps() - SelectionKey.OP_WRITE); <span class="hljs-comment">//注销可写事件</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>客户端接收数据代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> SocketChannel.open();<br>        sc.connect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">8080</span>));<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br>            count += sc.read(buffer);<br>            System.out.println(count);<br>            buffer.clear();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、多线程优化"><a href="#6、多线程优化" class="headerlink" title="6、多线程优化"></a>6、多线程优化</h2><ul><li>创建一个负责处理Accept事件的Boss线程，与多个负责处理Read事件的Worker线程</li><li>Boss线程执行的操作<ul><li>接受并处理Accepet事件，当Accept事件发生后，调用Worker的register(SocketChannel socket)方法，让Worker去处理Read事件，其中需要根据标识robin去判断将任务分配给哪个Worker</li><li>register(SocketChannel socket)方法会通过同步队列完成Boss线程与Worker线程之间的通信，让SocketChannel的注册任务被Worker线程执行。添加任务后需要调用selector.wakeup()来唤醒被阻塞的Selector</li></ul></li><li>Worker线程执行的操作<ul><li>从同步队列中获取注册任务，并处理Read事件</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetSocketAddress;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.SelectionKey;<br><span class="hljs-keyword">import</span> java.nio.channels.Selector;<br><span class="hljs-keyword">import</span> java.nio.channels.ServerSocketChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.SocketChannel;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiThreadServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ServerSocketChannel</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> ServerSocketChannel.open()) &#123;<br>            <span class="hljs-comment">// 当前线程为Boss线程</span><br>            Thread.currentThread().setName(<span class="hljs-string">&quot;Boss&quot;</span>);<br>            server.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-number">8080</span>));<br>            <span class="hljs-comment">// 负责轮询Accept事件的Selector</span><br>            <span class="hljs-type">Selector</span> <span class="hljs-variable">boss</span> <span class="hljs-operator">=</span> Selector.open();<br>            server.configureBlocking(<span class="hljs-literal">false</span>);<br>            server.register(boss, SelectionKey.OP_ACCEPT);<br>            <span class="hljs-comment">// 创建固定数量的Worker</span><br>            Worker[] workers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>[<span class="hljs-number">4</span>];<br>            <span class="hljs-comment">// 用于负载均衡的原子整数</span><br>            <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">robin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; workers.length; i++) &#123;<br>                workers[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&quot;worker-&quot;</span>+i);<br>            &#125;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                boss.select();<br>                Set&lt;SelectionKey&gt; selectionKeys = boss.selectedKeys();<br>                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>                    <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br>                    iterator.remove();<br>                    <span class="hljs-comment">// BossSelector负责Accept事件</span><br>                    <span class="hljs-keyword">if</span> (key.isAcceptable()) &#123;<br>                        <span class="hljs-comment">// 建立连接</span><br>                        <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> server.accept();<br>                        System.out.println(<span class="hljs-string">&quot;connected...&quot;</span>);<br>                        socket.configureBlocking(<span class="hljs-literal">false</span>);<br>                        <span class="hljs-comment">// socket注册到Worker的Selector中</span><br>                        System.out.println(<span class="hljs-string">&quot;before read...&quot;</span>);<br>                        <span class="hljs-comment">// 负载均衡，轮询分配Worker</span><br>                        workers[robin.getAndIncrement()% workers.length].register(socket);<br>                        System.out.println(<span class="hljs-string">&quot;after read...&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>        <span class="hljs-keyword">private</span> Thread thread;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Selector selector;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">started</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 同步队列，用于Boss线程与Worker线程之间的通信</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> ConcurrentLinkedQueue&lt;Runnable&gt; queue;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-keyword">final</span> SocketChannel socket)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-comment">// 只启动一次</span><br>            <span class="hljs-keyword">if</span> (!started) &#123;<br>                thread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>, name);<br>                selector = Selector.open();<br>                queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentLinkedQueue</span>&lt;&gt;();<br>                thread.start();<br>                started = <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 向同步队列中添加SocketChannel的注册事件</span><br>            <span class="hljs-comment">// 在Worker线程中执行注册事件</span><br>            queue.add(() -&gt; &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        socket.register(selector, SelectionKey.OP_READ);<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;);<br>            <span class="hljs-comment">// 唤醒被阻塞的Selector</span><br>            <span class="hljs-comment">// select类似LockSupport中的park，wakeup的原理类似LockSupport中的unpark</span><br>            selector.wakeup();<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    selector.select();<br>                    <span class="hljs-comment">// 通过同步队列获得任务并运行</span><br>                    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> queue.poll();<br>                    <span class="hljs-keyword">if</span> (task != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-comment">// 获得任务，执行注册操作</span><br>                        task.run();<br>                    &#125;<br>                    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<br>                    Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();<br>                    <span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>                        <span class="hljs-type">SelectionKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();<br>                        iterator.remove();<br>                        <span class="hljs-comment">// Worker只负责Read事件</span><br>                        <span class="hljs-keyword">if</span> (key.isReadable()) &#123;<br>                            <span class="hljs-comment">// 简化处理，省略细节</span><br>                            <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> (SocketChannel) key.channel();<br>                            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>                            socket.read(buffer);<br>                            buffer.flip();<br>                            ByteBufferUtil.debugAll(buffer);<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六、NIO与BIO"><a href="#六、NIO与BIO" class="headerlink" title="六、NIO与BIO"></a>六、<strong>NIO与BIO</strong></h1><h2 id="1、Stream与Channel"><a href="#1、Stream与Channel" class="headerlink" title="1、Stream与Channel"></a><strong>1、Stream与Channel</strong></h2><ul><li>stream 不会自动缓冲数据，channel 会利用系统提供的发送缓冲区、接收缓冲区（更为底层）</li><li>stream 仅支持阻塞 API，channel 同时支持阻塞、非阻塞 API，<strong>网络 channel 可配合 selector 实现多路复用</strong></li><li>二者<strong>均为全双工</strong>，即读写可以同时进行（虽然Stream是单向流动的，但是它也是全双工的）</li></ul><h2 id="2、IO模型"><a href="#2、IO模型" class="headerlink" title="2、IO模型"></a><strong>2、IO模型</strong></h2><ul><li><strong>同步</strong>：线程自己去获取结果（一个线程）<ul><li>例如：线程调用一个方法后，需要等待方法返回结果</li></ul></li><li><strong>异步</strong>：线程自己不去获取结果，而是由其它线程返回结果（至少两个线程）<ul><li>例如：线程A调用一个方法后，继续向下运行，运行结果由线程B返回</li></ul></li></ul><p>当调用一次 channel.<strong>read</strong> 或 stream.<strong>read</strong> 后，会由用户态切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：</p><ul><li>等待数据阶段</li><li>复制数据阶段</li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418151243.png" alt="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418151243.png"></p><p><strong>根据UNIX 网络编程 - 卷 I，IO模型主要有以下几种</strong></p><h3 id="阻塞IO"><a href="#阻塞IO" class="headerlink" title="阻塞IO"></a><strong>阻塞IO</strong></h3><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418151605.png" alt="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418151605.png"></p><ul><li>用户线程进行read操作时，<strong>需要等待操作系统执行实际的read操作</strong>，此期间用户线程是被阻塞的，无法执行其他操作</li></ul><h3 id="非阻塞IO"><a href="#非阻塞IO" class="headerlink" title="非阻塞IO"></a><strong>非阻塞IO</strong></h3><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418152137.png" alt="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418152137.png"></p><ul><li>用户线程<strong>在一个循环中一直调用read方法</strong>，若内核空间中还没有数据可读，立即返回，<strong>只是在等待阶段非阻塞。</strong></li><li>用户线程发现内核空间中有数据后，等待内核空间执行复制数据，待复制结束后返回结果</li></ul><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a><strong>多路复用</strong></h3><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418154208.png" alt="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418154208.png"></p><p><strong>Java中通过Selector实现多路复用</strong></p><ul><li>当没有事件时，调用select方法会被阻塞住</li><li>一旦有一个或多个事件发生后，就会处理对应的事件，从而实现多路复用</li></ul><p><strong>多路复用与阻塞IO的区别</strong></p><ul><li>阻塞IO模式下，<strong>若线程因accept事件被阻塞，发生read事件后，仍需等待accept事件执行完成后</strong>，才能去处理read事件</li><li>多路复用模式下，一个事件发生后，若另一个事件处于阻塞状态，不会影响该事件的执行</li></ul><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a><strong>异步IO</strong></h3><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418160106.png" alt="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418160106.png"></p><ul><li>线程1调用方法后理解返回，<strong>不会被阻塞也不需要立即获取结果</strong></li><li>当方法的运行结果出来以后，由线程2将结果返回给线程1</li></ul><h2 id="3、零拷贝"><a href="#3、零拷贝" class="headerlink" title="3、零拷贝"></a><strong>3、零拷贝</strong></h2><p><strong>零拷贝指的是数据无需拷贝到 JVM 内存中</strong>，同时具有以下三个优点</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算，减少 cpu 缓存伪共享</li><li>零拷贝适合小文件传输</li></ul><h3 id="传统-IO-问题"><a href="#传统-IO-问题" class="headerlink" title="传统 IO 问题"></a><strong>传统 IO 问题</strong></h3><p>传统的 IO 将一个文件通过 socket 写出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;helloword/data.txt&quot;</span>);<br><span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(file, <span class="hljs-string">&quot;r&quot;</span>);<br><br><span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)f.length()];<br>file.read(buf);<br><br><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> ...;<br>socket.getOutputStream().write(buf);Copy<br></code></pre></td></tr></table></figure><p><strong>内部工作流如下</strong></p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162306.png" alt="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162306.png"></p><ul><li>Java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 Java 程序的<strong>用户态切换至内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 CPU  <code>DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</code></li><li>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 <strong>CPU 会参与拷贝</strong>，无法利用 DMA</li><li>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区，CPU 会参与拷贝</strong></li><li>接下来要向网卡写数据，这项能力 Java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><ul><li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li><li>数据拷贝了共 4 次</li></ul><h3 id="NIO-优化"><a href="#NIO-优化" class="headerlink" title="NIO 优化"></a><strong>NIO 优化</strong></h3><p>通过 <strong>DirectByteBuf</strong></p><ul><li>ByteBuffer.allocate(10)<ul><li>底层对应 HeapByteBuffer，使用的还是 Java 内存</li></ul></li><li>ByteBuffer.<strong>allocateDirect</strong>(10)<ul><li>底层对应DirectByteBuffer，<strong>使用的是操作系统内存</strong></li></ul></li></ul><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162410.png" alt="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162410.png"></p><p>大部分步骤与优化前相同，唯有一点：<strong>Java 可以使用 DirectByteBuffer 将堆外内存映射到 JVM 内存中来直接访问使用</strong></p><ul><li>这块内存不受 JVM 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</li><li>Java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步<ul><li>DirectByteBuffer 对象被垃圾回收，将虚引用加入引用队列<ul><li>当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存</li><li>DirectByteBuffer 的释放底层调用的是 Unsafe 的 freeMemory 方法</li></ul></li><li>通过专门线程访问引用队列，根据虚引用释放堆外内存</li></ul></li><li><strong>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</strong></li></ul><h3 id="进一步优化1"><a href="#进一步优化1" class="headerlink" title="进一步优化1"></a><strong>进一步优化1</strong></h3><p><strong>以下两种方式都是零拷贝</strong>，即无需将数据拷贝到用户缓冲区中（JVM内存中）</p><p>底层采用了 <strong>linux 2.1</strong> 后提供的 <strong>sendFile</strong> 方法，Java 中对应着两个 channel 调用 <strong>transferTo/transferFrom</strong> 方法拷贝数据</p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162750.png" alt="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418162750.png"></p><ul><li>Java 调用 transferTo 方法后，要从 Java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 CPU</li><li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，CPU 会参与拷贝</li><li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p>这种方法下</p><ul><li>只发生了1次用户态与内核态的切换</li><li>数据拷贝了 3 次</li></ul><h3 id="进一步优化2"><a href="#进一步优化2" class="headerlink" title="进一步优化2"></a><strong>进一步优化2</strong></h3><p><strong>linux 2.4</strong> 对上述方法再次进行了优化</p><p><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418163033.png" alt="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20210418163033.png"></p><ul><li>Java 调用 transferTo 方法后，要从 Java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 CPU</li><li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li><li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 CPU</li></ul><p><strong>整个过程仅只发生了1次用户态与内核态的切换，数据拷贝了 2 次</strong></p><h2 id="4、AIO"><a href="#4、AIO" class="headerlink" title="4、AIO"></a><strong>4、AIO</strong></h2><p>AIO 用来解决数据复制阶段的阻塞问题</p><ul><li>同步意味着，在进行读写操作时，线程需要等待结果，还是相当于闲置</li><li>异步意味着，在进行读写操作时，线程不必等待结果，而是将来由操作系统来通过回调方式由另外的线程来获得结果</li><li>异步模型需要底层操作系统（Kernel）提供支持</li><li>Windows 系统通过 IOCP <strong>实现了真正的异步 IO</strong></li><li>Linux 系统异步 IO 在 2.6 版本引入，但其<strong>底层实现还是用多路复用模拟了异步 IO，性能没有优势</strong></li></ul><p><strong>AIO示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.ByteBuffer;<br><span class="hljs-keyword">import</span> java.nio.channels.AsynchronousChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.AsynchronousFileChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.CompletionHandler;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.nio.file.StandardOpenOption;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.plum.netty.nio.ByteBufferUtil.debugAll;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AioFileChannel</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span>(<span class="hljs-type">AsynchronousFileChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> AsynchronousFileChannel.open(Paths.get(<span class="hljs-string">&quot;data.txt&quot;</span>), StandardOpenOption.READ))&#123;<br>            <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">16</span>);<br>            log.debug(<span class="hljs-string">&quot;read begin...&quot;</span>);<br>            channel.read(buffer, <span class="hljs-number">0</span>, buffer, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completed</span><span class="hljs-params">(Integer result, ByteBuffer attachment)</span> &#123;<br>                    attachment.flip();<br>                    debugAll(attachment);<br>                &#125;<br><br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>                    exc.printStackTrace();<br>                &#125;<br>            &#125;);<br>            log.debug(<span class="hljs-string">&quot;read end...&quot;</span>);<br><br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NIO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis ZSet 底层数据结构</title>
    <link href="/2022/01/01/Redis%20ZSet%20%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022/01/01/Redis%20ZSet%20%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Redis-常用的5种数据类型"><a href="#一、Redis-常用的5种数据类型" class="headerlink" title="一、Redis 常用的5种数据类型"></a>一、Redis 常用的5种数据类型</h1><p>1.字符串（String）<br>2.列表（List）<br>3.哈希（Hash）<br>4.集合（Set）<br>5.有序结合（ZSet）</p><h1 id="二、Zset的底层数据结构"><a href="#二、Zset的底层数据结构" class="headerlink" title="二、Zset的底层数据结构"></a>二、Zset的底层数据结构</h1><ul><li>Zset的底层使用ziplist（压缩列表）或者skiplist（跳表）</li><li>同时满足条件（1）元素数量小于128个（zet-max-ziplist-entries 128）（2）所有member的长度小于64字节（zet-max-ziplist-value 64），则使用ziplist数据结构否则使用skiplist。</li></ul><h2 id="skiplist-结构"><a href="#skiplist-结构" class="headerlink" title="skiplist 结构"></a>skiplist 结构</h2><h3 id="1-skiplist-结构体源码"><a href="#1-skiplist-结构体源码" class="headerlink" title="1.skiplist 结构体源码"></a>1.skiplist 结构体源码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">zset</span>&#123;<br>  <span class="hljs-comment">//跳表</span><br>  zskiplist *zsl;<br>  <span class="hljs-comment">//字典</span><br>  dict *dice;<br>&#125;zset;<br></code></pre></td></tr></table></figure><h3 id="2-跳表查找原理"><a href="#2-跳表查找原理" class="headerlink" title="2.跳表查找原理"></a>2.跳表查找原理</h3><ul><li>跳表（skip List）基于链表，只不过它在链表的基础上增加了跳跃功能，实现简单插入删除查找的复杂度均为O(logN)的链表。</li><li><strong>每相邻两个节点增加一个指针，让指针指向下下个节点，所有新增加的指针连成了一个新的链表，但他包含的节点个数只有原来的一半。</strong></li><li>现在当我们想要查找数据的时候，可以先沿着这个新的链表进行查找。当碰到比待查数据大的节点时，再回到原先链表中的该节点进行查找，查找过程中，由于新增加的指针，我们不再需要与链表中每个节点进行逐个比较。需要比较的节点数约为原先的二分之一，</li><li>因此可以在新的链表上继续为每个相邻的节点增加一个指针，从而产生第三层链表，当链表足够长时，这种多层链表查找的的方式能让我们跳过很多下层节点，大大加快查找速度。</li></ul><p><img src="/myimages/2125960-20211230151034651-1061392070.png" alt="跳表"></p><h3 id="3-Zset为什么选择-skiplist"><a href="#3-Zset为什么选择-skiplist" class="headerlink" title="3. Zset为什么选择 skiplist"></a>3. Zset为什么选择 skiplist</h3><ul><li>有序和无序：skiplist和各种平衡树（AVL，红黑树）的元素是有序排列的，而hash表不是有序的，因此在hash表上只能做单个key的查找，不适合做范围查找。</li><li>范围查找：在做范围查找的时候，平衡树比skiplist操作复杂。在平衡树上找到指定范围的最小值后，还需要以中序遍历顺序继续寻找其他不超过最大值的节点，如果不对平衡树进行一定的改造，中序遍历并不容易实现。而skiplist上进行范围查找就非常简单，只需要找到最小值后对第一层链表进行若干步遍历就可以实现，</li><li>插入和删除：平衡树的插入和删除可能引起子树的调整，逻辑复杂，而skiplist的插入和删除只需要修改相邻节点的指针，操作简单迅速。</li><li>单个查找：查找单个key，skiplist和平衡树的时间复杂度都为O(logN)，大体相当：而hash表在保持较低的hash值冲突概率的前提下，查找时间复杂度接近O(1)，性能更高一些。所以我们平常使用的各种Map或者dictionary结构，大都是基于hash表实现的。</li></ul><p>总结 ：平衡树和skiplit的查找、插入、删除的速度相当，但是从算法实现难度比较skiplit比平衡树简单。因此选择 skiplist 作为Zset的底层数据结构。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器输入URL后发生了什么</title>
    <link href="/2021/12/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <url>/2021/12/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<h1 id="1-合成URL"><a href="#1-合成URL" class="headerlink" title="1. 合成URL"></a>1. 合成URL</h1><p>用户输入URL后浏览器根据输入的信息判断是搜索还是跳转网址，如果是搜索内容则将搜索内容 + 默认的搜索引擎组合成新的URL，如果用户数据的URL是合法网址则直接跳转至输入的URL网址。</p><h1 id="2-DNS域名解析"><a href="#2-DNS域名解析" class="headerlink" title="2. DNS域名解析"></a>2. DNS域名解析</h1><p>浏览器通过DNS域名解析服务器将输入的域名 解析 为对应服务的IP地址，这样才能访问到域名指定的服务器。</p><h3 id="本地DNS服务器查询"><a href="#本地DNS服务器查询" class="headerlink" title="本地DNS服务器查询"></a>本地DNS服务器查询</h3><p>本地DNS服务器之间递归查询，在任意一步查询到域名时就会终止递归，返回域名对应的IP地址。<br><img src="/myimages/2125960-20211222101149934-1082882416.png" alt="本地DNS解析流程"></p><h3 id="根域名服务器、顶级域名服务器、权威域名服务器"><a href="#根域名服务器、顶级域名服务器、权威域名服务器" class="headerlink" title="根域名服务器、顶级域名服务器、权威域名服务器"></a>根域名服务器、顶级域名服务器、权威域名服务器</h3><ul><li>根DNS服务器负责 返回顶级域 DNS 服务器的 IP 地址，顶级域 DNS 服务器负责 返回权威 DNS 服务器的 IP 地址，权威 DNS 服务器负责 返回相应主机的 IP 地址</li><li>如果本地的DNS服务器无法查询，则迭代到根域名服务器、顶级域名服务器、权威域名服务器 查询。</li></ul><p><img src="/myimages/2125960-20211222105352966-541624390.png"></p><h1 id="3-建立-TCP-连接"><a href="#3-建立-TCP-连接" class="headerlink" title="3. 建立 TCP 连接"></a>3. 建立 TCP 连接</h1><p>首先判断请求是否是https的，如果是则在http的基础上套上一层ssl/tls外壳，用于加密通信，每次传输的都是加密后的数据。<br><strong>TCP三次握手连接：</strong></p><ul><li>第一次握手：建立连接，客户端发送连接请求报文，将SYN位置为1，seq为X,然后客户端进入SYN_SEND状态，等待服务器的确认。</li><li>第二次握手：服务器收到SYN报文段，服务器收到客户端的SYN报文段，就知道这是一个要建立连接的请求，然后服务器也回复一个SYN的报文段(seq为y)，<br>并且附带ACK（ACK置为X+1）信息用于确认收到了第一次握手请求的信息。发送后服务端进入SYN_RECV状态。</li><li>第三次握手：客户端收到了服务器的SYN+ACK信息后，也返回一个ACK（ACK置为y+1）的确认报文。此后客户端和服务端都进入ESTABLISHED状态，完成三次握手。</li></ul><p><strong>SSL握手连接</strong></p><ul><li>第一阶段 ：客户端向服务器发送握手请求，包括所支持的TLS版本和密码组合以供服务器选择，还有一个”client random” 随机字符串</li><li>第二阶段 ：服务器对客户端进行回应，包括数据证书，服务器选择的密码组合和”server random” 随机字符串</li><li>第三阶段 ：客户端对服务器发来的证书进行验证，确保对方的合法身份，验证过程具体为（1）检查数字签名（2）验证证书链（3）检查证书有效期（4）检查证书的撤回状态</li><li>第四阶段 ：客户端向服务器发送另一个随机字符串”premaster secret”(预主密钥)，这个字符串经过服务的公钥加密，只有服务器的私钥才能解密。</li><li>第五阶段 ：服务器使用私钥解密 “premaster secret” 字符串</li><li>第六阶段 ：生成共享密钥,客户端和服务器均使用 client random、server random、premaster secret，并使用相同的算法生成相同的共享密钥KEY。</li><li>第七阶段 : 客户端发送经过共享密钥 KEY 加密过的 “finished” 信号。</li><li>第八阶段 : 服务器发送经过共享密钥 KEY 加密过的 “finished” 信号。</li><li>第九阶段 ：握手完成，之后双方通信使用 共享密钥 KEY  对称加密 安全通信。</li></ul><h1 id="4-发送HTTP请求，服务器处理并返回请求"><a href="#4-发送HTTP请求，服务器处理并返回请求" class="headerlink" title="4. 发送HTTP请求，服务器处理并返回请求"></a>4. 发送HTTP请求，服务器处理并返回请求</h1><p>TCP连接建立后，浏览器就可以利用HTTP/HTTPS协议向服务器发送请求了。服务器接受到请求，就解析请求头，如果头部有缓存相关信息如if-none-match与if-modified-since,则验证缓存是否有效，若有效测返回状态码304，若无效则重新返回资源，状态码为200.</p><h1 id="5-关闭TCP连接"><a href="#5-关闭TCP连接" class="headerlink" title="5. 关闭TCP连接"></a>5. 关闭TCP连接</h1><p><strong>TCP四次挥手</strong></p><ul><li>第一次挥手 ：客户端（也可以是服务器端）发送一个FIN报文段给服务器，然后客户端进入FIN_WAIT_1状态</li><li>第二次挥手 ：服务器端收到了客户端发送的FIN报文段，向客户端回一个ACK确认报文，客户端进入FIN_WAIT_2状态</li><li>第三次挥手 : 服务器端向客户端发送FIN报文表示这是一个要关闭连接的请求，同事服务端进入LAST_ACL状态。</li><li>第四次挥手 ：客户端收到服务器端发送的FIN报文，向服务端发送ACK确认报文，然后客户端进入TIME_WAIT状态，服务端收到ACK确认报文后关闭连接，客户端等待1-2MS后关闭连接。</li></ul><h1 id="6-浏览器渲染"><a href="#6-浏览器渲染" class="headerlink" title="6. 浏览器渲染"></a>6. 浏览器渲染</h1><ul><li>渲染进程将 HTML 内容转换为能够读懂DOM 树结构。</li><li>渲染引擎将 CSS 样式表转化为浏览器可以理解的styleSheets，计算出 DOM 节点的样式。</li><li>创建布局树，并计算元素的布局信息。</li><li>对布局树进行分层，并生成分层树。</li><li>为每个图层生成绘制列表，并将其提交到合成线程。合成线程将图层分图块，并栅格化将图块转换成位图。</li><li>合成线程发送绘制图块命令给浏览器进程。浏览器进程根据指令生成页面，并显示到显示器上。</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子串匹配—KMP算法实现</title>
    <link href="/2021/08/20/%E5%AD%90%E4%B8%B2%E5%8C%B9%E9%85%8D%E2%80%94KMP%E7%AE%97%E6%B3%95/"/>
    <url>/2021/08/20/%E5%AD%90%E4%B8%B2%E5%8C%B9%E9%85%8D%E2%80%94KMP%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p>实现 strStr() 函数。</p><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  -1 。</p><p>当 <code>needle</code> 是空字符串时，应当返回0。</p><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><p>KMP算法是用于求解字符串匹配的算法，其可以把时间复杂度降为O(m+n)，进而大大提升效率。</p><p>第一步是求解next数组，是子串needle自己对自己做匹配，其定义为： t[0]~t[x] 这一段字符串，使得<strong>K-前缀恰等于K-后缀</strong>的最大的K.</p><p>因此计算next[x]则需要先知道next[x-1]，记为k，然后判断t[x-1]与t[k]是否相等，如果相等表明最长前后相等的前后缀增大了一位即next[x]=k+1，</p><p>如果不相等应该减小k，然后再次判断t[x-1]与t[k]是否相等，为了使k尽可能的大，k应该等于next[k]。</p><p>第二步就是根据所求得的next数组，与s字符数组进行匹配，如果t与s相等则两者都向前移一位，如果相等则t串的指针移至此时的指针对应的next数组的值。</p><p>整个匹配过程s字符串的指针不会后退因此只需要遍历一边s字符串等到结果提升了匹配效率。</p><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KMP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">KMP</span> <span class="hljs-variable">kmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KMP</span>();<br>        System.out.println(kmp.strStr(<span class="hljs-string">&quot;abcabaabaabcacb&quot;</span>, <span class="hljs-string">&quot;abaabcac&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>        <span class="hljs-type">char</span>[] s = haystack.toCharArray();<br>        <span class="hljs-type">char</span>[] t = needle.toCharArray();<br>        <span class="hljs-type">int</span>[] next = getNext(t);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i&lt;s.length &amp;&amp; j&lt;t.length)&#123;<br>            <span class="hljs-keyword">if</span> (j == -<span class="hljs-number">1</span> || s[i] == t[j])&#123;<br>                i++;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                j = next[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (j == t.length)<br>            <span class="hljs-keyword">return</span> i-j;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] getNext(<span class="hljs-type">char</span>[] t)&#123;<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[t.length];<br>        next[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;<br>        next[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; t.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> next[i-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">while</span> (k != -<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">if</span> (t[i-<span class="hljs-number">1</span>] == t[k])&#123;<br>                    next[i] = k+<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    k = next[k];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java八种常见算法</title>
    <link href="/2021/07/10/Java%E5%85%AB%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2021/07/10/Java%E5%85%AB%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、8种常见排序算法简介"><a href="#一、8种常见排序算法简介" class="headerlink" title="一、8种常见排序算法简介"></a>一、8种常见排序算法简介</h1><h2 id="1-分类图"><a href="#1-分类图" class="headerlink" title="1. 分类图"></a>1. 分类图</h2><p><img src="/myimages/image-20201230195142206.png" alt="image-20201230195142206"></p><h2 id="2-比较"><a href="#2-比较" class="headerlink" title="2. 比较"></a>2. 比较</h2><table><thead><tr><th>名称</th><th>平均时间复杂度</th><th>最坏时间复杂度</th><th>稳定性</th><th>空间复杂度</th></tr></thead><tbody><tr><td>插入排序</td><td>O(n2)</td><td>O(n2)</td><td>稳定</td><td>O(1)</td></tr><tr><td>希尔排序</td><td>O(n1.3)</td><td>O(nlogn)—O(n2)</td><td>不稳定</td><td>O(1)</td></tr><tr><td>选择排序</td><td>O(n2)</td><td>O(n2)</td><td>不稳定</td><td>O(1)</td></tr><tr><td>堆排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>不稳定</td><td>O(1)</td></tr><tr><td>冒泡排序</td><td>O(n2)</td><td>O(n2)</td><td>稳定</td><td>O(1)</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(n2)</td><td>不稳定</td><td>O(logn)—O(n)</td></tr><tr><td>归并排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>稳定</td><td>O(n)</td></tr><tr><td>基数排序</td><td>O(d(n+r))</td><td>O(d(n+r))</td><td>稳定</td><td>O(n+r)</td></tr></tbody></table><h1 id="二、插入排序"><a href="#二、插入排序" class="headerlink" title="二、插入排序"></a>二、插入排序</h1><h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h2><p><strong>概念：</strong></p><p>插入 排序是一种简单直观且稳定的排序算法。</p><p><strong>原理：</strong></p><ol><li>把所有的元素分为两组，已排好序的和未排序的，开始时有序表只包含一个元素，无序表中包含n-1个元素。</li><li>排序过程中每次从未排序组中取出第一个元素，向已经排好序的组中插入。</li><li>倒序已经排序的元素，依次和待插入的元素进行比较，直到找到适当的位置。</li></ol><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[])</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> arr[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)&#123;<br>                <span class="hljs-keyword">if</span>(rt &lt; arr[j])&#123;<br>                    arr[j + <span class="hljs-number">1</span>] = arr[j];<br>                    arr[j] = rt;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="三、希尔排序"><a href="#三、希尔排序" class="headerlink" title="三、希尔排序"></a>三、希尔排序</h1><p>希尔排序也是一种插入排序，他是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序。</p><p>插入排序的平均时间复杂度也是 **O(n^2)**，空间复杂度为常数阶 **O(1)**，具体时间复杂度和数组的有序性也是有关联的。</p><h2 id="1-思路图解"><a href="#1-思路图解" class="headerlink" title="1. 思路图解"></a>1. 思路图解</h2><p><strong>基本思想：</strong> 希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序。随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法终止。</p><p><strong>解题过程</strong>：</p><p>（1）第一趟排序：初始增量 为：<strong>length/2 = 4</strong>，把8个数分成4组，每组单独排序</p><p><img src="/myimages/image-20210417160115290.png" alt="初始增量第一趟"></p><p>（2）第二趟，增量缩小为 2</p><p><img src="/myimages/image-20210417160907171.png" alt="image-20210417160907171"></p><p>（3）第三趟，增量缩小为 1,得到最终排序结果</p><p><img src="/myimages/image-20210417161033163.png" alt="image-20210417161033163"></p><h2 id="2-代码实现-1"><a href="#2-代码实现-1" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(Comparable[] arr)</span> &#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> arr.length / <span class="hljs-number">2</span>; gap &gt;  <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> gap; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-type">Comparable</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> arr[i];<br>            <span class="hljs-keyword">for</span> (j = i; j &gt;= gap &amp;&amp; tmp.compareTo(arr[j - gap]) &lt; <span class="hljs-number">0</span>; j -= gap) &#123;<br>                arr[j] = arr[j - gap];<br>            &#125;<br>            arr[j] = tmp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、选择排序"><a href="#四、选择排序" class="headerlink" title="四、选择排序"></a>四、选择排序</h1><h2 id="1-思路图解-1"><a href="#1-思路图解-1" class="headerlink" title="1. 思路图解"></a>1. 思路图解</h2><p><strong>基本思想：</strong>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处就是不占用额外的内存空间。</p><p><strong>算法步骤：</strong></p><p>（1）首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p><p>（2）再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><p>（3）重复第（2）步，直到所有元素均排序完毕。</p><h2 id="2-代码实现-2"><a href="#2-代码实现-2" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">selectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-type">int</span> min;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>        min = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;j&lt;arr.length;j++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[j] &lt; arr[min])&#123;<br>                min = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(min != i) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[min];<br>            arr[min] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、堆排序"><a href="#五、堆排序" class="headerlink" title="五、堆排序"></a>五、堆排序</h1><h2 id="1-思路图解-2"><a href="#1-思路图解-2" class="headerlink" title="1. 思路图解"></a>1. 思路图解</h2><p><strong>基本思想：</strong></p><p>堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><p>（1）大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</p><p>（2）小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</p><p><strong>算法步骤：</strong></p><p>（1）创建一个堆 H[0……n-1]；</p><p>（2）把堆首（最大值）和堆尾互换；</p><p>（3）把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</p><p>（4）重复步骤 2，直到堆的尺寸为 1。</p><h2 id="2-代码实现-3"><a href="#2-代码实现-3" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">heapSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> nums.length;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span>; i--) &#123;<br>           adjust(nums, size, i);<br>       &#125;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>           nums[<span class="hljs-number">0</span>] = nums[i];<br>           nums[i] = temp;<br>           adjust(nums, i, <span class="hljs-number">0</span>);<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjust</span><span class="hljs-params">(<span class="hljs-type">int</span> []nums, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> index)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * index + <span class="hljs-number">2</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">maxIndex</span> <span class="hljs-operator">=</span> index;<br>       <span class="hljs-keyword">if</span> (l&lt;len&amp;&amp;nums[l]&gt;nums[maxIndex])maxIndex = l;<br>       <span class="hljs-keyword">if</span> (r&lt;len&amp;&amp;nums[r]&gt;nums[maxIndex])maxIndex = r;<br>       <span class="hljs-keyword">if</span> (maxIndex != index) &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[maxIndex];<br>           nums[maxIndex] = nums[index];<br>           nums[index] = temp;<br>           adjust(nums, len, maxIndex);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="六、冒泡排序"><a href="#六、冒泡排序" class="headerlink" title="六、冒泡排序"></a>六、冒泡排序</h1><h2 id="1-思路图解-3"><a href="#1-思路图解-3" class="headerlink" title="1. 思路图解"></a>1. 思路图解</h2><p><strong>基本思想：</strong>两个数比较大小，较大的数下沉，较小的数冒起来。</p><p><strong>算法步骤：</strong></p><p>（1）比较相邻的两个数据，如果第二个数小，就交换位置。</p><p>（2）从后向前两两比较，一直到比较最前两个数据。最终最小数被交换到起始的位置，这样第一个最小数的位置就排好了。</p><p>（3）继续重复上述过程，依次将第2.3…n-1个最小数排好位置。</p><p><img src="/myimages/image-20210331084526757.png" alt="image-20210331084526757"></p><h2 id="2-代码实现-4"><a href="#2-代码实现-4" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-<span class="hljs-number">1</span>-i;j++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> arr[j];<br>                arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                arr[j+<span class="hljs-number">1</span>] = t;<br>                flag = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-literal">false</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>数据的顺序排好之后，冒泡算法仍然会继续进行下一轮的比较，直到arr.length-1次，后面的比较没有意义的。</p><p>因此设置标志位flag，如果发生了交换flag设置为true；如果没有交换就设置为false。</p><p>这样当一轮比较结束后如果flag仍为false，即：这一轮没有发生交换，说明数据的顺序已经排好，没有必要继续进行下去。</p><h1 id="七、快速排序"><a href="#七、快速排序" class="headerlink" title="七、快速排序"></a>七、快速排序</h1><h2 id="1-思路图解-4"><a href="#1-思路图解-4" class="headerlink" title="1. 思路图解"></a>1. 思路图解</h2><p><strong>基本思想：（分治）</strong></p><p>在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><p><strong>算法步骤：</strong></p><p>（1）先从数列中取出一个数作为key值；</p><p>（2）将比这个数小的数全部放在它的左边，大于或等于它的数全部放在它的右边；</p><p>（3）对左右两个小数列重复第二步，直至各区间只有1个数。</p><h2 id="2-代码实现-5"><a href="#2-代码实现-5" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//快排</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums,<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span>&#123;<br><br>        <span class="hljs-keyword">if</span>(low&lt;high) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">pivotpos</span> <span class="hljs-operator">=</span> partition(nums,low,high);<br>            QuickSort(nums,low,pivotpos-<span class="hljs-number">1</span>);<br>            QuickSort(nums,pivotpos+<span class="hljs-number">1</span>,high);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums,<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> nums[low];<br>        <span class="hljs-keyword">while</span>(low&lt;high) &#123;<br>            <span class="hljs-keyword">while</span>(low&lt;high &amp;&amp; nums[high]&gt;=pivot)--high;<br>            nums[low] = nums[high];<br>            <span class="hljs-keyword">while</span>(low&lt;high &amp;&amp; nums[low]&lt;=pivot) ++low;<br>            nums[high] = nums[low];<br>        &#125;<br>        nums[low] = pivot;<br>        <span class="hljs-keyword">return</span> low;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">63</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">77</span>&#125;;<br>        <span class="hljs-type">Solution</span> <span class="hljs-variable">solution</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br>        solution.QuickSort(a,<span class="hljs-number">0</span>,a.length-<span class="hljs-number">1</span>);<br>        System.out.println(Arrays.toString(a));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="八、归并排序"><a href="#八、归并排序" class="headerlink" title="八、归并排序"></a>八、归并排序</h1><h2 id="1-思路-1"><a href="#1-思路-1" class="headerlink" title="1. 思路"></a>1. 思路</h2><p><strong>基本思想：</strong>归并排序同样是采用分治法的一个非常典型的应用。作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p><p>（1）自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</p><p>（2）自下而上的迭代；</p><p><strong>算法步骤：</strong></p><p>（1）申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</p><p>（2）设定两个指针，最初位置分别为两个已经排序序列的起始位置；</p><p>（3）比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</p><p>（4）重复步骤 3 直到某一指针达到序列尾；</p><p>（5）将另一序列剩下的所有元素直接复制到合并序列尾。</p><h2 id="2-代码实现-6"><a href="#2-代码实现-6" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSortInOrder</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> bgn,<span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> end)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> bgn, m = mid +<span class="hljs-number">1</span>, e = end;<br>    <span class="hljs-type">int</span>[] arrs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[end - bgn + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(l &lt;= mid &amp;&amp; m &lt;= e)&#123;<br>        <span class="hljs-keyword">if</span>(arr[l] &lt; arr[m])&#123;<br>            arrs[k++] = arr[l++];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            arrs[k++] = arr[m++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(l &lt;= mid)&#123;<br>        arrs[k++] = arr[l++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m &lt;= e)&#123;<br>        arrs[k++] = arr[m++];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrs.length; i++)&#123;<br>        arr[i + bgn] = arrs[i];<br>    &#125;<br>&#125;<br> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> bgn, <span class="hljs-type">int</span> end)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(bgn &gt;= end)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (bgn + end) &gt;&gt; <span class="hljs-number">1</span>;<br>    mergeSort(arr,bgn,mid);<br>    mergeSort(arr,mid + <span class="hljs-number">1</span>, end);<br>    mergeSortInOrder(arr,bgn,mid,end);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="九、基数排序"><a href="#九、基数排序" class="headerlink" title="九、基数排序"></a>九、基数排序</h1><h2 id="1-思路-2"><a href="#1-思路-2" class="headerlink" title="1. 思路"></a>1. 思路</h2><p><strong>基本思想：</strong>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。</p><p><strong>算法步骤：</strong></p><p>（1）将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。<br>（2） 从最低位开始，依次进行一次排序。<br>（3） 这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p><h2 id="2-代码实现-7"><a href="#2-代码实现-7" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">countSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-type">int</span>[] bk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">19</span>];<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Integer.MIN_VALUE;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(max &lt; Math.abs(arr[i])) max = arr[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(max &lt; <span class="hljs-number">0</span>) max = -max;<br>        max = max.toString().length();<br>        <span class="hljs-type">int</span> [][] bd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">19</span>][arr.length];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; max; k++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(arr[i] / (Math.pow(<span class="hljs-number">10</span>,k)) % <span class="hljs-number">10</span>);<br>                bd[value+<span class="hljs-number">9</span>][bk[value+<span class="hljs-number">9</span>]++] = arr[i];<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">fl</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; <span class="hljs-number">19</span>; l++)&#123;<br>                <span class="hljs-keyword">if</span>(bk[l] != <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; s &lt; bk[l]; s++)&#123;<br>                        arr[fl++] = bd[l][s];<br>                    &#125;<br>                &#125;<br>            &#125;<br>            bk = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">19</span>];<br>            fl = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中实现a==1&amp;&amp;a==2&amp;&amp;a==3</title>
    <link href="/2021/07/06/Java%E4%B8%AD%E5%AE%9E%E7%8E%B0a==1&amp;&amp;a==2&amp;&amp;a==3/"/>
    <url>/2021/07/06/Java%E4%B8%AD%E5%AE%9E%E7%8E%B0a==1&amp;&amp;a==2&amp;&amp;a==3/</url>
    
    <content type="html"><![CDATA[<h1 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h1><ol><li><p>在Java 5中为了提高<code>Integer</code>的效率为其内部类<code>IntegerCache</code>中 添加了一个常量池<code>cache[]</code>，大小是一个字节范围是固定的 -128到127。</p></li><li><p>因此在创建<code>Integer</code>（-128到127）之间的对象时（例如<code>Integer a = 5</code>）,编译器就会调用<code>Integer.valueOf()</code>方法，直接返回常量池的对象。</p></li><li><p>所以只需要改变常量池<code>cache[]</code>中的数据即可完成<code>a==1&amp;&amp;a==2&amp;&amp;a==3</code></p></li></ol><ul><li>内部类 <code>IntegerCache</code>和<code>valueOf()</code>方法源码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IntegerCache</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> -<span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> high;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// high value may be configured by property</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">integerCacheHighPropValue</span> <span class="hljs-operator">=</span><br>            sun.misc.VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>        <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> parseInt(integerCacheHighPropValue);<br>                i = Math.max(i, <span class="hljs-number">127</span>);<br>                <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>            &#125;<br>        &#125;<br>        high = h;<br><br>        cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[(high - low) + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> low;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cache.length; k++)<br>            cache[k] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(j++);<br><br>        <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><br>        <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">IntegerCache</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Class&lt;?&gt;[] declaredClasses = Integer.class.getDeclaredClasses();<br>            Class&lt;?&gt; integerCache = declaredClasses[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> integerCache.getDeclaredField(<span class="hljs-string">&quot;cache&quot;</span>);<br>            f.setAccessible(<span class="hljs-literal">true</span>);<br>            Integer[] cache = (Integer[]) f.get(integerCache);<br><br>            System.out.println(cache[<span class="hljs-number">129</span>]);<br>            System.out.println(cache[<span class="hljs-number">130</span>]);<br>            System.out.println(cache[<span class="hljs-number">131</span>]);<br><br>            cache[<span class="hljs-number">130</span>] = cache[<span class="hljs-number">129</span>];<br>            cache[<span class="hljs-number">131</span>] = cache[<span class="hljs-number">129</span>];<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            System.out.println(<span class="hljs-string">&quot;---------------1-----------&quot;</span>);<br>            <span class="hljs-keyword">if</span>(a==(Integer)<span class="hljs-number">1</span> &amp;&amp; a==(Integer)<span class="hljs-number">2</span> &amp;&amp; a==(Integer)<span class="hljs-number">3</span>)&#123;<br>                System.out.println(<span class="hljs-literal">true</span>);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;---------------2-----------&quot;</span>);<br>            <span class="hljs-keyword">if</span>(a==Integer.valueOf(<span class="hljs-number">1</span>) &amp;&amp; a==Integer.valueOf(<span class="hljs-number">2</span>) &amp;&amp; a==Integer.valueOf(<span class="hljs-number">3</span>))&#123;<br>                System.out.println(<span class="hljs-literal">true</span>);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;---------------3-----------&quot;</span>);<br>            <span class="hljs-keyword">if</span>(a==<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>) &amp;&amp; a==<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">2</span>) &amp;&amp; a==<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">3</span>))&#123;<br>                System.out.println(<span class="hljs-literal">true</span>);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br>            System.out.println(cache[<span class="hljs-number">129</span>]);<br>            System.out.println(cache[<span class="hljs-number">130</span>]);<br>            System.out.println(cache[<span class="hljs-number">131</span>]);<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">1<br>2<br>3<br>---------------1-----------<br>true<br>---------------2-----------<br>true<br><span class="hljs-section">---------------3-----------</span><br><span class="hljs-section">---------------------------</span><br>1<br>1<br>1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>花里胡哨</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最长回文子串-dp</title>
    <link href="/2021/06/25/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2-dp/"/>
    <url>/2021/06/25/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2-dp/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><h2 id="示例-："><a href="#示例-：" class="headerlink" title="示例 ："></a>示例 ：</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;babad&quot;</span><br>输出：<span class="hljs-string">&quot;bab&quot;</span><br>解释：<span class="hljs-string">&quot;aba&quot;</span> 同样是符合题意的答案。<br></code></pre></td></tr></table></figure><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><ul><li>动态规划说白了就是空间换时间，保存上次求解的数据，用于此次求解。</li><li>二维数组dp用于存放当前已求得的解，<code>dp[i][j] = true</code>表示 字符串<code>s</code>从第<code>i</code>个到第<code>j</code>个是一个回文子串，并且数组<code>dp[i][j]=dp[j][i]</code>关于对角线对称，所以只需要用<code>i&lt;=j</code>的上半部分。</li><li>因此初始化时二维数组的对角线初始化为<code>true</code>，且如果有两个相邻相同的元素则把<code>dp[i][i+1]</code>也置为<code>true</code>。</li><li>最后填充数组<code>dp</code>，当第<code>i</code>个元素等于第<code>j</code>个元素，即<code>charArray[i] == charArray[j]</code>时，判断前一个元素是否相同即<code>dp[i+1][j-1]</code>是否为<code>true</code>，两个条件同时满足则把当前<code>dp[i][j]</code>置为<code>true</code>并记录当前回文子串的起始位置和长度。</li></ul><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> length = s.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> s;<br>        <span class="hljs-type">int</span> maxLen = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> begin = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span>[] charArray = s.<span class="hljs-built_in">toCharArray</span>();<br>        boolean[][] dp = <span class="hljs-keyword">new</span> boolean[length][length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            dp[i][i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> ( i&lt; length <span class="hljs-number">-1</span> &amp;&amp; charArray[i] == charArray[i+<span class="hljs-number">1</span>])&#123;<br>                dp[i][i+<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>                maxLen = <span class="hljs-number">2</span>;<br>                begin = i;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">2</span>; l &lt;= length; l++) &#123;<span class="hljs-comment">//子串长度</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;=length -l ; i++) &#123;<span class="hljs-comment">//子串起始地址</span><br>                <span class="hljs-type">int</span> j = l + i - <span class="hljs-number">1</span>;<span class="hljs-comment">//字串结束地址</span><br>                <span class="hljs-keyword">if</span>(dp[i+<span class="hljs-number">1</span>][j<span class="hljs-number">-1</span>] &amp;&amp; charArray[i] == charArray[j])&#123;<br>                    dp[i][j] = <span class="hljs-literal">true</span>;<br>                    maxLen = l;<br>                    begin = i;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substring</span>(begin, begin + maxLen);<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker中安装code-server</title>
    <link href="/2021/04/14/docker%E4%B8%8B%E5%AE%89%E8%A3%85code-server/"/>
    <url>/2021/04/14/docker%E4%B8%8B%E5%AE%89%E8%A3%85code-server/</url>
    
    <content type="html"><![CDATA[<h1 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h1><p>系统采用的时<code>centos8</code>，阿里云的服务器.</p><p>将下列代码保存为 <code>dockerinstall.sh</code> 并运行    <code>sh dockerinstall.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># remove old version</span><br>sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine<br><br><span class="hljs-comment"># remove all docker data </span><br>sudo <span class="hljs-built_in">rm</span> -rf /var/lib/docker<br><br><span class="hljs-comment">#  preinstall utils </span><br>sudo yum install -y yum-utils \<br>  device-mapper-persistent-data \<br>  lvm2<br><br><span class="hljs-comment"># add repository</span><br>sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br><br><span class="hljs-comment"># make cache</span><br>sudo yum makecache fast<br><br><span class="hljs-comment"># install the latest stable version of docker</span><br>sudo yum install -y docker-ce<br><br><span class="hljs-comment"># start deamon and enable auto start when power on</span><br>sudo systemctl start docker<br>sudo systemctl <span class="hljs-built_in">enable</span> docker<br><br><span class="hljs-comment"># add current user </span><br>sudo groupadd docker<br>sudo gpasswd -a <span class="hljs-variable">$&#123;USER&#125;</span> docker<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p>//TODO</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">nginx命令大全<br> 508 次浏览  发表于 2021-03-30 11<span class="hljs-function">:04</span> 版权<br>nginx -s reopen <span class="hljs-comment">#重启Nginx</span><br><br>nginx -s <span class="hljs-keyword">reload</span> <span class="hljs-comment">#重新加载Nginx配置文件，然后以优雅的方式重启Nginx</span><br><br>nginx -s stop <span class="hljs-comment">#强制停止Nginx服务</span><br><br>killall nginx <span class="hljs-comment">#杀死所有nginx进程  </span><br><br>nginx -s <span class="hljs-keyword">quit</span> <span class="hljs-comment">#优雅地停止Nginx服务（即处理完所有请求后再停止服务）</span><br><br>nginx -t <span class="hljs-comment">#检测配置文件是否有语法错误，然后退出</span><br><br>nginx -v <span class="hljs-comment">#显示版本信息并退出</span><br><br>nginx -V <span class="hljs-comment">#显示版本和配置选项信息，然后退出</span><br><br>nginx -t <span class="hljs-comment">#检测配置文件是否有语法错误，然后退出</span><br><br>nginx -T <span class="hljs-comment">#检测配置文件是否有语法错误，转储并退出</span><br><br>nginx -q <span class="hljs-comment">#在检测配置文件期间屏蔽非错误信息</span><br><br>nginx -?,-h <span class="hljs-comment">#打开帮助信息  </span><br><br>nginx -p prefix <span class="hljs-comment">#设置前缀路径(默认是:/usr/share/nginx/)</span><br><br>nginx -c filename <span class="hljs-comment">#设置配置文件(默认是:/etc/nginx/nginx.conf)</span><br><br>nginx -g directives <span class="hljs-comment">#设置配置文件外的全局指令</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python3 桥接手柄和串口实现通信</title>
    <link href="/2021/04/14/python%20%E6%A1%A5%E6%8E%A5%E6%89%8B%E6%9F%84%E5%92%8C%E4%B8%B2%E5%8F%A3%E5%AE%9E%E7%8E%B0%E9%80%9A%E4%BF%A1/"/>
    <url>/2021/04/14/python%20%E6%A1%A5%E6%8E%A5%E6%89%8B%E6%9F%84%E5%92%8C%E4%B8%B2%E5%8F%A3%E5%AE%9E%E7%8E%B0%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h1><p>需要使用游戏手柄来控制平衡小车，由于游戏手柄和平衡小车不能连接，所以使用电脑作为中介实现两者通信。</p><p>需要实现以下功能</p><ol><li>接收手柄或键盘的键值</li><li>处理接受的键值</li><li>通过串口发送指定信息给下位机</li><li>读取下位机发送的消息并显示</li></ol><span id="more"></span><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><p>Python扩展程序包的二进制文件下载网址为：</p><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p><code>pygame</code> 是一个可以读取手柄和键盘模块，我的python环境为3.7版本所以我下载的的是<code>pygame‑2.0.1‑cp37‑cp37m‑win_amd64.whl</code>。</p><p><code>pyserial</code>是一个串口通信模块，我下载的为<code>pyserial‑3.5‑py3‑none‑any.whl</code>。</p><p>下载完成后以==管理员==的身份打开命令提示符使用 pip 指令安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 跳转到文件下载的目录</span><br>C:\WINDOWS\system32&gt; <span class="hljs-built_in">cd</span> C:\Users\Administrator\Downloads<br><span class="hljs-comment"># 使用 pip 安装 文件</span><br>C:\Users\Administrator\Downloads&gt; pip install pygame‑<span class="hljs-number">2.0</span>.<span class="hljs-number">1</span>‑cp37‑cp37m‑win_amd64.whl<br></code></pre></td></tr></table></figure><p><code>pyserial</code>的啊安装也是一样的。</p><p>注意：如果是使用<code>pycharm</code> 编写的程序，会提示找不到模块，因为<code>pycharm</code> 运行环境的扩展库只扫描当前项目下的，因此我是使用VScode 编写。</p><h1 id="三、程序实现"><a href="#三、程序实现" class="headerlink" title="三、程序实现"></a>三、程序实现</h1><p> 定义通信规则：为了方便起见每次只发送一个字符，直行发送 ‘q’，加速发送 ‘s’，减速发送 ‘e’，左转发送 ‘l’，右转发送 ‘r’。</p><p>第一次调试可以打开<code>print(message)</code>查看系统获取的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> serial<br><span class="hljs-keyword">import</span> serial.tools.list_ports<br><br><span class="hljs-comment"># 串口通信端口号</span><br>portx = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># 串口通信 波特率</span><br>Baud = <span class="hljs-number">115200</span><br><br><span class="hljs-comment"># 程序状态</span><br>state = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 消息</span><br>message = <span class="hljs-built_in">dict</span>()<br><br><span class="hljs-comment"># 串口对象</span><br>ser = serial.Serial()<br><br><br><span class="hljs-comment"># 检查并选择端口</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_port</span>():<br>    <span class="hljs-keyword">global</span> portx<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在检查可用端口。。&quot;</span>)<br>    port_list = <span class="hljs-built_in">list</span>(serial.tools.list_ports.comports())<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(port_list) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无可用串口！&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;序号\t名称&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(port_list)):<br>            <span class="hljs-built_in">print</span>(i + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, port_list[i])<br><br>        n = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(port_list) != <span class="hljs-number">1</span>:<br>            n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入端口序号：&#x27;</span>))<br><br>        portx = <span class="hljs-built_in">str</span>(port_list[n - <span class="hljs-number">1</span>].device)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已选择端口:&#x27;</span>, portx)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open_port</span>():<br>    <span class="hljs-keyword">global</span> portx<br>    <span class="hljs-keyword">try</span>:<br>        ser.baudrate = Baud<br>        ser.port = portx<br>        ser.<span class="hljs-built_in">open</span>()  <span class="hljs-comment"># 打开串口</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        ser.close()  <span class="hljs-comment"># 关闭端口</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;端口打开失败,尝试更换端口：&#x27;</span>, e)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_joystick</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;连接成功！&#x27;</span>)<br>    <span class="hljs-keyword">global</span> state<br>    pygame.init()<br>    pygame.joystick.init()<br>    <span class="hljs-keyword">while</span> state:<br><br>        time.sleep(<span class="hljs-number">0.2</span>)<br>        message.clear()<br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                done = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.JOYBUTTONDOWN:<br>                message[<span class="hljs-string">&#x27;JOYBUTTONDOWN&#x27;</span>] = event.button<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.JOYBUTTONUP:<br>                message[<span class="hljs-string">&#x27;JOYBUTTONUP&#x27;</span>] = event.button<br><br>        joystick_count = pygame.joystick.get_count()<br>        <span class="hljs-keyword">for</span> nums <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(joystick_count):<br><br>            joystick = pygame.joystick.Joystick(nums)<br>            joystick.init()<br><br>            axes = joystick.get_numaxes()<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(axes):<br>                axis = joystick.get_axis(i)<br>                message[<span class="hljs-string">&#x27;axes&#x27;</span> + <span class="hljs-built_in">str</span>(i)] = <span class="hljs-built_in">int</span>(axis * <span class="hljs-number">10</span>)<br>        <span class="hljs-comment"># print(message)#打印获取的信息</span><br>        <span class="hljs-keyword">if</span> message == &#123;&#125;:  <span class="hljs-comment"># 未连接</span><br>            state = <span class="hljs-literal">False</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没有找到手柄&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">if</span> message.get(<span class="hljs-string">&#x27;JOYBUTTONDOWN&#x27;</span>) == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 直行</span><br>            ser.write(<span class="hljs-string">b&#x27;z&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;直行&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> message.get(<span class="hljs-string">&#x27;JOYBUTTONDOWN&#x27;</span>) == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 停车</span><br>            ser.write(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;停车&#x27;</span>)<br>        <span class="hljs-keyword">if</span> message.get(<span class="hljs-string">&#x27;axes5&#x27;</span>) &gt;= <span class="hljs-number">0</span>:  <span class="hljs-comment"># 加速</span><br>            ser.write(<span class="hljs-string">b&#x27;s&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加速&#x27;</span>)<br>        <span class="hljs-keyword">if</span> message.get(<span class="hljs-string">&#x27;axes2&#x27;</span>) &gt;= <span class="hljs-number">0</span>:  <span class="hljs-comment"># 减速</span><br>            ser.write(<span class="hljs-string">b&#x27;e&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;减速&#x27;</span>)<br>        <span class="hljs-keyword">if</span> message.get(<span class="hljs-string">&#x27;axes0&#x27;</span>) &lt;= -<span class="hljs-number">5</span>:  <span class="hljs-comment"># 左转</span><br>            ser.write(<span class="hljs-string">b&#x27;l&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;左转&#x27;</span>)<br>        <span class="hljs-keyword">if</span> message.get(<span class="hljs-string">&#x27;axes0&#x27;</span>) &gt;= <span class="hljs-number">5</span>:  <span class="hljs-comment"># 右转</span><br>            ser.write(<span class="hljs-string">b&#x27;r&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;右转&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> message.get(<span class="hljs-string">&#x27;JOYBUTTONDOWN&#x27;</span>) == <span class="hljs-number">7</span>:  <span class="hljs-comment"># 退出</span><br>            state = <span class="hljs-literal">False</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;退出&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> ser.in_waiting:<br>            <span class="hljs-built_in">print</span>(ser.read(ser.in_waiting).decode(<span class="hljs-string">&quot;gbk&quot;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> set_port() == <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> open_port() == <span class="hljs-number">1</span>:<br>        send_joystick()<br><br>    ser.close()  <span class="hljs-comment"># 关闭端口</span><br><br><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;按任意键退出！&quot;</span>)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python3基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud学习</title>
    <link href="/2021/03/01/SpringCloud%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/03/01/SpringCloud%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-什么是SpringCloud"><a href="#1-什么是SpringCloud" class="headerlink" title="1.什么是SpringCloud"></a>1.什么是SpringCloud</h1><p>Spring Cloud为开发人员提供了工具，以快速构建分布式系统中的一些常见模式（例如，配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁，领导选举，分布式会话，群集状态）。它们可以在任何分布式环境中正常工作，包括开发人员自己的笔记本电脑，裸机数据中心以及Cloud Foundry等托管平台。</p><span id="more"></span><h1 id="2-什么是微服务？"><a href="#2-什么是微服务？" class="headerlink" title="2.什么是微服务？"></a>2.什么是微服务？</h1><p>所谓的微服务是SOA架构下的最终产物，该架构的设计目标是为了肢解业务，使得服务能够独立运行。微服务设计原则：</p><p>1、各司其职 。</p><p>2、服务高可用和可扩展性。</p><h1 id="3-设计目标与优缺点"><a href="#3-设计目标与优缺点" class="headerlink" title="3.设计目标与优缺点"></a>3.设计目标与优缺点</h1><p>设计目标<br>协调各个微服务，简化分布式系统开发。</p><p>优缺点<br>微服务的框架那么多比如：dubbo、Kubernetes，为什么就要使用Spring Cloud的呢？</p><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ol><li><p>产出于Spring大家族，Spring在企业级开发框架中无人能敌，来头很大，可以保证后续的更新、完善</p></li><li><p>组件丰富，功能齐全。Spring Cloud 为微服务架构提供了非常完整的支持。例如、配置管理、服务发现、断路器、微服务网关等；</p></li><li><p>Spring Cloud 社区活跃度很高，教程很丰富，遇到问题很容易找到解决方案</p></li><li><p>服务拆分粒度更细，耦合度比较低，有利于资源重复利用，有利于提高开发效率</p></li><li><p>可以更精准的制定优化服务方案，提高系统的可维护性</p></li><li><p>减轻团队的成本，可以并行开发，不用关注其他人怎么开发，先关注自己的开发</p></li><li><p>微服务可以是跨平台的，可以用任何一种语言开发</p></li><li><p>适于互联网时代，产品迭代周期更短</p></li></ol><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><ol><li>微服务过多，治理成本高，不利于维护系统</li><li>分布式系统开发的成本高（容错，分布式事务等）对团队挑战大</li><li>总的来说优点大过于缺点，目前看来Spring Cloud是一套非常完善的分布式框架，目前很多企业开始用微服务、Spring Cloud的优势是显而易见的。因此对于想研究微服务架构的同学来说，学习Spring Cloud是一个不错的选择。</li></ol><h1 id="4-SpringBoot和SpringCloud的区别？"><a href="#4-SpringBoot和SpringCloud的区别？" class="headerlink" title="4.SpringBoot和SpringCloud的区别？"></a>4.SpringBoot和SpringCloud的区别？</h1><p>SpringBoot专注于快速方便的开发单个个体微服务。</p><p>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，</p><p>为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务</p><p>SpringBoot可以离开SpringCloud独立使用开发项目， 但是SpringCloud离不开SpringBoot ，属于依赖的关系</p><p>SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。</p><p>使用 Spring Boot 开发分布式微服务时，我们面临以下问题<br>（1）与分布式系统相关的复杂性-这种开销包括网络问题，延迟开销，带宽问题，安全问题。</p><p>（2）服务发现-服务发现工具管理群集中的流程和服务如何查找和互相交谈。它涉及一个服务目录，在该目录中注册服务，然后能够查找并连接到该目录中的服务。</p><p>（3）冗余-分布式系统中的冗余问题。</p><p>（4）负载平衡 –负载平衡改善跨多个计算资源的工作负荷，诸如计算机，计算机集群，网络链路，中央处理单元，或磁盘驱动器的分布。</p><p>（5）性能-问题 由于各种运营开销导致的性能问题。</p><p>（6）部署复杂性-Devops 技能的要求。</p><h1 id="5-服务注册和发现是什么意思？Spring-Cloud-如何实现？"><a href="#5-服务注册和发现是什么意思？Spring-Cloud-如何实现？" class="headerlink" title="5.服务注册和发现是什么意思？Spring Cloud 如何实现？"></a>5.服务注册和发现是什么意思？Spring Cloud 如何实现？</h1><p>当我们开始一个项目时，我们通常在属性文件中进行所有的配置。随着越来越多的服务开发和部署，添加和修改这些属性变得更加复杂。有些服务可能会下降，而某些位置可能会发生变化。手动更改属性可能会产生问题。 Eureka 服务注册和发现可以在这种情况下提供帮助。由于所有服务都在 Eureka 服务器上注册并通过调用 Eureka 服务器完成查找，因此无需处理服务地点的任何更改和处理。</p><h1 id="6-Spring-Cloud-和dubbo区别"><a href="#6-Spring-Cloud-和dubbo区别" class="headerlink" title="6.Spring Cloud 和dubbo区别?"></a>6.Spring Cloud 和dubbo区别?</h1><p>（1）服务调用方式 dubbo是RPC springcloud Rest Api</p><p>（2）注册中心,dubbo 是zookeeper springcloud是eureka，也可以是zookeeper</p><p>（3）服务网关,dubbo本身没有实现，只能通过其他第三方技术整合，springcloud有Zuul路由网关，作为路由服务器，进行消费者的请求分发,springcloud支持断路器，与git完美集成配置文件支持版本控制，事物总线实现配置文件的更新与服务自动装配等等一系列的微服务架构要素。</p><h1 id="7-负载平衡的意义什么？"><a href="#7-负载平衡的意义什么？" class="headerlink" title="7.负载平衡的意义什么？"></a>7.负载平衡的意义什么？</h1><p>在计算中，负载平衡可以改善跨计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器等多种计算资源的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间并避免任何单一资源的过载。使用多个组件进行负载平衡而不是单个组件可能会通过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务器进程。</p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发编程三大特性：可见性，有序性，原子性</title>
    <link href="/2021/02/20/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%EF%BC%9A%E5%8F%AF%E8%A7%81%E6%80%A7%EF%BC%8C%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%8C%E5%8E%9F%E5%AD%90%E6%80%A7/"/>
    <url>/2021/02/20/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%EF%BC%9A%E5%8F%AF%E8%A7%81%E6%80%A7%EF%BC%8C%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%8C%E5%8E%9F%E5%AD%90%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="一、线程的可见性"><a href="#一、线程的可见性" class="headerlink" title="一、线程的可见性"></a>一、线程的可见性</h1><ol><li>线程在执行时会把使用的变量从内存中读取到<strong>线程的本地缓存</strong>。</li><li>线程在使用这个变量时会直接在本地缓存中读取，并不会取内存中读。</li><li>也就是说此时内存中变量的值改变时，该线程是察觉不到的，也就是导致了线程的不可见性。</li></ol><h2 id="1-线程不可见案例"><a href="#1-线程不可见案例" class="headerlink" title="1. 线程不可见案例"></a>1. 线程不可见案例</h2><p>​        新建一个线程在变量<code>runing</code>等于<code>false</code>时结束，主线程等待100毫秒（防止新线程未启动）把变量置位 <code>false</code>。</p><p>但是新线程无论等多久都不会结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">runing</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;启动&quot;</span>);<br>            <span class="hljs-keyword">while</span> (runing)&#123;<br><br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;结束&quot;</span>);<br>        &#125;).start();<br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        runing = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-解决方案：通过-volatile-修饰变量"><a href="#2-解决方案：通过-volatile-修饰变量" class="headerlink" title="2. 解决方案：通过 volatile 修饰变量"></a>2. 解决方案：通过 volatile 修饰变量</h2><p>​        volatile 关键字的作用是当变量发生改变时，其他其他线程本地缓存该变量失效，需要重新从主存中读取。因此下面程序重4中新建的线程会立即结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">runing</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;启动&quot;</span>);<br>            <span class="hljs-keyword">while</span> (runing)&#123;<br><br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;结束&quot;</span>);<br>        &#125;).start();<br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        runing = <span class="hljs-literal">false</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、线程的有序性"><a href="#二、线程的有序性" class="headerlink" title="二、线程的有序性"></a>二、线程的有序性</h1><ol><li>处理器为了提高程序运行效率，可能会对输入代码进行优化，发生指令重排序现象。</li><li>不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是会保证程序最终执行结果和代码顺序执行的结果是一致的。</li><li>指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</li></ol><h2 id="1-指令重排案例"><a href="#1-指令重排案例" class="headerlink" title="1. 指令重排案例"></a>1. 指令重排案例</h2><p>​    一般情况下程序会经常发生指令重排，但较难发生语句重排，因为一条语句由多条指令组成，较难发生多条指令重排序的情况。</p><p>​        但是下面的案例可以证明确实存在语句重排现象：程序中只有当<code>x==0 &amp;&amp; y == 0</code>时才会退出循环，如果不发生指令重排序无论两个线程如何执行都不会发生满足上述条件情况。</p><p>​        满足上述条件的情况为线程1先启动且先执行<code>x=b</code>，此时x为0，a为0，然后切换到线程2执行<code>b=1;y=a</code>（此时与这两条语句执行顺序无关），此时y也为0。满足了上述条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">long</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>            i++;<br>            x = <span class="hljs-number">0</span>;y = <span class="hljs-number">0</span>;<br>            a = <span class="hljs-number">0</span>;b = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                a=<span class="hljs-number">1</span>;<br>                x=b;<br>            &#125;);<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                b=<span class="hljs-number">1</span>;<br>                y=a;<br>            &#125;);<br>            one.start();other.start();<br>            one.join();other.join();<br>            <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span> &amp;&amp; y == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;第 &quot;</span>+i+<span class="hljs-string">&quot; 次循环，x=&quot;</span>+x+<span class="hljs-string">&quot;;y=&quot;</span>+y);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出 第 949632 次循环，x=0;y=0</span><br></code></pre></td></tr></table></figure><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h2><p>​        通过volatile关键字修饰变量来保证对该变量操作时不会乱序。还可以通过synchronized和Lock来保证有序性，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p><h1 id="三、线程原子性"><a href="#三、线程原子性" class="headerlink" title="三、线程原子性"></a>三、线程原子性</h1><p>​        即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><h2 id="1-无法保证原子性案例"><a href="#1-无法保证原子性案例" class="headerlink" title="1.无法保证原子性案例"></a>1.无法保证原子性案例</h2><ol><li>建立两个线程分别同时对变量x进行五千次加1操作，理论结果是<code>x=10000</code>,一般最终得到的结果却是小于10000的数，即便使用volatile关键字修饰也无法保证原子性。</li><li>原因是一个线程在执行<code>x++</code>时，被另一个线程打断，两个线程基于同一个旧的x的数值进行了加一操作，因此最终得到的数值会偏小。</li><li>下图是在x=100时两个线程同时对其进行加一操作引发的原子性问题。</li></ol><p><img src="/myimages/202107112252.png" alt="线程原子性验证"></p><p>原子性问题案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>                x++;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">tow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        one.start();tow.start();<br>        one.join();tow.join();<br>        System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出  x=8334</span><br></code></pre></td></tr></table></figure><h2 id="2-解决方案-1"><a href="#2-解决方案-1" class="headerlink" title="2.解决方案"></a>2.解决方案</h2><p>​        通过synchronized关键字或者Lock锁对象锁住一块区域保证程序执行时的原子性，下面两组代码分别对其实现，最终变量x的值是固定的10000。</p><p>通过synchronized关键字方法解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>                <span class="hljs-keyword">synchronized</span> (Demo.class)&#123;<br>                    x++;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">tow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        one.start();tow.start();<br>        one.join();tow.join();<br>        System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过ReentrantLock可重入锁解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5000</span>; i++) &#123;<br>                lock.lock();<br>                    x++;<br>                lock.unlock();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">tow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);<br>        one.start();tow.start();<br>        one.join();tow.join();<br>        System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><ol><li><p>并发编程三大特性的重要性：并发程序想要正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p></li><li><p>在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p></li><li><p>通过volatile关键字可以保证线程间的的可见性和有序性，但不能保证原子性。原子性可以通过synchronized和Lock保证。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaJUC源码解析</title>
    <link href="/2020/12/21/JavaJUC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2020/12/21/JavaJUC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Java-JUC是什么"><a href="#一、Java-JUC是什么" class="headerlink" title="一、Java JUC是什么"></a>一、Java JUC是什么</h1><p><code>JUC</code>是 <code>Java JDK1.5 </code>版本后提供多种并发容器类工具包。  全名：<code>java.util.concurrent</code></p><h2 id="1-什么是线程-进程"><a href="#1-什么是线程-进程" class="headerlink" title="1. 什么是线程/进程"></a>1. 什么是线程/进程</h2><ol><li>进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</li><li>线程通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，</li><li>通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。</li></ol><span id="more"></span><h2 id="2-什么是并发-并行"><a href="#2-什么是并发-并行" class="headerlink" title="2. 什么是并发/并行"></a>2. 什么是并发/并行</h2><p>并发：是指多个工作交替进行，只有一条任务线</p><p>并行：是指多个工作同时进行，有多个任务线</p><h1 id="二、volatile-关键字"><a href="#二、volatile-关键字" class="headerlink" title="二、volatile 关键字"></a>二、volatile 关键字</h1><p>当多个线程共享数据时，可以保证内存中的数据可见。</p><p>相较于 synchronized 是一种轻量的同步策略</p><h1 id="三、并发举例"><a href="#三、并发举例" class="headerlink" title="三、并发举例"></a>三、并发举例</h1><h2 id="1-生产者-消费者举例"><a href="#1-生产者-消费者举例" class="headerlink" title="1. 生产者/消费者举例"></a>1. 生产者/消费者举例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 题目： 两个生产者两个消费者，缓存区大小为1</span><br><span class="hljs-comment"> * 1. 在高内聚低耦合的前提下：线程     操作     资源类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Ticket</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket</span>();<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++) ticket.increment();&#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> () -&gt; &#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++) ticket.decrease();&#125;;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r, <span class="hljs-string">&quot;生产者A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r, <span class="hljs-string">&quot;生产者B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r, <span class="hljs-string">&quot;生产者C&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r2, <span class="hljs-string">&quot;消费者A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r2, <span class="hljs-string">&quot;消费者B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r2, <span class="hljs-string">&quot;消费者C&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket</span>&#123;       <span class="hljs-comment">//资源类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加一操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(number!=<span class="hljs-number">0</span>) &#123;<br>                condition.await();<br>            &#125;<br>            number++;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t现存面包数目：&quot;</span>+number);<br>            condition.signalAll();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 减一操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrease</span><span class="hljs-params">()</span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(number==<span class="hljs-number">0</span>) &#123;<br>                condition.await();<br>            &#125;<br>            number--;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t现存面包数目：&quot;</span>+number);<br>            condition.signalAll();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-精确顺序执行"><a href="#2-精确顺序执行" class="headerlink" title="2. 精确顺序执行"></a>2. 精确顺序执行</h2><p><code>lock</code>配和<code>Condition</code>实现精准控制线程唤醒，避免把线程全部唤醒，造成资源浪费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 题目： 按顺序，线程A打印5次，线程B打印10次，线程C打印15次</span><br><span class="hljs-comment"> *      循环10次</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Ticket</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) ticket.printA5();&#125;,<span class="hljs-string">&quot;A&quot;</span>).start();;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) ticket.printB10();&#125;,<span class="hljs-string">&quot;B&quot;</span>).start();;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) ticket.printC15();&#125;,<span class="hljs-string">&quot;C&quot;</span>).start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket</span>&#123;       <span class="hljs-comment">//资源类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;     <span class="hljs-comment">//  1：A 2：B 3：C</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">conditionA</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">conditionB</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">conditionC</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printA5</span><span class="hljs-params">()</span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(number!=<span class="hljs-number">1</span>) &#123;<br>                conditionA.await();<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t&quot;</span> + i);<br>            &#125;<br>            number = <span class="hljs-number">2</span>;<br>            conditionB.signal();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printB10</span><span class="hljs-params">()</span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(number!=<span class="hljs-number">2</span>) &#123;<br>                conditionB.await();<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)&#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t&quot;</span> + i);<br>            &#125;<br>            number = <span class="hljs-number">3</span>;<br>            conditionC.signal();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printC15</span><span class="hljs-params">()</span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span>(number!=<span class="hljs-number">3</span>) &#123;<br>                conditionC.await();<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">15</span>;i++)&#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t&quot;</span> + i);<br>            &#125;<br>            number = <span class="hljs-number">1</span>;<br>            conditionA.signal();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、JUC常用类举例"><a href="#四、JUC常用类举例" class="headerlink" title="四、JUC常用类举例"></a>四、JUC常用类举例</h1><h2 id="1-CopyOnWriteArrayList"><a href="#1-CopyOnWriteArrayList" class="headerlink" title="1. CopyOnWriteArrayList"></a>1. CopyOnWriteArrayList</h2><p><code>CopyOnWriteArrayList</code>是一个线程安全队列，解决<code>ArrayList</code>线程不安全问题。</p><h3 id="1）应用举例"><a href="#1）应用举例" class="headerlink" title="1）应用举例"></a>1）应用举例</h3><p>普通<code>ArrayList</code>类不是线程安全的，因此在多线程情况下执行时会报：==<code>ConcurrentModificationException</code>并发修改异常==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                list.add(<span class="hljs-string">&quot;&quot;</span>+finalI);<br>                System.out.println(list);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>CopyOnWriteArrayList</code>类保证多线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                list.add(<span class="hljs-string">&quot;&quot;</span>+finalI);<br>                System.out.println(list);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2）原理："><a href="#2）原理：" class="headerlink" title="2）原理："></a>2）原理：</h3><p>写时复制：每次向队列中添加元素时，即调用<code>CopyOnWriteArrayList</code>类的add()方法时。会拷贝一个新的一样的数组，然后把要添加的元素放入新的数组中，最后将新的数组替换掉原来的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        Object[] elements = getArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> elements.length;<br>        Object[] newElements = Arrays.copyOf(elements, len + <span class="hljs-number">1</span>);<br>        newElements[len] = e;<br>        setArray(newElements);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-CopyOnWriteArraySet"><a href="#2-CopyOnWriteArraySet" class="headerlink" title="2. CopyOnWriteArraySet"></a>2. CopyOnWriteArraySet</h2><p><code>CopyOnWriteArraySet</code>线程安全的集合类，解决<code>HashSet</code>线程不安全问题。</p><h3 id="1）应用举例-1"><a href="#1）应用举例-1" class="headerlink" title="1）应用举例"></a>1）应用举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">30</span>;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                set.add(<span class="hljs-string">&quot;&quot;</span>+finalI);<br>                System.out.println(set);<br>            &#125;,String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2）HashSet与HashMap关系"><a href="#2）HashSet与HashMap关系" class="headerlink" title="2）HashSet与HashMap关系"></a>2）HashSet与HashMap关系</h3><p><code>HashSet</code>的底层就是<code>HashMap</code>，因为<code>HashSet</code>的构造方法就是创造一个<code>HashMap</code>对象。</p><p><code>HashSet</code>和<code>HashMap</code>都是线程不安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br>    map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>对于<code>HashSet</code>的add方法实质是：使用<code>HashMap</code>的put方法把需要添加的元素作为键，值是一个写死的常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    <span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-ConcurrentHashMap"><a href="#3-ConcurrentHashMap" class="headerlink" title="3. ConcurrentHashMap"></a>3. ConcurrentHashMap</h2><p><code>ConcurrentHashMap</code>是线程安全的映射类，解决<code>HashMap</code>线程不安全问题。</p><p>用法与线程安全类一致，使用<code>Map</code>引用。</p><h2 id="4-Callable"><a href="#4-Callable" class="headerlink" title="4. Callable"></a>4. Callable</h2><p>实现<code>Callable</code>接口是第三种获得多线程的方式，相对于前两种（实现<code>Runnable</code>接口和继承Thread类）这个第三种方式可以获取线程执行后的返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">FutureTask</span> <span class="hljs-variable">futrueTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>());<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futrueTask, <span class="hljs-string">&quot;A&quot;</span>).start();<br>        System.out.println(futrueTask.get());<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt;&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将要执行的命令写入Callable接口中的<code>call()</code>方法，也可以指定返回值类型。</p><p>然后将线程类实例打包到<code>FutureTask</code>类，传入<code>Thread</code>类中执行。</p><ul><li><code>FutureTask.get()</code>方法可以获取线程执行的返回值，如果线程未执行结束，将会等待线程结束。</li></ul><h1 id="五、JUC常用辅助类"><a href="#五、JUC常用辅助类" class="headerlink" title="五、JUC常用辅助类"></a>五、JUC常用辅助类</h1><h2 id="1-CountDownLatch"><a href="#1-CountDownLatch" class="headerlink" title="1.  CountDownLatch"></a>1.  CountDownLatch</h2><p>允许一个或多个线程等待直到在其他线程中执行完成的同步辅助类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//等待其他线程结束后，主线程再结束.</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numberThreads</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(numberThreads);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numberThreads;i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;结束。。。&quot;</span>);<br>                countDownLatch.countDown();<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        countDownLatch.await();<span class="hljs-comment">//等待其他线程结束</span><br>        System.out.println(<span class="hljs-string">&quot;主线程结束！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-CyclicBarrier"><a href="#2-CyclicBarrier" class="headerlink" title="2. CyclicBarrier"></a>2. CyclicBarrier</h2><p><code>CyclicBarrier</code>是允许一组线程全部等待彼此达到共同屏障点的辅助类。</p><p> 屏障被称为循环，因为它可以在等待的线程被释放之后重新使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numberThreads</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">cyclicBarrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(numberThreads,() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;全部就绪！！！！&quot;</span>);<br>        &#125;);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numberThreads;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t准备就绪！&quot;</span>);<br>                    cyclicBarrier.await();<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t结束！&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>CyclicBarrier</code>在定义时也可以不指定要执行的语句，如果指定则由最后进入的进程执行。</p><h2 id="3-Semaphore"><a href="#3-Semaphore" class="headerlink" title="3. Semaphore"></a>3. Semaphore</h2><p><code>Semaphore</code>类用于控制并发线程数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numberThreads</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(numberThreads);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numberThreads + <span class="hljs-number">10</span> ;i++)&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    semaphore.acquire();<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t抢到了执行权！！！&quot;</span>);<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t执行结束！！！&quot;</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<span class="hljs-keyword">finally</span> &#123;<br>                    semaphore.release();<br>                &#125;<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-ReadWriteLock"><a href="#4-ReadWriteLock" class="headerlink" title="4. ReadWriteLock"></a>4. ReadWriteLock</h2><p><code>ReadWriteLock</code>类维护一个Lock类，允许多个线程同时进行读操作，不允许多个线程同时读写和同时写操作。</p><p>可以保证进行写操作时数据的一致性.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">十个线程线程写操作，十个线程进行读操作，</span><br><span class="hljs-comment">多个线程读操作可以同时进行，写操作只能单独依次进行.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">MyMap</span> <span class="hljs-variable">myMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMap</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span> ;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                myMap.put(finalI + <span class="hljs-string">&quot;&quot;</span>, finalI + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span> ;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                myMap.get(finalI + <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;, String.valueOf(i)).start();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMap</span>&#123;<br>    <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>    <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">readWriteLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(String key, String value)</span>&#123;<br>        readWriteLock.writeLock().lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t ---写入数据&quot;</span> + key);<br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>            map.put(key, value);<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t ---写入结束&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            readWriteLock.writeLock().unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span>&#123;<br>        readWriteLock.readLock().lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t ---读取数据&quot;</span>);<br>            TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">300</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> map.get(key);<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;\t ---读取结束&quot;</span> + res);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            readWriteLock.readLock().unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六、线程池的使用"><a href="#六、线程池的使用" class="headerlink" title="六、线程池的使用"></a>六、线程池的使用</h1><h2 id="1-线程池类接口的继承实现关系图："><a href="#1-线程池类接口的继承实现关系图：" class="headerlink" title="1. 线程池类接口的继承实现关系图："></a>1. 线程池类接口的继承实现关系图：</h2><p><img src="/myimages/image-20201228215230382.png" alt="线程池类接口的继承实现关系图"></p><h2 id="2-Executors类常用方法"><a href="#2-Executors类常用方法" class="headerlink" title="2. Executors类常用方法"></a>2. Executors类常用方法</h2><p>创建线程池可以使用<code>java.util.concurrent.Executors</code>类的不同静态方法，返回不同的线程池。</p><ol><li><code>static ExecutorService newCachedThreadPool()</code> 函数返回一个根据需要创建新线程的线程池，在可用时重新使用以前的线程。 </li><li><code>static ExecutorService newFixedThreadPool(int nThreads)  </code>创建一个固定线程数量，无上限等待队列的线程池。</li><li><code>static ExecutorService newSingleThreadExecutor() </code>创建单个线程的线程池</li></ol><p>==【建议：线程池不允许使用Executors去创建】==</p><ul><li><code>FixedThreadPool</code>和<code>SingleThreadPool</code>允许的请求队列长度为<code>Integer.MAX_VALUE</code>，可能会堆积大量请求导致OOM</li><li><code>CachedThreadPool</code>和<code>ScheduledThreadPool</code>允许的创建线程数量为<code>Integer.MAX_VALUE</code>，可能会创建大量线程导致OOM</li><li>因此建议使用<code>ThreadPoolExecutor</code>类手动控制线程池的创建。</li></ul><h2 id="3-线程池源码解析"><a href="#3-线程池源码解析" class="headerlink" title="3.线程池源码解析"></a>3.线程池源码解析</h2><ul><li><p><code>ThreadPoolExecutor</code>类是常用的线程池实现类</p></li><li><p><code>Executors</code>类返回的线程池都是通过新建一个<code>ThreadPoolExecutor</code>返回</p></li></ul><p><code>ThreadPoolExecutor</code>构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                          ThreadFactory threadFactory,</span><br><span class="hljs-params">                          RejectedExecutionHandler handler)</span><br></code></pre></td></tr></table></figure><h3 id="1）参数说明"><a href="#1）参数说明" class="headerlink" title="1）参数说明"></a>1）参数说明</h3><ul><li><p><code>corePoolSize</code>：线程池种的线程数量，即使线程空闲也不会销毁。</p></li><li><p><code>maximumPoolSize</code>：线程池中最大的线程数，一旦超过这个数量，就会采取饱和策略</p></li><li><p><code>keepAliveTime</code>：时间，新增的线程空闲时间一旦超过这个量就会被销毁</p></li><li><p><code>unit</code>：前者的之间单位，例如秒（TimeUnit.SECONDS）</p></li><li><p><code>workQueue</code>：线程等待队列。</p></li><li><p><code>threadFactory</code>：可选参数，线程生产的工厂，可自定义产生新线程，一般使用默认值，默认值为Executors.defaultThreadFactory()</p></li><li><p><code>handler</code>：可选参数，饱和策略，当等待队列满且线程数达到最大值时需要执行的策略，默认AbortPolicy类抛出异常。</p></li></ul><h3 id="2）饱和策略"><a href="#2）饱和策略" class="headerlink" title="2）饱和策略"></a>2）饱和策略</h3><ol><li><code>AbortPolicy</code>默认饱和策略，直接抛出 java.util.concurrent.RejectedExecutionException 异常，并结束线程池，但是主线程还是会正常运行。</li><li><code>CallerRunsPolicy</code>调用者运行机制，该策略不会抛弃任务，会将任务退还给调用者执行。</li><li><code>DiscardOldestPolicy</code>抛弃队列中等待最久的任务，然后把当前任务加入队列中。</li><li><code>DiscardPolicy</code>默默抛弃无法处理的任务，不做任何处理也不抛出异常，如果允许任务丢失应选用这种策略。</li></ol><p>CallerRunsPolicy举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>                <span class="hljs-number">2</span>,<br>                <span class="hljs-number">4</span>,<br>                <span class="hljs-number">2</span>,<br>                TimeUnit.SECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="hljs-number">2</span>),<br>                Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>                threadPoolExecutor.execute(() -&gt; &#123;<br>                    System.out.println(Thread.currentThread().getName()+ <span class="hljs-string">&quot;\t执行！！！&quot;</span>);<br>                &#125;);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            threadPoolExecutor.shutdown();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3）选择最大线程数"><a href="#3）选择最大线程数" class="headerlink" title="3）选择最大线程数"></a>3）选择最大线程数</h3><ol><li><p>CPU密集型：</p><p>​    要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码</p><p>最大线程数应为CPU核心数加一，即<code>Runtime.getRuntime().availableProcessors() + 1</code></p></li><li><p>IO密集型：  </p><p>CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度。比如Web应用</p></li></ol><p>​    最大线程数应为CPU核心数乘2加一，即<code>Runtime.getRuntime().availableProcessors()*2 + 1</code></p><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>在<code>java.util.function</code>包中定义了常用的函数接口，用于快速实现接口。</p><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer 消费型接口</td><td>T</td><td>void</td><td>对类型为T的对象应用操作。方法为：void accept(T t)</td></tr><tr><td>Supplier 供给型接口</td><td>无</td><td>T</td><td>返回类型为T的对象。方法为：T get()</td></tr><tr><td>Function 函数型接口</td><td>T</td><td>R</td><td>对类型为T的对象应用操作，并返回结果。方法为：R apply(T t)</td></tr><tr><td>Predicate 断定型接口</td><td>T</td><td>boolean</td><td>确定类型为T的对象是否满足某约束，并返回boolean值。方法为：boolean test(T t)</td></tr></tbody></table><h2 id="1-函数型接口举例"><a href="#1-函数型接口举例" class="headerlink" title="1. 函数型接口举例"></a>1. 函数型接口举例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//函数型接口,要求有输入参数和返回值，输入参数类型为String，返回值类型为Integer</span><br>        Function&lt;String, Integer&gt; function = s -&gt; Integer.parseInt(s) * <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;Function 接口测试：&quot;</span> + function.apply(<span class="hljs-string">&quot;2654&quot;</span>));<br><span class="hljs-comment">//断定型接口，自定义输入参数类型，返回值参数类型始终为boolean</span><br>        Predicate&lt;String&gt; predicate = s -&gt; s==<span class="hljs-string">&quot;a&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;Predicate 接口测试：&quot;</span> + predicate.test(<span class="hljs-string">&quot;a&quot;</span>));<br><span class="hljs-comment">//消费型接口，只有输入参数，没有返回值</span><br>        Consumer&lt;String&gt; consumer = s -&gt; System.out.println(<span class="hljs-string">&quot;Consumer 接口测试：&quot;</span> + s);<br>        consumer.accept(<span class="hljs-string">&quot;123&quot;</span>);<br><span class="hljs-comment">//供给型接口，只有返回值，没有输入参数</span><br>        <span class="hljs-type">Supplier</span> <span class="hljs-variable">supplier</span> <span class="hljs-operator">=</span> () -&gt; <span class="hljs-string">&quot;Supplier 接口测试&quot;</span>;<br>        System.out.println(supplier.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Stream流式计算"><a href="#Stream流式计算" class="headerlink" title="Stream流式计算"></a>Stream流式计算</h1><h2 id="1-filter"><a href="#1-filter" class="headerlink" title="1. filter"></a>1. filter</h2><p>函数原型：<code>Stream&lt;T&gt; filter(Predicate&lt;T&gt; predicate)</code> </p><p>需要输入一个断定型接口，用于筛选数据，返回筛选后的流。</p><h2 id="2-forEach"><a href="#2-forEach" class="headerlink" title="2. forEach"></a>2. forEach</h2><p>函数原型：<code>void forEach(Consumer&lt;T&gt; action) </code></p><p>输入一个消费型接口，无返回值。</p><h2 id="3-map"><a href="#3-map" class="headerlink" title="3.map"></a>3.map</h2><p>函数原型：<code>Stream&lt;R&gt; map(Function&lt;T, R&gt; mapper)  </code></p><p>输入一个函数式接口，对流中的数据进行操作，返回指定类型的数据。</p><h2 id="4-collect"><a href="#4-collect" class="headerlink" title="4. collect"></a>4. collect</h2><p>函数原型：<code>R collect(Collector&lt;T,A,R&gt; collector)  </code></p><p>将数据流转成指定的数据类型，返回值为指定的数据类型。</p><h2 id="5-Stream流举例："><a href="#5-Stream流举例：" class="headerlink" title="5. Stream流举例："></a>5. Stream流举例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">20</span>;i++)<br>            list.add(i);<br>        list.stream().filter(t -&gt; t%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>).filter(t -&gt; t&lt;=<span class="hljs-number">10</span>).forEach(System.out::println);<br><br>        List&lt;String&gt; list2 = list.stream().map(x -&gt; <span class="hljs-string">&quot;x = &quot;</span> + x).collect(Collectors.toList());<br>        System.out.println(list2);<br><br>        List&lt;Integer&gt; list3 = list.stream().sorted((x, y) -&gt; y-x).collect(Collectors.toList());<br>        System.out.println(list3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h1><h2 id="1-ForkJoin继承关系图"><a href="#1-ForkJoin继承关系图" class="headerlink" title="1.ForkJoin继承关系图"></a>1.ForkJoin继承关系图</h2><p><img src="/myimages/image-20201230094708636.png" alt="ForkJoin继承关系图"></p><h2 id="2）应用"><a href="#2）应用" class="headerlink" title="2）应用"></a>2）应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyTask</span> <span class="hljs-variable">myTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(<span class="hljs-number">0</span>,<span class="hljs-number">100</span>);<br><br>        <span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinPool</span>();<br>        ForkJoinTask&lt;Integer&gt; forkJoinTask = pool.submit(myTask);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(forkJoinTask.get());<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            pool.shutdown();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;Integer&gt;&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">ADJUSY_VALUE</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> begin;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> end;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> res;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTask</span><span class="hljs-params">(<span class="hljs-type">int</span> begin, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-built_in">this</span>.begin = begin;<br>        <span class="hljs-built_in">this</span>.end = end;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> ((begin - end) &lt;= ADJUSY_VALUE)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=begin;i&lt;=end;i++)&#123;<br>                res = res + i;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (begin + end)/<span class="hljs-number">2</span>;<br>            <span class="hljs-type">MyTask</span> <span class="hljs-variable">myTask1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(begin, mid);<br>            <span class="hljs-type">MyTask</span> <span class="hljs-variable">myTask2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTask</span>(mid+<span class="hljs-number">1</span>, end);<br>            myTask1.fork();<br>            myTask1.fork();<br>            res = myTask1.join() + myTask2.join();<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot开发遇到的问题</title>
    <link href="/2020/12/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/12/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、-springboot之间版本对应问题"><a href="#一、-springboot之间版本对应问题" class="headerlink" title="一、 springboot之间版本对应问题"></a>一、 springboot之间版本对应问题</h1><span id="more"></span><ol><li>Spring Boot 不同版本间差距较大</li><li>版本号的第三位影响不大，但是版本号的第二位不同则大概率是不兼容的</li><li>因此Spring Boot 版本要慎重选择</li></ol><table><thead><tr><th>Spring Boot版本</th><th>Spring Cloud版本</th><th>Spring Cloud Alibaba版本</th></tr></thead><tbody><tr><td>2.2.6.RELEASE</td><td>Hoxton.SR9</td><td>2.2.3.RELEASE</td></tr></tbody></table><p>Spring Boot 与 Spring Cloud对应关系，详细信息网址：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p><p>Spring Cloud 当前可用版本，详细信息网址： <a href="https://spring.io/projects/spring-cloud#learn">https://spring.io/projects/spring-cloud#learn</a></p><p>Spring Cloud Alibaba版本 与Spring Cloud 对应关系： <a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">Spring Cloud Alibaba版本说明</a></p><h1 id="二、Win下nacos-server-2-0-0启动报错java-io-IOException-java-lang-IllegalArgumentException-db-num-is-null"><a href="#二、Win下nacos-server-2-0-0启动报错java-io-IOException-java-lang-IllegalArgumentException-db-num-is-null" class="headerlink" title="二、Win下nacos-server-2.0.0启动报错java.io.IOException java.lang.IllegalArgumentException db.num is null"></a>二、Win下nacos-server-2.0.0启动报错java.io.IOException java.lang.IllegalArgumentException db.num is null</h1><h2 id="1-报错现象"><a href="#1-报错现象" class="headerlink" title="1.报错现象"></a>1.报错现象</h2><p>Win环境下启动nacos提示下列信息：</p><!--more--><p><img src="/myimages/202012092042.png" alt="在这里插入图片描述"></p><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><p>原因是因为nacos默认集群启动，只需要将其修改为单机启动即可</p><p>将<code>startup.cmd</code>文件以为本方式打开，大约在27行修改<code>set MODE=&quot;cluster&quot;</code>为<code>set MODE=&quot;standalone&quot;</code>。</p><p>即修改为下列形式，其中<code>rem</code>为行注释</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-comment">rem set MODE=&quot;cluster&quot;</span><br><span class="hljs-built_in">set</span> <span class="hljs-built_in">MODE</span>=&quot;standalone&quot;<br></code></pre></td></tr></table></figure><h1 id="三、前后端分离项目跨域问题"><a href="#三、前后端分离项目跨域问题" class="headerlink" title="三、前后端分离项目跨域问题"></a>三、前后端分离项目跨域问题</h1><h2 id="1-报错信息："><a href="#1-报错信息：" class="headerlink" title="1. 报错信息："></a>1. 报错信息：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Access to XMLHttpRequest at &#x27;http://localhost:8081/****&#x27; from origin &#x27;http://localhost:3000&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.<br></code></pre></td></tr></table></figure><p>所请求的资源上没有“ Access-Control-Allow-Origin”标头。 </p><h2 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2. 问题分析"></a>2. 问题分析</h2><ol><li>当使用ajax访问远程服务器时，出于安全的考虑，默认禁止跨域访问导致的。</li><li>也就是使用 ajax 只能请求当前ip+端口号下面的接口，一旦ip和端口号不同时就会被拦截</li></ol><p>springboot下的注解<code>@CrossOrigin</code>是允许进行跨域请求的注释.</p><h2 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h2><p>对于springboot项目：</p><p>在<code>controller</code>包下文件的类名前添加<br><code>org.springframework.web.bind.annotation</code>下的<code>@CrossOrigin</code>注解</p><h1 id="四、Vue-运行报错，无法运行nuxt"><a href="#四、Vue-运行报错，无法运行nuxt" class="headerlink" title="四、Vue 运行报错，无法运行nuxt"></a>四、Vue 运行报错，无法运行nuxt</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm ERR! code ELIFECYCLE<br>npm ERR! errno 1<br>npm ERR! ylgh@1.0.0 dev: `nuxt`<br>npm ERR! Exit status 1<br>npm ERR!<br>npm ERR! Failed at the ylgh@1.0.0 dev script.<br>npm ERR! This is probably not a problem with npm. There is likely additional logging output above.<br><br>npm ERR! A complete log of this run can be found in:<br></code></pre></td></tr></table></figure><ol><li><p>重新下载node最新版，并在环境变量中替换当前node</p></li><li><p>删除<code>node_modules</code>和<code>package-lock.json</code>文件</p></li><li><p>重新打开cmd窗口到当前项目下，执行<code>node -v</code>查看版本是否是下载的最新版</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">如果是则执行</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载依赖</span><br>npm -install<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重新运行</span><br>npm run dev<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL锁机制</title>
    <link href="/2020/11/22/MySQL%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/11/22/MySQL%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、-表锁（偏读）"><a href="#一、-表锁（偏读）" class="headerlink" title="一、 表锁（偏读）"></a>一、 表锁（偏读）</h1><h2 id="1-简介："><a href="#1-简介：" class="headerlink" title="1.简介："></a>1.简介：</h2><ul><li>表锁偏向MYISAM存储引擎，开销小，加锁快，无死锁，锁粒度大，发生冲突概率最高，并发低<span id="more"></span></li></ul><h2 id="2-添加表锁"><a href="#2-添加表锁" class="headerlink" title="2. 添加表锁"></a>2. 添加表锁</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 添加读锁<br>lock <span class="hljs-keyword">table</span> table_name read;<br># 添加写锁<br>lock <span class="hljs-keyword">table</span> table_name write;<br></code></pre></td></tr></table></figure><h2 id="2-删除表锁"><a href="#2-删除表锁" class="headerlink" title="2. 删除表锁"></a>2. 删除表锁</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">unlock tables;<br></code></pre></td></tr></table></figure><h2 id="4-查看所有表的锁"><a href="#4-查看所有表的锁" class="headerlink" title="4. 查看所有表的锁"></a>4. 查看所有表的锁</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">open</span> tables;<br></code></pre></td></tr></table></figure><h2 id="5-表锁分析命令"><a href="#5-表锁分析命令" class="headerlink" title="5. 表锁分析命令"></a>5. 表锁分析命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;table%&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>Table_locks_immediate ： 表示可立即获得数据的次数</li><li>Table_locks_waited ： 表示发生锁争执的次数</li></ul><h2 id="6-读写锁的区别"><a href="#6-读写锁的区别" class="headerlink" title="6.读写锁的区别"></a>6.读写锁的区别</h2><p><code>读锁会阻塞写，但不会阻塞读。而写锁则会把读和写都堵塞</code></p><h1 id="二、-行锁（偏写）"><a href="#二、-行锁（偏写）" class="headerlink" title="二、 行锁（偏写）"></a>二、 行锁（偏写）</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><ul><li>行锁偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁，锁定力度小，发生冲突的概率低，并发度高</li></ul><h2 id="2-锁定一行"><a href="#2-锁定一行" class="headerlink" title="2. 锁定一行"></a>2. 锁定一行</h2><p>for update之后相应的行会被锁定，其他操作会被阻塞，知道锁定行的会话提交commit;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;...&#x27;</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><h2 id="3-行锁分析"><a href="#3-行锁分析" class="headerlink" title="3. 行锁分析"></a>3. 行锁分析</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> status <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_row_lock%&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>Innodb_row_lock_time          :  等待的总时长</li><li>Innodb_row_lock_time_avg    : 等待的平均时长</li><li>Innodb_row_lock_waits     :  等待的总次数</li></ul><h2 id="4-索引失效"><a href="#4-索引失效" class="headerlink" title="4. 索引失效"></a>4. 索引失效</h2><ul><li>索引失效时，会导致行锁升级为表锁</li></ul><h2 id="5-间隙锁"><a href="#5-间隙锁" class="headerlink" title="5. 间隙锁"></a>5. 间隙锁</h2><ul><li>当我们使用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁，对于键值在条件范围内但不存在的记录，叫做‘间隙’（GAP）</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL索引优化</title>
    <link href="/2020/11/21/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/"/>
    <url>/2020/11/21/MySQL%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="一、索引定义："><a href="#一、索引定义：" class="headerlink" title="一、索引定义："></a>一、索引定义：</h1><p><strong>索引是帮助数据库高效获取数据的数据结构</strong></p><p>也可以简单理解为：”排好序的快速查找数据结构”</p><span id="more"></span><p>如下就是一种可能的索引实例：</p><p><img src="/myimages/202011211309.png" alt="索引实例"></p><p>优势：</p><ul><li>提高数据检索的效率， 降低数据库的IO成本。</li><li>通过索引列对数据进行排序， 降低数据排序的成本， 降低了CPU的消耗。</li></ul><p>劣势：</p><ul><li>虽然索引大大提高了查询速度， 同时却会降低更新表的速度， 如对表进行INSERT、 UPDATE和DELETE。 因为<br>更新表时， MySQL不仅要保存数据， 还要保存一下索引文件每次更新添加了索引列的字段， 都会调整因为<br>更新所带来的键值变化后的索引信息。</li><li>实际上索引也是一张表， 该表保存了主键与索引字段， 并指向实体表的记录， 所以索引列也是要占用空间<br>的。</li></ul><h1 id="二-、创建和删除索引"><a href="#二-、创建和删除索引" class="headerlink" title="二 、创建和删除索引"></a>二 、创建和删除索引</h1><h2 id="1-创建索引"><a href="#1-创建索引" class="headerlink" title="1.创建索引"></a>1.创建索引</h2><p>方法一、</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> INDEX index_name (column1,column2,column3)<br></code></pre></td></tr></table></figure><p>方法二、</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> index index_name <span class="hljs-keyword">on</span> table_name(column1,column2,column3);<br></code></pre></td></tr></table></figure><p>单值索引： 即一个索引只包含单个列， 一个表可以有多个单列索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX index_name <span class="hljs-keyword">ON</span> table_name(column_name);<br></code></pre></td></tr></table></figure><p>唯一索引 ：索引列的值必须唯一， 但允许有空值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX index_name <span class="hljs-keyword">ON</span> table_name(column_name);<br></code></pre></td></tr></table></figure><p>主键索引 ：<br>设定为主键后数据库会自动建立索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">主键索引创建<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">add</span> <span class="hljs-keyword">PRIMARY</span> KEY table_name(column_name)<br>主键索引删除<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">drop</span> <span class="hljs-keyword">PRIMARY</span> KEY ;<br></code></pre></td></tr></table></figure><p>复合索引 ：即一个索引包含多个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX index_name <span class="hljs-keyword">ON</span> table_name(column1,column2);<br></code></pre></td></tr></table></figure><h2 id="2-删除索引"><a href="#2-删除索引" class="headerlink" title="2.删除索引"></a>2.删除索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> INDEX indexName <span class="hljs-keyword">ON</span> table_name<br></code></pre></td></tr></table></figure><h2 id="3-查看表的索引"><a href="#3-查看表的索引" class="headerlink" title="3.查看表的索引"></a>3.查看表的索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> table_name;<br></code></pre></td></tr></table></figure><h1 id="三-、索引的创建时机"><a href="#三-、索引的创建时机" class="headerlink" title="三 、索引的创建时机"></a>三 、索引的创建时机</h1><h2 id="需要创建索引的情况"><a href="#需要创建索引的情况" class="headerlink" title="需要创建索引的情况"></a>需要创建索引的情况</h2><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其他表关联的字段，外键关系建立索引</li><li>在高并发下倾向创建组合索引</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li></ol><h2 id="不需要创建索引的情况"><a href="#不需要创建索引的情况" class="headerlink" title="不需要创建索引的情况"></a>不需要创建索引的情况</h2><ol><li>数据量较少，一般数据量要大于100万MySQL性能才会有明显的下降</li><li>不常用的列,若建立索引会增大空间需求，实用性不高；</li><li>数据表操作（增、删、改）远大于查询时不建议创建索引。</li><li>不要为重复过多的数据列建立索引，例如性别列</li></ol><h1 id="四、查询优化"><a href="#四、查询优化" class="headerlink" title="四、查询优化"></a>四、查询优化</h1><h2 id="1-最佳左前缀法则"><a href="#1-最佳左前缀法则" class="headerlink" title="1. 最佳左前缀法则"></a>1. 最佳左前缀法则</h2><ul><li>最佳左前缀指的是查询从索引的最左前列开始并且不跳过索引中的列。</li><li>使用复合索引， 需要遵循最佳左前缀法则， 即如果索引了多列， 要遵守最左前缀法则。 </li><li>过滤条件要使用索引必须按照索引建立时的顺序， 依次满足， 一旦跳过某个字段， 索引后面的字段都无法被使用。</li></ul><h2 id="2-不要在索引列上做任何计算"><a href="#2-不要在索引列上做任何计算" class="headerlink" title="2. 不要在索引列上做任何计算"></a>2. 不要在索引列上做任何计算</h2><ul><li>不在索引列上做任何操作（计算、 函数、 (自动 or 手动)类型转换）， 会导致索引失效而转向全表扫描。</li></ul><h2 id="3-索引列上尽量减少范围查询"><a href="#3-索引列上尽量减少范围查询" class="headerlink" title="3. 索引列上尽量减少范围查询"></a>3. 索引列上尽量减少范围查询</h2><ul><li>将可能做范围查询的字段的索引顺序放在最后</li></ul><h2 id="4-尽量使用覆盖索引"><a href="#4-尽量使用覆盖索引" class="headerlink" title="4. 尽量使用覆盖索引"></a>4. 尽量使用覆盖索引</h2><ul><li>即查询列和索引列一致或少于索引列， 不要写 select *!</li></ul><h2 id="5-不要使用不等于-或者-lt-gt"><a href="#5-不要使用不等于-或者-lt-gt" class="headerlink" title="5. 不要使用不等于(!= 或者&lt;&gt;)"></a>5. 不要使用不等于(!= 或者&lt;&gt;)</h2><ul><li>mysql 在使用不等于(!= 或者&lt;&gt;)时， 有时会无法使用索引会导致全表扫描</li></ul><h2 id="6-使用-is-null-而非-is-not-null"><a href="#6-使用-is-null-而非-is-not-null" class="headerlink" title="6. 使用 is null  而非 is not null"></a>6. 使用 is null  而非 is not null</h2><ul><li>因为is not null 用不到索引， is null 可以用到索引。</li></ul><h2 id="8-like-的前后模糊匹配"><a href="#8-like-的前后模糊匹配" class="headerlink" title="8. like 的前后模糊匹配"></a>8. like 的前后模糊匹配</h2><ul><li>前缀不能出现模糊匹配！</li><li>like 条件匹配时’chen%’和’chen%j%’可以用到索引,like ‘%chen’和’%chen%’用不到索引</li><li>如果非要写’%chen%’要尽量使用覆盖索引，即查询列与索引列一致或少于索引列</li></ul><h2 id="9-减少使用-or"><a href="#9-减少使用-or" class="headerlink" title="9. 减少使用 or"></a>9. 减少使用 or</h2><ul><li>使用 union all 或者 union 来替代：</li></ul><h1 id="五、排序优化"><a href="#五、排序优化" class="headerlink" title="五、排序优化"></a>五、排序优化</h1><h2 id="1-尽量在索引列上完成排序"><a href="#1-尽量在索引列上完成排序" class="headerlink" title="1. 尽量在索引列上完成排序"></a>1. 尽量在索引列上完成排序</h2><h2 id="2-避免使用select-，只查询需要的列"><a href="#2-避免使用select-，只查询需要的列" class="headerlink" title="2. 避免使用select *，只查询需要的列"></a>2. 避免使用select *，只查询需要的列</h2><h2 id="3-最佳左前缀法则"><a href="#3-最佳左前缀法则" class="headerlink" title="3. 最佳左前缀法则"></a>3. 最佳左前缀法则</h2><ul><li>若最索引在where种变为常量，则可变为次前缀<h2 id="4-增大MySQL参数sort-buffer-size，增大排序缓冲区"><a href="#4-增大MySQL参数sort-buffer-size，增大排序缓冲区" class="headerlink" title="4. 增大MySQL参数sort_buffer_size，增大排序缓冲区"></a>4. 增大MySQL参数sort_buffer_size，增大排序缓冲区</h2></li></ul><h1 id="六、-分组优化"><a href="#六、-分组优化" class="headerlink" title="六、 分组优化"></a>六、 分组优化</h1><h2 id="1-group-by实质是先排序后分组，遵循最佳左前缀"><a href="#1-group-by实质是先排序后分组，遵循最佳左前缀" class="headerlink" title="1. group by实质是先排序后分组，遵循最佳左前缀"></a>1. group by实质是先排序后分组，遵循最佳左前缀</h2><h2 id="2-where高于having，能在where中限定的条件不要去having中限定"><a href="#2-where高于having，能在where中限定的条件不要去having中限定" class="headerlink" title="2. where高于having，能在where中限定的条件不要去having中限定"></a>2. where高于having，能在where中限定的条件不要去having中限定</h2>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鸡蛋掉落——动态规划</title>
    <link href="/2020/11/21/%E9%B8%A1%E8%9B%8B%E6%8E%89%E8%90%BD-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2020/11/21/%E9%B8%A1%E8%9B%8B%E6%8E%89%E8%90%BD-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。1 &lt;= K &lt;= 100</p><p>1 &lt;= N &lt;= 10000</p><p>每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</p><p>你知道存在楼层 F ，满足 0 &lt;= F &lt;= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。</p><p>每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 &lt;= X &lt;= N）。</p><p>你的目标是确切地知道 F 的值是多少。</p><p>无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？</p><span id="more"></span><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><p>输入：K = 1, N = 2</p><p>输出：2</p><p>解释：<br>鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。<br>否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。<br>如果它没碎，那么我们肯定知道 F = 2 。<br>因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。</p><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><p>输入：K = 2, N = 6</p><p>输出：3</p><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><p>输入：K = 3, N = 14</p><p>输出：4</p><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><p>题目中并没有说鸡蛋什么时候会碎，但是需要知道的是鸡蛋一定是恰好摔碎再最坏情况下的那层楼，即鸡蛋破碎一定发生在搜索区间穷尽时</p><h2 id="思路一、"><a href="#思路一、" class="headerlink" title="思路一、"></a>思路一、</h2><ol><li><p>首先考虑如果只有一个鸡蛋的情况下，我们就必须从1楼开始到N楼一层一层的尝试，也就是需要N次。</p></li><li><p>然后假设有K个鸡蛋，第一个鸡蛋开始从X层楼向下丢，就会分为碎和不碎两种情况：</p></li><li><p>第一种情况：鸡蛋没碎就会剩余K个蛋，N-X层楼，然后递归求解</p></li><li><p>第二种情况：鸡蛋碎了就会剩余K-1个蛋，X-1层楼，然后递归求解</p></li><li><p>最后求的两种解取最大值加一就等到了K个鸡蛋N层楼需要移动的次数</p></li><li><p>定义二维数组P存放K个鸡蛋N层楼所有情况的最优解，其中：<code> P(K,N)= 1+ min(max(dp(K−1,X−1),dp(K,N−X)))，1≤X≤N</code></p></li><li><p>此种解法时间复杂度O(KN^2)，空间复杂度为O(KN)，都非常高</p></li></ol><h2 id="思路二、"><a href="#思路二、" class="headerlink" title="思路二、"></a>思路二、</h2><ol><li><p>首先考虑如果只能移动一次的话，无论你有多少个鸡蛋，你最多只能确定1层楼</p></li><li><p>假设有K个鸡蛋，需要至少移动T次才能找N层楼的解，因此要找到P[K][T]&gt;=N时最小的T</p></li><li><p>同理用动态规划找满足条件的T，每次也要分为鸡蛋碎和不碎两种可能</p></li><li><p>第一种情况：鸡蛋没碎，那么对应的是 P[K,T−1]，也就是说在这一层的上方可以有 P[K,T-1]层；+</p></li><li><p>第二种情况：鸡蛋碎了，那么对应的是 P[K−1,T−1]，也就是说在这一层的下方可以有 P[T-1，K - 1]层。</p></li><li><p>定义二维数组P需要T次移动和有K个鸡蛋时能证明最大的层数为<code>p[K][T] = 1 + p[K - 1][T - 1] + p[K][T-1];</code></p></li><li><p>时间复杂度O(KN)，空间复杂度为O(KN)</p></li></ol><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><h2 id="思路一、-1"><a href="#思路一、-1" class="headerlink" title="思路一、"></a>思路一、</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-type">int</span> p[<span class="hljs-number">101</span>][<span class="hljs-number">10001</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> k,n;<br>    cin&gt;&gt;k&gt;&gt;n;<br><br>    <span class="hljs-built_in">backtrack</span>(k, n);<br>    cout&lt;&lt;p[k][n]&lt;&lt;endl;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    for(int i=1;i&lt;=k;i++)&#123;</span><br><span class="hljs-comment">        for(int j=1;j&lt;=n;j++)</span><br><span class="hljs-comment">            cout&lt;&lt;p[i][j]&lt;&lt;&#x27; &#x27;;</span><br><span class="hljs-comment">        cout&lt;&lt;endl;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    */</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>)&#123;<br>        p[k][n] = n;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p[k][n] == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">int</span> res = n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">1</span>; x &lt;= n; x++) &#123;<br>            res = <span class="hljs-built_in">min</span>(res, <span class="hljs-built_in">max</span>(<span class="hljs-built_in">backtrack</span>(k<span class="hljs-number">-1</span>, x<span class="hljs-number">-1</span>), <span class="hljs-built_in">backtrack</span>(k, n-x)) + <span class="hljs-number">1</span>);<br>        &#125;<br>        p[k][n] = res;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> p[k][n];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="思路二、-1"><a href="#思路二、-1" class="headerlink" title="思路二、"></a>思路二、</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> p[<span class="hljs-number">101</span>][<span class="hljs-number">10001</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> k,n;<br>    cin&gt;&gt;k&gt;&gt;n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; ++i) &#123;<br>        p[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> t=<span class="hljs-number">2</span>;t&lt;=n;t++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)&#123;<br>            p[j][t] = <span class="hljs-number">1</span> + p[j - <span class="hljs-number">1</span>][t - <span class="hljs-number">1</span>] + p[j][t<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (p[k][t] &gt;= n) &#123;<br>            res = t;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br><br>    cout&lt;&lt;res&lt;&lt;endl;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    for(int i=1;i&lt;=res;i++)&#123;</span><br><span class="hljs-comment">        for(int j=1;j&lt;=k;j++)</span><br><span class="hljs-comment">            cout&lt;&lt;p[j][i]&lt;&lt;&#x27; &#x27;;</span><br><span class="hljs-comment">        cout&lt;&lt;endl;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">*/</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL七种JOIN理论</title>
    <link href="/2020/11/19/MySQL%E4%B8%83%E7%A7%8DJOIN%E7%90%86%E8%AE%BA/"/>
    <url>/2020/11/19/MySQL%E4%B8%83%E7%A7%8DJOIN%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、读取JOIN语句过程"><a href="#一、读取JOIN语句过程" class="headerlink" title="一、读取JOIN语句过程"></a>一、读取JOIN语句过程</h1><p><img src="/myimages/202011191022.png" alt="JOIN图"></p><span id="more"></span><h1 id="二、JOIN查询方式图"><a href="#二、JOIN查询方式图" class="headerlink" title="二、JOIN查询方式图"></a>二、JOIN查询方式图</h1><p><img src="/myimages/202011190913.png" alt="JOIN图"></p><h1 id="三、JOIN查询语句示例"><a href="#三、JOIN查询语句示例" class="headerlink" title="三、JOIN查询语句示例"></a>三、JOIN查询语句示例</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sql"> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tbl_emp;<br> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tbl_emp`  (<br> `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>)  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`deptId` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> <span class="hljs-keyword">PRIMARY</span> KEY (`id`) ,<br>KEY `fk_dept_id`(`deptId`)<br>)ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8;<br> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tbl_dept;<br> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tbl_dept`  (<br> `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>`deptName` <span class="hljs-type">varchar</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `locAdd` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8;<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;RD&#x27;</span>,<span class="hljs-number">11</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;HR&#x27;</span>,<span class="hljs-number">12</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;MK&#x27;</span>,<span class="hljs-number">13</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;MIS&#x27;</span>,<span class="hljs-number">14</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;FD&#x27;</span>,<span class="hljs-number">15</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;BSR&#x27;</span>,<span class="hljs-number">250</span>);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_emp(NAME ,deptId) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;z3&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_emp(NAME,deptId) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;z4&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_emp(NAME ,deptId) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;z5&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_emp(NAME ,deptId) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;w5&#x27;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_emp(NAME,deptId) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;w6&#x27;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_emp(NAME,deptId) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;s7&#x27;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_emp(NAME,deptId) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;s8&#x27;</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_emp(NAME,deptId) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;s9&#x27;</span>,<span class="hljs-number">5</span> );<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> tbl_emp(NAME,deptId) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;wgk&#x27;</span>,<span class="hljs-number">999</span>);<br></code></pre></td></tr></table></figure><h2 id="1-示例一"><a href="#1-示例一" class="headerlink" title="1. 示例一"></a>1. 示例一</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tbl_emp a <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><p>查询返回两个表共有的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+----+----------+--------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> deptName <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+----+----------+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> z3   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> z4   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> z5   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> w5   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> HR       <span class="hljs-operator">|</span> <span class="hljs-number">12</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> w6   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> HR       <span class="hljs-operator">|</span> <span class="hljs-number">12</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> s7   <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> MK       <span class="hljs-operator">|</span> <span class="hljs-number">13</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span> s8   <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> MIS      <span class="hljs-operator">|</span> <span class="hljs-number">14</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span> s9   <span class="hljs-operator">|</span>      <span class="hljs-number">5</span> <span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> FD       <span class="hljs-operator">|</span> <span class="hljs-number">15</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+----+----------+--------+</span><br></code></pre></td></tr></table></figure><h2 id="2-示例二"><a href="#2-示例二" class="headerlink" title="2. 示例二"></a>2. 示例二</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tbl_emp a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><p>查询返回 tbl_emp 所有记录和两个表共有的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+------+----------+--------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> deptName <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+------+----------+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> z3   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> z4   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> z5   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> w5   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> HR       <span class="hljs-operator">|</span> <span class="hljs-number">12</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> w6   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> HR       <span class="hljs-operator">|</span> <span class="hljs-number">12</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> s7   <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> MK       <span class="hljs-operator">|</span> <span class="hljs-number">13</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span> s8   <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> MIS      <span class="hljs-operator">|</span> <span class="hljs-number">14</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span> s9   <span class="hljs-operator">|</span>      <span class="hljs-number">5</span> <span class="hljs-operator">|</span>    <span class="hljs-number">5</span> <span class="hljs-operator">|</span> FD       <span class="hljs-operator">|</span> <span class="hljs-number">15</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">9</span> <span class="hljs-operator">|</span> wgk  <span class="hljs-operator">|</span>    <span class="hljs-number">999</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+------+----------+--------+</span><br></code></pre></td></tr></table></figure><h2 id="3-示例三"><a href="#3-示例三" class="headerlink" title="3. 示例三"></a>3. 示例三</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tbl_emp a <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><p>查询返回 tbl_dept 所有记录和两个表共有的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+----+----------+--------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> deptName <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+----+----------+--------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> z3   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> z4   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> z5   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> w5   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> HR       <span class="hljs-operator">|</span> <span class="hljs-number">12</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">5</span> <span class="hljs-operator">|</span> w6   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> HR       <span class="hljs-operator">|</span> <span class="hljs-number">12</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">6</span> <span class="hljs-operator">|</span> s7   <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> MK       <span class="hljs-operator">|</span> <span class="hljs-number">13</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">7</span> <span class="hljs-operator">|</span> s8   <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> MIS      <span class="hljs-operator">|</span> <span class="hljs-number">14</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">8</span> <span class="hljs-operator">|</span> s9   <span class="hljs-operator">|</span>      <span class="hljs-number">5</span> <span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span> FD       <span class="hljs-operator">|</span> <span class="hljs-number">15</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> BSR      <span class="hljs-operator">|</span> <span class="hljs-number">250</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+----+----------+--------+</span><br></code></pre></td></tr></table></figure><h2 id="4-示例四"><a href="#4-示例四" class="headerlink" title="4. 示例四"></a>4. 示例四</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tbl_emp a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">where</span> b.id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p>查询返回 tbl_emp 独有的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+------+----------+--------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> deptName <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+------+----------+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">9</span> <span class="hljs-operator">|</span> wgk  <span class="hljs-operator">|</span>    <span class="hljs-number">999</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+------+--------+------+----------+--------+</span><br></code></pre></td></tr></table></figure><h2 id="5-示例五"><a href="#5-示例五" class="headerlink" title="5. 示例五"></a>5. 示例五</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tbl_emp a <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">where</span> a.deptId <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p>查询返回 tbl_dept 独有的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+----+----------+--------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> deptName <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+----+----------+--------+</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span> BSR      <span class="hljs-operator">|</span> <span class="hljs-number">250</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+----+----------+--------+</span><br></code></pre></td></tr></table></figure><h2 id="6-示例六"><a href="#6-示例六" class="headerlink" title="6. 示例六"></a>6. 示例六</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tbl_emp a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id <br><span class="hljs-keyword">union</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tbl_emp a <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id;<br></code></pre></td></tr></table></figure><p>查询返回 两个表全部 的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+------+----------+--------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> deptName <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+------+----------+--------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> z3   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> z4   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> z5   <span class="hljs-operator">|</span>      <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> RD       <span class="hljs-operator">|</span> <span class="hljs-number">11</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> w5   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> HR       <span class="hljs-operator">|</span> <span class="hljs-number">12</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">5</span> <span class="hljs-operator">|</span> w6   <span class="hljs-operator">|</span>      <span class="hljs-number">2</span> <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> HR       <span class="hljs-operator">|</span> <span class="hljs-number">12</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">6</span> <span class="hljs-operator">|</span> s7   <span class="hljs-operator">|</span>      <span class="hljs-number">3</span> <span class="hljs-operator">|</span>    <span class="hljs-number">3</span> <span class="hljs-operator">|</span> MK       <span class="hljs-operator">|</span> <span class="hljs-number">13</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">7</span> <span class="hljs-operator">|</span> s8   <span class="hljs-operator">|</span>      <span class="hljs-number">4</span> <span class="hljs-operator">|</span>    <span class="hljs-number">4</span> <span class="hljs-operator">|</span> MIS      <span class="hljs-operator">|</span> <span class="hljs-number">14</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">8</span> <span class="hljs-operator">|</span> s9   <span class="hljs-operator">|</span>      <span class="hljs-number">5</span> <span class="hljs-operator">|</span>    <span class="hljs-number">5</span> <span class="hljs-operator">|</span> FD       <span class="hljs-operator">|</span> <span class="hljs-number">15</span>     <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">9</span> <span class="hljs-operator">|</span> wgk  <span class="hljs-operator">|</span>    <span class="hljs-number">999</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>    <span class="hljs-number">6</span> <span class="hljs-operator">|</span> BSR      <span class="hljs-operator">|</span> <span class="hljs-number">250</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+------+----------+--------+</span><br></code></pre></td></tr></table></figure><h2 id="7-示例七"><a href="#7-示例七" class="headerlink" title="7. 示例七"></a>7. 示例七</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tbl_emp a <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">WHERE</span>  b.id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <br><span class="hljs-keyword">union</span> <br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tbl_emp a <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> tbl_dept b <span class="hljs-keyword">on</span> a.deptId <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">WHERE</span> a.deptId <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p>查询返回 两个表各自独有 的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+------+----------+--------+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> name <span class="hljs-operator">|</span> deptId <span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> deptName <span class="hljs-operator">|</span> locAdd <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+------+----------+--------+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">9</span> <span class="hljs-operator">|</span> wgk  <span class="hljs-operator">|</span>    <span class="hljs-number">999</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>   <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>    <span class="hljs-number">6</span> <span class="hljs-operator">|</span> BSR      <span class="hljs-operator">|</span> <span class="hljs-number">250</span>    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+--------+------+----------+--------+</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL的 EXPLAIN 使用</title>
    <link href="/2020/11/19/MySQL%E7%9A%84Explain%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/11/19/MySQL%E7%9A%84Explain%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="一、EXPLAIN简介"><a href="#一、EXPLAIN简介" class="headerlink" title="一、EXPLAIN简介"></a>一、EXPLAIN简介</h1><p>使用 EXPLAIN 关键字可以模拟优化器执行sql查询语句，从而知道MySQL是如何处理你的sql语句，分析查询语句或者表结构的性能瓶颈.</p><span id="more"></span><h1 id="二、EXPLAIN用法"><a href="#二、EXPLAIN用法" class="headerlink" title="二、EXPLAIN用法"></a>二、EXPLAIN用法</h1><p>EXPLAIN + SQL语句</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> tbl_emp;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> select_type <span class="hljs-operator">|</span> <span class="hljs-keyword">table</span>   <span class="hljs-operator">|</span> partitions <span class="hljs-operator">|</span> type <span class="hljs-operator">|</span> possible_keys <span class="hljs-operator">|</span> key  <span class="hljs-operator">|</span> key_len <span class="hljs-operator">|</span> <span class="hljs-keyword">ref</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">rows</span> <span class="hljs-operator">|</span> filtered <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> SIMPLE      <span class="hljs-operator">|</span> tbl_emp <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span> <span class="hljs-keyword">ALL</span>  <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>          <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>    <span class="hljs-number">9</span> <span class="hljs-operator">|</span>   <span class="hljs-number">100.00</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br></code></pre></td></tr></table></figure><p>其中五个比较重要的字段分别为：id、type、key、rows、Extra</p><h2 id="ID字段："><a href="#ID字段：" class="headerlink" title="ID字段："></a>ID字段：</h2><p>表示执行的顺序，ID字段分为两种情况：</p><ol><li>相同：按照顺序从上到下执行</li><li>不同：按照ID字段的大小，从大到小执行</li><li>既有相同也有不同：把id相同的认为是一组，从上往下顺序执行。 在所有组中首先执行ID数值大的。其中：DERIVED = 衍生</li></ol><p>注：<br><strong>id 号每个号码， 表示一趟独立的查询。 一个 sql 的查询趟数越少越好。</strong></p><h2 id="SELECT-TYPE字段："><a href="#SELECT-TYPE字段：" class="headerlink" title="SELECT_TYPE字段："></a>SELECT_TYPE字段：</h2><p>表示查询类型，主要分为6种：</p><ol><li><code>SIMPLE</code>  普通查询：简单的select查询，查询中不包含子查询或者union</li><li><code>PRIMARY</code>  联合查询：查询中若包含任何复杂的子部分，最外层查询则被标记为联合查询</li><li><code>SUBQUERY</code> 子查询：在 select 或 where 列表中包含的子查询</li><li><code>DERIVED</code> 嵌套查询：在from列表种包含的子查询被标记为DERIVED（衍生），MySQL会递归执行这些子查询，把结果放到临时表中</li><li><code>UNION</code>   连接查询：若查询语句中第二个 select 出现在 UNION 标识符之后，则被标记为 UNION ，若 UNION 包含在from子句中，则外层 select 将被标记为：DERIVED</li><li><code>UNION RESULT</code> 从 UNION 表中获取结果的 select</li></ol><h2 id="TABLE字段："><a href="#TABLE字段：" class="headerlink" title="TABLE字段："></a>TABLE字段：</h2><p>表示与哪一张表相关</p><h2 id="TYPE字段："><a href="#TYPE字段：" class="headerlink" title="TYPE字段："></a>TYPE字段：</h2><p>显示访问类型，是一个较为重要的指标，结果值从好到坏依次为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">system</span> &gt; const &gt; eq_ref &gt; <span class="hljs-keyword">ref</span> &gt; range &gt; <span class="hljs-keyword">index</span> &gt; <span class="hljs-keyword">ALL</span> <br></code></pre></td></tr></table></figure><p>一般情况下查询至少达到 <code>range</code> 级别，最好能达到 <code>ref</code> </p><ol><li>system ：表只有一行记录，平时不会出现，可以忽略</li><li>const ：表示通过一次索引就能找到</li><li>eq_ref ： 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配</li><li>ref ： 非唯一性索引扫描，返回匹配某个单独值的所有行，属于查找和扫描的混合体</li><li>range ： 只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引</li><li>index ： 与ALL区别是只遍历索引树</li><li>ALL ： 全表扫描</li></ol><h2 id="POSSIBLE-KEYS和KEY字段："><a href="#POSSIBLE-KEYS和KEY字段：" class="headerlink" title="POSSIBLE_KEYS和KEY字段："></a>POSSIBLE_KEYS和KEY字段：</h2><p>possible_keys</p><ul><li>显示可能应用在这张表种的索引，一个或多个。</li><li>查询涉及到的字段上若存在索引，则索引将被列出，<code>但不一定被查询实际使用</code></li></ul><p>key</p><ul><li>实际使用的索引，如果为null则证明没有使用索引</li><li>查询中若使用了覆盖索引，则该索引仅出现在key列表中</li><li>查询使用的索引时以<code>key</code>列为准</li></ul><h2 id="key-len-字段："><a href="#key-len-字段：" class="headerlink" title="key_len 字段："></a>key_len 字段：</h2><ul><li>表示索引种使用的字节数，可通过该列计算查询中使用的索引长度。在不损失精度的情况下，长度越短越好</li><li>key_len 显示的值为索引字段的最大可能长度，<code>并非实际使用长度</code>，即key_len是根据表定义计算而得，不是通过表内检索出的</li></ul><h2 id="ref字段："><a href="#ref字段：" class="headerlink" title="ref字段："></a>ref字段：</h2><p>显示索引的哪一列被使用了，可能是一个常数，哪些列或者常量被用于查找索引列的值</p><h2 id="rows字段："><a href="#rows字段：" class="headerlink" title="rows字段："></a>rows字段：</h2><p>显示表有多少行被优化器查询，是一个衡量索引优化的重要指标，值越小越好</p><h2 id="Extra-字段："><a href="#Extra-字段：" class="headerlink" title="Extra 字段："></a>Extra 字段：</h2><p>包含不适合在其他列种显示但十分重要的额外信息，其可能的信息</p><ol><li><p><code>Using filesort</code> ： MySQL无法利用索引完成排序操作，需要自己重新从对数据进行排序</p></li><li><p><code>Using temporary</code> ： MySQL无法利用索引完成分组，需要创建临时表来完成分组</p></li><li><p><code>Using index</code> ： 查询的列被所建的索引覆盖，只需要从索引中获取数据，不必读数据行，查询到的数据叫覆盖索引，效率较高</p></li><li><p>Using where ：表明使用了where过滤</p></li><li><p>Using join buff ：表明 join 次数过多，应调大缓冲区的join buff</p></li><li><p>impossible where：表明where子句的值总是false</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux(centos7)安装MySQL5.7</title>
    <link href="/2020/11/17/linux(centos7)%E5%AE%89%E8%A3%85MySQL5.7/"/>
    <url>/2020/11/17/linux(centos7)%E5%AE%89%E8%A3%85MySQL5.7/</url>
    
    <content type="html"><![CDATA[<h1 id="一、下载MySQL"><a href="#一、下载MySQL" class="headerlink" title="一、下载MySQL"></a>一、下载MySQL</h1><p>首先进入opt文件夹下，下载mysql-5.7.27的安装包，下载过程可能比较慢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs linux">[root@localhost /]# cd /opt<br>[root@localhost opt]# wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz<br></code></pre></td></tr></table></figure><p>其他版本可去官网下载：<br><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><span id="more"></span><h1 id="二、解压-MySQL-并配置"><a href="#二、解压-MySQL-并配置" class="headerlink" title="二、解压 MySQL 并配置"></a>二、解压 MySQL 并配置</h1><h2 id="1-解压MySQL"><a href="#1-解压MySQL" class="headerlink" title="1.解压MySQL"></a>1.解压MySQL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost opt]# tar -zvxf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz<br></code></pre></td></tr></table></figure><h2 id="2-移动解压好的文件夹"><a href="#2-移动解压好的文件夹" class="headerlink" title="2.移动解压好的文件夹"></a>2.移动解压好的文件夹</h2><p>保证 目录 /usr/local 下无mysql重名的文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost opt]# mv mysql-5.7.24-linux-glibc2.12-x86_64 /usr/local/mysql<br>[root@localhost opt]# cd /usr/local/mysql<br></code></pre></td></tr></table></figure><h2 id="3-在-usr-local-mysql目录下创建data目录"><a href="#3-在-usr-local-mysql目录下创建data目录" class="headerlink" title="3.在/usr/local/mysql目录下创建data目录"></a>3.在/usr/local/mysql目录下创建data目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost mysql]# mkdir data<br></code></pre></td></tr></table></figure><h2 id="4-修改MySQL配置文件"><a href="#4-修改MySQL配置文件" class="headerlink" title="4.修改MySQL配置文件"></a>4.修改MySQL配置文件</h2><p>打开 <code>/etc/my.cnf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost mysql]# vi /etc/my.cnf<br></code></pre></td></tr></table></figure><p>将其内容改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[mysqld]<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br><br>basedir = /usr/local/mysql<br>datadir = /usr/local/mysql/data<br>port = 3306<br>socket = /var/lib/mysql/mysql.sock<br>character-set-server=utf8<br><br>log-error = /usr/local/mysql/data/mysqld.log<br>pid-file = /usr/local/mysql/data/mysqld.pid<br></code></pre></td></tr></table></figure><h2 id="5-创建mysql用户组"><a href="#5-创建mysql用户组" class="headerlink" title="5.创建mysql用户组"></a>5.创建mysql用户组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost mysql]# chown -R mysql:mysql /usr/local/mysql<br>[root@localhost mysql]# chmod -R 755 /usr/local/mysql<br><br></code></pre></td></tr></table></figure><h2 id="6-安装并初始化mysql"><a href="#6-安装并初始化mysql" class="headerlink" title="6.安装并初始化mysql"></a>6.安装并初始化mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost mysql]# bin/mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql<br></code></pre></td></tr></table></figure><p>查看初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost mysql]# cat /usr/local/mysql/data/mysqld.log<br></code></pre></td></tr></table></figure><p>执行后会输出日志，日志最后一行尾部就是初始密码<br><img src="/myimages/202011181628.png" alt="MySQL日志"></p><h2 id="7-添加软连接"><a href="#7-添加软连接" class="headerlink" title="7.添加软连接"></a>7.添加软连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost mysql]#  ln -s /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql <br>[root@localhost mysql]#  ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql<br></code></pre></td></tr></table></figure><h2 id="8-启动MySQL"><a href="#8-启动MySQL" class="headerlink" title="8.启动MySQL"></a>8.启动MySQL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost mysql]#  service mysql start<br></code></pre></td></tr></table></figure><p>查看MySQL进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost mysql]# ps -ef | grep mysql<br></code></pre></td></tr></table></figure><h2 id="9、登录mysql，修改密码"><a href="#9、登录mysql，修改密码" class="headerlink" title="9、登录mysql，修改密码"></a>9、登录mysql，修改密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost mysql]#  mysql -u root -p<br><span class="hljs-meta prompt_"># </span><span class="language-bash">密码为 MySQL日志 中的初始密码</span><br></code></pre></td></tr></table></figure><p>将密码改为 123456，也可以改为别的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; set password for root@localhost = password(&#x27;123456&#x27;);<br></code></pre></td></tr></table></figure><h2 id="10、远程连接"><a href="#10、远程连接" class="headerlink" title="10、远程连接"></a>10、远程连接</h2><p>user.Host=’%’表示任何主机，User=’root’表示使用 root 用户访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt;</span><span class="language-bash">use mysql;</span><br><span class="hljs-meta prompt_">msyql&gt;</span><span class="language-bash">update user <span class="hljs-built_in">set</span> user.Host=<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-built_in">where</span> user.User=<span class="hljs-string">&#x27;root&#x27;</span>;</span><br><span class="hljs-meta prompt_">mysql&gt;</span><span class="language-bash">flush privileges;</span><br></code></pre></td></tr></table></figure><p>重启mysql生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost /]# service mysql restart<br></code></pre></td></tr></table></figure><p>打开防火墙3306端口，查看端口是否开放</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# firewall-cmd --list-ports<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果没有 3306/tcp 则证明3306端口没有开放</span><br></code></pre></td></tr></table></figure><p>打开3306端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# firewall-cmd --zone=public --add-port=3306/tcp --permanent<br><span class="hljs-meta prompt_"># </span><span class="language-bash">success</span><br></code></pre></td></tr></table></figure><p>重启防火墙生效设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# firewall-cmd --reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">success</span><br></code></pre></td></tr></table></figure><p>下载 mysql workbench 可视化工具，就可以远程连接到服务器的MySQL进行配置</p><p>下载地址：<a href="https://dev.mysql.com/downloads/workbench/">https://dev.mysql.com/downloads/workbench/</a></p><h2 id="11、开机启动"><a href="#11、开机启动" class="headerlink" title="11、开机启动"></a>11、开机启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost init.d]#  cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld<br>[root@localhost init.d]# chkconfig --add mysqld<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7初始化环境搭建</title>
    <link href="/2020/11/16/CentOS7%E5%88%9D%E5%A7%8B%E5%8C%96%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/11/16/CentOS7%E5%88%9D%E5%A7%8B%E5%8C%96%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="一、更新yum源"><a href="#一、更新yum源" class="headerlink" title="一、更新yum源"></a>一、更新yum源</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">#安装wget<br>[root@localhost ~]# yum -y install wget<br><br>#备份CentOS-Base.repo，更新失败时切换回去<br>[root@localhost ~]# mv <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo /</span>etc<span class="hljs-regexp">/yum.repos.d/</span>CentOS-Base.repo.backup<br> <br>#下载新的CentOS-Base.repo到<span class="hljs-regexp">/etc/yum</span>.repos.d/<br>[root@localhost ~]# wget -O <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/CentOS-Base.repo http:/</span><span class="hljs-regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="hljs-number">7</span>.repo<br> <br>#生成缓存<br>[root@localhost ~]# yum makecache<br></code></pre></td></tr></table></figure><h1 id="二、设置静态IP"><a href="#二、设置静态IP" class="headerlink" title="二、设置静态IP"></a>二、设置静态IP</h1><h2 id="1-查看本地IP"><a href="#1-查看本地IP" class="headerlink" title="1. 查看本地IP"></a>1. 查看本地IP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ip a<br></code></pre></td></tr></table></figure><p><img src="/myimages/202011172152.png" alt="网卡信息"></p><ul><li><p>ens33 表示第一个网卡名，以及该网卡的信息</p></li><li><p>lo 表示主机的回坏地址，般是用来测试一个网络程序</p><span id="more"></span></li></ul><p>打开ens33 的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><p>其中尾部的 <code>ifcfg-ens33</code> 取决与上述网卡名称</p><h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h2><p>其中：网段的静态IP 和网关需要在 虚拟网络编辑器中配置 并关闭 DHCP 服务</p><p>​        <code>DNS</code> 要与主机或外部网络对应 默认的 <code>DNS1=192.168.1.1</code></p><p>主要配置属性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ONBOOT=yes# 起用网络服务<br>IPADDR#网段的静态IP<br>NETMASK #网段的子网掩码<br>GATEWAY#网关<br>DNS1#DNS1服务器地址<br></code></pre></td></tr></table></figure><p>全部配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">TYPE=Ethernet<br>PROXY_METHOD=none<br>BROWSER_ONLY=no<br>BOOTPROTO=static    #设置为静态IP<br>NETMASK=255.255.255.0   #网段的子网掩码<br>IPADDR=10.32.77.35  #网段的静态IP<br>GATEWAY=10.32.77.1  #网关<br>DNS1=202.194.104.35 #DNS1服务器<br>DEFROUTE=yes<br>IPV4_FAILURE_FATAL=no<br>IPV6_INIT=yes<br>IPV6_AUTOCONF=yes<br>IPV6_DEFROUTE=yes<br>IPV6_FAILURE_FATAL=no<br>IPV6_ADDR_GEN_MODE=stable-privacy<br>NAME=ens33<br>UUID=ae3bba41-51d9-4efd-909e-9f726590df7f<br>DEVICE=ens33<br>ONBOOT=yes  # 是否开机起用，永久生效<br></code></pre></td></tr></table></figure><h2 id="3-重启网络服务"><a href="#3-重启网络服务" class="headerlink" title="3.重启网络服务"></a>3.重启网络服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# service network restart<br></code></pre></td></tr></table></figure><p>再次输入ifconfig查看ens33下的inet，即可看到配置好的静态ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ifconfig<br></code></pre></td></tr></table></figure><h1 id="三、关闭系统防火墙"><a href="#三、关闭系统防火墙" class="headerlink" title="三、关闭系统防火墙"></a>三、关闭系统防火墙</h1><p>如果是买的服务器，因为有外部的防火墙，</p><p>如果是本地的服务器，因为在内网中也用不到防火墙，因此我一般都会关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看防火墙状态，其属性为 Active: inactive (dead)  即为关闭状态</span><br>[root@localhost ~]# systemctl status firewalld.service<br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙</span><br>[root@localhost ~]# systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><h1 id="四、创建用户并授权"><a href="#四、创建用户并授权" class="headerlink" title="四、创建用户并授权"></a>四、创建用户并授权</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建新用户</span><br>[root@localhost ~]# useradd  username<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建密码</span><br>[root@localhost ~]# passwd username<br><span class="hljs-meta prompt_">#</span><span class="language-bash">sudo命令的授权管理是在sudoers文件里的</span><br>[root@localhost ~]# ls -l /etc/sudoers#sudoers 文件只有查看权，<br>-r--r-----. 1 root root 4328 11月 28 2019 /etc/sudoers<br><span class="hljs-meta prompt_">#</span><span class="language-bash">添加修改权限</span><br>[root@localhost ~]# chmod -v u+w /etc/sudoers<br><span class="hljs-meta prompt_">#</span><span class="language-bash">为新用户添加sudo权限</span><br>[root@localhost ~]# vim /etc/sudoers<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># Allow root to run any commands anywher</span></span>  <br>root    ALL=(ALL)       ALL  <br>username  ALL=(ALL)       ALL  #这个是新增的用户<br><span class="hljs-meta prompt_">#</span><span class="language-bash">收回 sudoers   修改权限</span><br>[root@localhost ~]# chmod -v u-w /etc/sudoers<br><br></code></pre></td></tr></table></figure><h1 id="五、调整字符集，使其支持中文"><a href="#五、调整字符集，使其支持中文" class="headerlink" title="五、调整字符集，使其支持中文"></a>五、调整字符集，使其支持中文</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim /etc/locale.conf<br>LANG=&quot;zh_CN.UTF-8&quot;<br>[root@localhost ~]# source /etc/locale.conf<br></code></pre></td></tr></table></figure><h1 id="六、Linux清理内存缓存"><a href="#六、Linux清理内存缓存" class="headerlink" title="六、Linux清理内存缓存"></a>六、Linux清理内存缓存</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# free -h<br>              total        used        free      shared  buff/cache   available<br>Mem:           3.7G        223M        2.7G         11M        823M        3.2G<br>Swap:          3.9G          0B        3.9G<br>[root@localhost ~]# echo 1 &gt; /proc/sys/vm/drop_caches<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中Object六大方法简介</title>
    <link href="/2020/11/11/Object%E5%85%AD%E5%A4%A7%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <url>/2020/11/11/Object%E5%85%AD%E5%A4%A7%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p><strong>Object类是类层次结构的根。每个类都有 Object作为超类。所有对象，包括数组。</strong></p><h1 id="一、方法摘要"><a href="#一、方法摘要" class="headerlink" title="一、方法摘要"></a>一、方法摘要</h1><table><thead><tr><th>修饰符和类型</th><th>方法和说明</th></tr></thead><tbody><tr><td>final Class&lt;?&gt; getClass()</td><td>返回该 Object运行时类</td></tr><tr><td>String toString()</td><td>返回对象的字符串表示形式。</td></tr><tr><td>protected Object clone()</td><td>创建并返回此对象的副本。</td></tr><tr><td>boolean equals(Object obj)</td><td>判断其他对象与该对象是否相同</td></tr><tr><td>int hashCode()</td><td>返回对象的哈希码值</td></tr><tr><td>void notify()</td><td>唤醒正在等待对象锁的单个线程。</td></tr><tr><td>void notifyAll()</td><td>唤醒正在等待对象锁的所有线程</td></tr><tr><td>void wait()</td><td>当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法。</td></tr><tr><td>void wait(long timeout)</td><td>当前线程等待，直到另一个线程调用 notify()方法或该对象的 notifyAll()方法，或超时。</td></tr><tr><td>void wait(long timeout, int nanos)</td><td>当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法，或者被其他线程中断，或超时。</td></tr></tbody></table><span id="more"></span><h1 id="二、方法详细信息"><a href="#二、方法详细信息" class="headerlink" title="二、方法详细信息"></a>二、方法详细信息</h1><h2 id="1-getClass"><a href="#1-getClass" class="headerlink" title="1. getClass"></a>1. getClass</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> class&lt;?&gt; getClass()<br></code></pre></td></tr></table></figure><ul><li><p>返回此Object的运行时类。 返回的类对象是被表示类的static synchronized方法锁定的对象。 </p></li><li><p>实际结果的类型是Class&lt;? extends |X|&gt;其中|X|是静态类型上其表达的擦除getClass被调用。</p></li><li><p>结果表示 类对象的运行时类的Class对象。 </p></li></ul><h2 id="2-hashCode"><a href="#2-hashCode" class="headerlink" title="2. hashCode"></a>2. hashCode</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p>返回对象的哈希码值。 支持这种方法是为了散列表，如HashMap提供的那样 。<br>hashCode的条约： </p><ul><li>一个Java程序多次在同一个对象上调用该方法该方法必须返回相同的整数，前提是对象中equals方法没有被修改。 </li><li>如果equals(Object)方法两个对象相等，则两个对象的hashCode方法返回的整数也必须相同。 </li><li>如果两个对象的 equals(java.lang.Object) 方法不相等，那么这两个对象调用 hashCode 方法可以返回相同的结果。 但是为不相等的对象生成不同的整数结果可能会提高哈希表的性能。 </li></ul><h2 id="3-equals"><a href="#3-equals" class="headerlink" title="3. equals"></a>3. equals</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br></code></pre></td></tr></table></figure><p>指示一些其他对象是否等于该对象。 </p><p>equals方法在非空对象引用上实现等价关系： </p><ul><li>自反性 ：对于任何非空的参考值x ， x.equals(x)应该返回true 。 </li><li>对称的 ：对于任何非空引用值x和y ， 当x.equals(y)返回true时，y.equals(x)也应该返回true 。 </li><li>传递性 ：对于任何非空引用值x ， y和z ，如果x.equals(y)返回true且y.equals(z)也返回true ，那么x.equals(z)也一定返回true 。 </li><li>一致的 ：对于任何非空引用值x和y ，多次调用x.equals(y)始终返回true或始终返回false ，前提是对象的equals方法没有被修改。 </li><li>对于任何非空的参考值x ， x.equals(null)应该返回false 。<br>该equals类方法Object实现对象上差别可能性最大的相等关系; 也就是说，对于任何非空的参考值x和y ，当且仅当x和y引用相同的对象（ x == y具有值true ）时，该方法返回true 。 </li></ul><p>无论何时覆盖该方法，通常需要覆盖 hashCode 方法，以便维护hashCode方法的通用合同，该方法规定相等的对象必须具有相等的哈希码。 </p><h2 id="4-clone"><a href="#4-clone" class="headerlink" title="4. clone"></a>4. clone</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException<br></code></pre></td></tr></table></figure><h3 id="创建并返回此对象的副本。"><a href="#创建并返回此对象的副本。" class="headerlink" title="- 创建并返回此对象的副本。"></a>- 创建并返回此对象的副本。</h3><p>该方法执行该对象的“浅拷贝”，而不是“深度拷贝”操作。<br>其中克隆对象满足：</p><ul><li>x.clone() != x </li><li>x.clone().getClass() == x.getClass() </li></ul><h3 id="异常-CloneNotSupportedException"><a href="#异常-CloneNotSupportedException" class="headerlink" title="- 异常 CloneNotSupportedException -"></a>- 异常 CloneNotSupportedException -</h3><ul><li><p>如果Object类不实现接口 Cloneable ，则抛出CloneNotSupportedException 。</p></li><li><p>Object类本身并不实现接口Cloneable ，因此在类别为Object的对象上调用clone方法将导致运行时抛出异常。 </p></li><li><p>如果对象的类不支持Cloneable接口。      子类也可以抛出该异常表示实例无法被克隆。 </p></li></ul><h2 id="5-toString"><a href="#5-toString" class="headerlink" title="5. toString"></a>5. toString</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><p>返回对象的字符串表示形式。 一般来说， toString方法返回一个用于说明这个对象的字符串。 </p><p>返回值应该是一个简明扼要的表达，容易让人阅读。 建议所有子类覆盖此方法。 </p><h2 id="6-notify"><a href="#6-notify" class="headerlink" title="6. notify"></a>6. notify</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><ul><li><p>唤醒正在等待该对象锁的单个线程。 如果有多个线程正在等待该对象的锁，则任意选其中一个唤醒。 线程通过调用wait方法等待对象的锁。 </p></li><li><p>唤醒的线程要等待当前线程结束该对象的锁定才可继续。 唤醒的线程将以通常的方式与其他线程竞争。 </p></li><li><p>该方法只能由作为该对象的锁的所有者的线程调用。如果当前线程不是锁的所有者。 则会抛出异常IllegalMonitorStateException</p></li><li><p>线程以三种方式之一成为对象锁的所有者： </p><ul><li>通过执行该对象的同步实例方法。 </li><li>通过执行在对象上synchronized synchronized语句</li><li>对于类型为Class的对象，通过执行该类的同步静态方法。 </li></ul></li></ul><h2 id="7-notifyAll"><a href="#7-notifyAll" class="headerlink" title="7. notifyAll"></a>7. notifyAll</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyAll</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><ul><li><p>唤醒正在等待对象锁的所有线程。 线程通过调用wait方法之一等待对象的锁。 </p></li><li><p>唤醒的线程要等待当前线程结束该对象的锁定才可继续。 唤醒的线程将以通常的方式与其他线程竞争。 </p></li><li><p>该方法只能由作为该对象的锁的所有者的线程调用。如果当前线程不是锁的所有者。 则会抛出异常IllegalMonitorStateException</p></li></ul><h2 id="8-wait"><a href="#8-wait" class="headerlink" title="8. wait"></a>8. wait</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException<br></code></pre></td></tr></table></figure><p>导致当前线程等待，直到另一个线程调用此对象的notify()方法或notifyAll()方法，或超时。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout,</span><br><span class="hljs-params">                       <span class="hljs-type">int</span> nanos)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException<br></code></pre></td></tr></table></figure><p>它允许对放弃之前等待通知的时间进行更精细的控制。 以纳秒为单位的实时数量由下式给出：<br> 1000000*timeout+nanos在所有其他方面，该方法与一个参数的方法wait(long)相同。 特别是， wait(0, 0)意味着同样的事情wait(0) 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wait</span><span class="hljs-params">()</span><br>                <span class="hljs-keyword">throws</span> InterruptedException<br></code></pre></td></tr></table></figure><p>这个方法的就是直接简单的执行了 wait(0) 。 </p><ul><li>参数 <ul><li>timeout - 以毫秒为单位等待的最长时间。 </li><li>nanos - 额外的时间，以纳秒范围0-999999。 </li></ul></li><li>异常 <ul><li>IllegalArgumentException - 如果超时值为负值或值不在0-999999范围内。 </li><li>IllegalMonitorStateException - 如果当前线程不是此对象的锁的所有者。 </li><li>InterruptedException - 如果任何线程在当前线程等待通知之前或当前线程中断当前线程。 当抛出此异常时，当前线程的中断状态将被清除。 </li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的三大集合类 List、Set、Map区别</title>
    <link href="/2020/11/10/Java%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    <url>/2020/11/10/Java%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E9%9B%86%E5%90%88%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、List（列表）Set（集合）Map（映射）和实现关系"><a href="#一、List（列表）Set（集合）Map（映射）和实现关系" class="headerlink" title="一、List（列表）Set（集合）Map（映射）和实现关系"></a>一、List（列表）Set（集合）Map（映射）和实现关系</h1><ul><li> <strong>List</strong> 和 <strong>Set</strong> 接口都是继承 <strong>Collection</strong> 接口，<strong>Map</strong> 未继承任何接口，因此它与 <strong>Collection</strong> 接口平级。</li><li>List主要有两个实现类 <strong>ArrayList</strong>（数组列表） 和 <strong>LinkedList</strong> （双向链表）。</li><li>set 主要有两个实现类 <strong>HashSet</strong> 和 <strong>TreeSet</strong> </li><li>map 主要实现类有 <strong>Hashtable</strong> 、<strong>HashMap</strong> 、 <strong>TreeMap</strong>。<span id="more"></span></li></ul><p><img src="/myimages/202011101957.png" alt="list,set,map"></p><h1 id="二、-List-实现类"><a href="#二、-List-实现类" class="headerlink" title="二、 List 实现类"></a>二、 List 实现类</h1><ul><li>List 是以线性方式存储数据，可以存储相同数据</li><li>ArrayList 是一个可以动态修改的数组，没有固定大小的限制，可快速访问数据。</li><li>LinkedList 是一个由双向链表组成的列表，快速插入或删除数据。</li><li>ArrayList 和 LinkedList 都是线程不安全的。Vector类是线程安全的。</li></ul><h1 id="三、-Set-实现类"><a href="#三、-Set-实现类" class="headerlink" title="三、 Set 实现类"></a>三、 Set 实现类</h1><ul><li><p>Set 是 按照数据的 HashCode 存储对象，不可以存储相同对象，存取速度快。</p></li><li><p>HashSet 是基于HashMap实现的集合。允许有 null 值，不是线程安全的。</p></li><li><p>TreeSet 是基于TreeMap实现的有序的集合。实现了SortedSet 接口可以对集合中的对象进行排序底层结构是红黑树，依靠比较器去重。不是线程安全的。</p><h1 id="四、-Map-实现类"><a href="#四、-Map-实现类" class="headerlink" title="四、 Map 实现类"></a>四、 Map 实现类</h1></li><li><p>Map是一种把键和值映射的集合，每一元素都包含一个键和一个值。不可重复。</p></li><li><p>HashMap 是一个散列表、存储键值对(key-value)的映射。<br>根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一个的键为 null，无序且不是线程安全的。</p></li><li><p>TreeMap 是一个基于红黑树实现的映射，内部会按照键值有序存储。不是线程安全的。</p></li><li><p>Hashtable 键和值都是非空且，是线程安全的每次锁住整张表，如果需要线程安全且高并发应该使用  java.util.concurrent.ConcurrentHashMap&lt;K,V&gt;类</p></li><li><p>线程安全的map类有：1.HashTable 2. SynchronizedMap 3. ConcurrentHashMap（推荐）</p></li></ul><h1 id="五、主要区别"><a href="#五、主要区别" class="headerlink" title="五、主要区别"></a>五、主要区别</h1><table><thead><tr><th></th><th>List</th><th>Set</th><th>Map</th></tr></thead><tbody><tr><td>继承接口</td><td>Collection</td><td>Collection</td><td></td></tr><tr><td>常用实现类</td><td>ArrayList、LinkedList、Vector</td><td>HashSet、TreeSet</td><td>HashMap、HashTable、TreeMap</td></tr><tr><td>是否可重复</td><td>可重复</td><td>不可重复</td><td>不可重复</td></tr><tr><td>顺序</td><td>有序</td><td>无序</td><td>无序</td></tr><tr><td>线程安全</td><td>Vector 类线程安全</td><td></td><td>Hashtable 类线程安全</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入浅出JavaSpring5框架</title>
    <link href="/2020/11/06/Java-spring5%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/11/06/Java-spring5%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Spring框架概念"><a href="#一、Spring框架概念" class="headerlink" title="一、Spring框架概念"></a>一、Spring框架概念</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li><strong>Spring是一个轻量级的开源的JavaEE框架</strong></li><li>Spring框架可以解决企业开发的复杂性</li><li>Spring有两个核心部分：IOC和AOP</li><li>IOC:控制反转，把创建对象的过程教给Spring进行管理</li><li>Aop：面向切面，在不修改源代码的情况下进行功能增强</li><li>Spring特点：1.方便解耦，简化开发  2.方便测试程序 3.方便和其他框架整合  4. 方便进行事务操作</li></ol><span id="more"></span><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://repo.spring.io/release/org/springframework/spring/">spring官网下载</a></p><ul><li>我这里下载的是<strong>spring-5.2.9.RELEASE-dist.zip</strong>版本</li><li>下载完成后将<strong>libs</strong>文件夹下的.jar文件复制到项目中，并导入依赖。</li></ul><h1 id="二、IOC容器"><a href="#二、IOC容器" class="headerlink" title="二、IOC容器"></a>二、IOC容器</h1><ol><li>控制反转：把对象的创建个对象之间的调用过程，交给Spring进行管理</li><li>使用IOC目的：为了降低耦合度</li></ol><h2 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h2><p>xml解析、工厂模式、反射     </p><p>IOC过程:</p><ul><li>第一步：xml配置文件，配置创建的对象<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;classpath&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>第二步：有service类和dao类，创建工厂类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDao <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classValue</span> <span class="hljs-operator">=</span> class属性值;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cla</span> <span class="hljs-operator">=</span> Class.forName(classValue);<br>        <span class="hljs-keyword">return</span> (UserDao)cla.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="IOC接口（BeanFactory）"><a href="#IOC接口（BeanFactory）" class="headerlink" title="IOC接口（BeanFactory）"></a>IOC接口（BeanFactory）</h2><ol><li><p>IOC思想基于IOC容器完成，IOC容器的底层就是对象工厂</p></li><li><p>Spring提供IOC容器实现的两种方式：</p></li><li><p>BeanFactory:IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用</p><ul><li>加载配置文件的时候不会创建对象，在获取（使用）对象时候才去创建对象</li></ul></li><li><p>ApplicationContext: BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人员进行使用。</p><ul><li>加载配置文件时候会把在配置文件对象进行创建</li></ul></li></ol><h2 id="IOC操作Bean管理（基于xml）"><a href="#IOC操作Bean管理（基于xml）" class="headerlink" title="IOC操作Bean管理（基于xml）"></a>IOC操作Bean管理（基于xml）</h2><h3 id="1-Spring创建对象"><a href="#1-Spring创建对象" class="headerlink" title="1. Spring创建对象"></a>1. Spring创建对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.springDemo.User&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>在spring配置文件中使用bean标签，标签种添加对应的属性，就可以实现对象的创建</li><li>创建对象时候，默认是执行无参数构造方法完成对象创建。</li></ul><h3 id="2-Spring注入属性"><a href="#2-Spring注入属性" class="headerlink" title="2. Spring注入属性"></a>2. Spring注入属性</h3><p><strong>DI：依赖注入，就是注入属性。</strong></p><p><strong>Spring_demo目录结构：</strong><br><img src="/myimages/202011081524.png" alt="Spring目录结构"></p><h3 id="3-set方法注入："><a href="#3-set方法注入：" class="headerlink" title="3.set方法注入："></a><strong>3.set方法注入：</strong></h3><p><strong>bean1.xml配置文件</strong><br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">beans</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//SPRING//DTD BEAN//EN&quot;</span> <span class="hljs-string">&quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.spring.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小王&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><br><strong>User 持久类：</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(String age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> + <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&quot;,age=&#x27;&quot;</span> + age + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br><br>        System.out.println(user.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="4-构造方法注入："><a href="#4-构造方法注入：" class="headerlink" title="4.构造方法注入："></a><strong>4.构造方法注入：</strong></h3><p><strong>bean1.xml配置文件</strong><br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orders&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.spring.Orders&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;电脑&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;中国&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p><strong>Orders 持久类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Orders</span> &#123;<br>    <span class="hljs-keyword">private</span> String oname;<br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Orders</span><span class="hljs-params">(String oname, String address)</span> &#123;<br>        <span class="hljs-built_in">this</span>.oname = oname;<br>        <span class="hljs-built_in">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Orders&#123;&quot;</span> + <span class="hljs-string">&quot;oname=&#x27;&quot;</span> + oname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>        <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;orders&quot;</span>, Orders.class);<br><br>        System.out.println(orders.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Bean的作用域："><a href="#Bean的作用域：" class="headerlink" title="Bean的作用域："></a>Bean的作用域：</h2><h3 id="Spring的bean默认为单例："><a href="#Spring的bean默认为单例：" class="headerlink" title="Spring的bean默认为单例："></a>Spring的bean默认为单例：</h3><p><strong>单例对象只能创建一次，且在使用getBean()方法多次获取的都是同一个对象</strong></p><h3 id="4-把Spring的bean设置为多实例："><a href="#4-把Spring的bean设置为多实例：" class="headerlink" title="4.把Spring的bean设置为多实例："></a>4.把Spring的bean设置为多实例：</h3><p>把 <strong>bean</strong> 标签的 <strong>scope</strong> 属性设置为 <strong>prototype</strong><br>其默认值为 <strong>singleton</strong> 单例模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Bean的生命周期："><a href="#Bean的生命周期：" class="headerlink" title="Bean的生命周期："></a>Bean的生命周期：</h2><ol><li><p>通过构造器创建 bean 实例（无参数构造）</p></li><li><p>为 bean 的属性设置值和对其他 bean 引用（调用set方法）</p></li><li><p>调用 bean 的初始化的方法（需要进行配置）</p><ul><li>需要在xml文件中对应的bean下 添加<code>init-method</code>标签，内容为类中对应的初始化函数。</li></ul></li><li><p>bean 可以使用</p></li><li><p>当容器关闭的时候，调用 bean 的销毁的方法（需要配置销毁的方法）</p><ul><li><p>bean需要手动销毁，调用<code>ClassPathXmlApplicationContext</code>对象中的<code>colos()</code>方法完成销毁。</p></li><li><p>同理需要在<code>destroy-method</code>属性中添加对应的销毁方法。</p></li></ul></li></ol><h2 id="Bean自动装配"><a href="#Bean自动装配" class="headerlink" title="Bean自动装配"></a>Bean自动装配</h2><ol><li>根据属性名自动装配：将bean属性的 <code>autowire</code> 标签设置为<code>byName</code><ul><li>按属性名注入是需要装配的变量名与其他bean属性的id相同。</li></ul></li><li>根据属性类型自动装配：将bean属性的 <code>autowire</code> 标签设置为<code>byType</code><ul><li>按类型注入就是其他bean的返回属性与其需要装配的属性相同，就会自动完成</li><li>类型装配时：符合的有且只能有一个，当有多个类型的bean符合时会报错。</li></ul></li></ol><h2 id="IOC操作Bean管理（基于注解）"><a href="#IOC操作Bean管理（基于注解）" class="headerlink" title="IOC操作Bean管理（基于注解）"></a>IOC操作Bean管理（基于注解）</h2><ol><li>注解是代码的特殊标记，格式：@注解名称（属性名称=属性值，…）</li><li>使用注解，注解作用在类上，方法上，属性上</li><li>使用注解的目的：简化xml配置</li></ol><h2 id="Spring针对Bean管理中创建对象提供注解"><a href="#Spring针对Bean管理中创建对象提供注解" class="headerlink" title="Spring针对Bean管理中创建对象提供注解"></a>Spring针对Bean管理中创建对象提供注解</h2><ol><li>@Component   普通注解</li><li>@Service     一般用于业务逻辑层</li><li>@Controller  用在web层</li><li>@Repository  用在dao或者持久层</li></ol><ul><li>上述四个注解功能一样，都可以用来创建bean实例</li></ul><h3 id="1-配置文件-bean1-xml-设置"><a href="#1-配置文件-bean1-xml-设置" class="headerlink" title="1.配置文件 bean1.xml 设置"></a>1.<strong>配置文件 bean1.xml 设置</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--    自动扫描 com.spring 包下 **所有类 **是否有注解，如果有则创建实例--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.spring&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--    示例1</span><br><span class="hljs-comment">                use-default-filters=&quot;false&quot;：需要手动配置需要扫描的类</span><br><span class="hljs-comment">                &lt;context:include-filter：只扫描 @Component 注解的类</span><br><span class="hljs-comment">                --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.spring&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Component&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--    示例2：</span><br><span class="hljs-comment">                &lt;context:exclude-filter ：排除带有 @Service 注解的类</span><br><span class="hljs-comment">                --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.spring&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-类中添加注解方法："><a href="#2-类中添加注解方法：" class="headerlink" title="2. 类中添加注解方法："></a>2. 类中添加注解方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**在注解里 value 属性可以省略不写</span><br><span class="hljs-comment"> * 默认是类名称，首字母小写</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component(value = &quot;user&quot; )</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基于注解方式实现属性注入"><a href="#基于注解方式实现属性注入" class="headerlink" title="基于注解方式实现属性注入"></a>基于注解方式实现属性注入</h2><ol><li><p>@Autowired：根据类型注入</p></li><li><p>@Qualifier：根据名称注入</p></li><li><p>@Resource：可以根据类型注入，也可以根据名称注入</p></li><li><p>@Value：注入普通类型属性</p></li></ol><h3 id="1-各类注解说明"><a href="#1-各类注解说明" class="headerlink" title="1. 各类注解说明"></a>1. 各类注解说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.spring.bean;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">/** 1.按照属性类型注入，</span><br><span class="hljs-comment">     * 当有配置文件种有多个相同类型时，使用该注解会报错</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserDao userDao;<br>    <span class="hljs-comment">/** 2.按照属性名称注入，</span><br><span class="hljs-comment">     * 建议与 <span class="hljs-doctag">@Autowired</span> 一起使用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//@Qualifier(value = &quot;userDao&quot;)</span><br>    <span class="hljs-comment">/** 3.按照属性名称或者类型注入，</span><br><span class="hljs-comment">     *  若不给 name 赋值则是按照类型注入，赋值后按照属性名称注入</span><br><span class="hljs-comment">     *  <span class="hljs-doctag">@Resource</span> 属于javax中的扩展包，不建议使用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//@Resource(name = &quot;userDao&quot;)</span><br>    <span class="hljs-comment">/** 4. 注入普通类型属性</span><br><span class="hljs-comment">     *  直接给普通变量赋值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Value(value = &quot;123&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h2><h3 id="1-创建配置类"><a href="#1-创建配置类" class="headerlink" title="1. 创建配置类"></a>1. 创建配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.spring;<br><br><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//标记该类为配置类，替代xml文件</span><br><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.spring&quot;&#125;)</span>   <span class="hljs-comment">//加载 &quot;com.spring&quot; 包下的注解 创建类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-测试类"><a href="#2-测试类" class="headerlink" title="2. 测试类"></a>2. 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> context.getBean(<span class="hljs-string">&quot;userDao&quot;</span>,UserDao.class);<br>        System.out.println(userDao.toString());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="三、Aop"><a href="#三、Aop" class="headerlink" title="三、Aop"></a>三、Aop</h1><ol><li>Aop是一个面向切面编程方法，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高开发效率。</li><li>也就是不通过修改源代码方式在主干功能里添加新功能</li></ol><h2 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h2><ol><li>AOP底层使用动态代理，分为有接口和无接口两种情况</li><li>如果有接口，则创建接口实现类的代理对象</li><li>如果没有接口，则创建当前类子类的代理对象</li></ol><h2 id="Aop（JDK动态代理）"><a href="#Aop（JDK动态代理）" class="headerlink" title="Aop（JDK动态代理）"></a>Aop（JDK动态代理）</h2><h3 id="1-如何使用"><a href="#1-如何使用" class="headerlink" title="1. 如何使用"></a>1. 如何使用</h3><p>使用<code>java.lang.reflect.Proxy </code>类中的<code>newProxyInstance</code>方法创建动态代理</p><ul><li>参数一： 类加载器</li><li>参数二：增强方法所在的类，这个类的实现接口，支持多个接口</li><li>参数三：实现这个接口<code>InvocationHandler</code>，创建代理对象，写增强方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader, 类&lt;?&gt;[] interfaces, InvocationHandler h)</span> <br>返回指定接口的代理类的实例，该接口将方法调用分派给指定的调用处理程序。  <br></code></pre></td></tr></table></figure></li></ul><h3 id="2-JDK动态代理代码"><a href="#2-JDK动态代理代码" class="headerlink" title="2. JDK动态代理代码"></a>2. JDK动态代理代码</h3><ul><li>创建接口 <code>UserDao.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>创建接口实现类 <code>UserDaoImpl</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.spring;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;正在执行add方法。。。&quot;</span>);<br>        <span class="hljs-keyword">return</span> a+b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li>使用Proxy类对类进行增强<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.spring;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Class[] interfaces = &#123;UserDao.class&#125;;<br>        <span class="hljs-comment">//方法一：使用匿名内部类增强</span><br><span class="hljs-comment">//        UserDao dao = (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() &#123;</span><br><span class="hljs-comment">//            private Object obj = new UserDaoImpl();</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//                System.out.println(&quot;方法：&quot; + method + &quot;执行之前，参数：&quot; + Arrays.toString(args));</span><br><span class="hljs-comment">//                Object res = method.invoke(obj, args);</span><br><span class="hljs-comment">//                System.out.println(&quot;方法：&quot; + method + &quot;执行之后，返回值：&quot; + res);</span><br><span class="hljs-comment">//                return res;</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br><span class="hljs-comment">//        dao.add(1,2);</span><br><br>        <span class="hljs-comment">//方法二：创建一个类实现 InvocationHandler 接口中的 invoke方法</span><br>        <span class="hljs-type">UserDaoImpl</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoImpl</span>();<br>        <span class="hljs-type">UserDao</span> <span class="hljs-variable">dao</span> <span class="hljs-operator">=</span> (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDaoProxy</span>(userDao));<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> dao.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>        System.out.println(res);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-comment">// 把需要代理的对象传入</span><br>    <span class="hljs-keyword">private</span> Object obj;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDaoProxy</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-built_in">this</span>.obj = obj;<br>    &#125;<br><br>    <span class="hljs-comment">//增强逻辑</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;方法：&quot;</span> + method + <span class="hljs-string">&quot;执行之前，参数：&quot;</span> + Arrays.toString(args));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> method.invoke(obj, args);<br>        System.out.println(<span class="hljs-string">&quot;方法：&quot;</span> + method + <span class="hljs-string">&quot;执行之后，返回值：&quot;</span> + res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h2></li></ul><h3 id="1-连接点"><a href="#1-连接点" class="headerlink" title="1. 连接点"></a>1. 连接点</h3><p>类中的哪些方法可以被增强，这些方法成为连接点</p><h3 id="2-切入点"><a href="#2-切入点" class="headerlink" title="2. 切入点"></a>2. 切入点</h3><p>类中实际真正被增强的方法，称为切入点</p><h3 id="3-通知（增强）"><a href="#3-通知（增强）" class="headerlink" title="3. 通知（增强）"></a>3. 通知（增强）</h3><ul><li>被增强的方法中实际增强的逻辑部分，称为通知</li><li>通知分为：前置通知、后置通知、环绕通知、异常通知、最终通知</li></ul><h3 id="4-切面"><a href="#4-切面" class="headerlink" title="4. 切面"></a>4. 切面</h3><p>把通知应用到切入点的过程</p><h2 id="AOP（基于AspectJ实现）"><a href="#AOP（基于AspectJ实现）" class="headerlink" title="AOP（基于AspectJ实现）"></a>AOP（基于AspectJ实现）</h2><h3 id="1-在spring配置文件中，开启注解扫描"><a href="#1-在spring配置文件中，开启注解扫描" class="headerlink" title="1. 在spring配置文件中，开启注解扫描"></a>1. 在spring配置文件中，开启注解扫描</h3><h3 id="2-使用注解创建User和UserProxy对象"><a href="#2-使用注解创建User和UserProxy对象" class="headerlink" title="2. 使用注解创建User和UserProxy对象"></a>2. 使用注解创建User和UserProxy对象</h3><h3 id="3-在增强类的方法上面添加注解-Aspect"><a href="#3-在增强类的方法上面添加注解-Aspect" class="headerlink" title="3. 在增强类的方法上面添加注解 @Aspect"></a>3. 在增强类的方法上面添加注解 @Aspect</h3><h3 id="4-在spring配置文件中开启生成代理对象"><a href="#4-在spring配置文件中开启生成代理对象" class="headerlink" title="4. 在spring配置文件中开启生成代理对象"></a>4. 在spring配置文件中开启生成代理对象</h3><h1 id="四、JdbcTemplate（Jdbc模板）"><a href="#四、JdbcTemplate（Jdbc模板）" class="headerlink" title="四、JdbcTemplate（Jdbc模板）"></a>四、JdbcTemplate（Jdbc模板）</h1><h2 id="配置数据库连接池"><a href="#配置数据库连接池" class="headerlink" title="配置数据库连接池"></a>配置数据库连接池</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--    开启组件扫描--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.spring&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--    配置数据库连接池--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///user_db&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--    创建数据库对象--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--    name表示要注入JdbcTemplate类中的变量名，ref表示进行注入的内部bean的id--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="五、事务管理"><a href="#五、事务管理" class="headerlink" title="五、事务管理"></a>五、事务管理</h1><ol><li>事务是数据库操作的最基本单元，逻辑上一组操作，要么都成功，如果一个失败则所有操作都失败</li><li>事务的四个特性：原子性、一致性、隔离性、持久性</li><li>声明事务管理主要有：基于注解和基于xml配置</li><li>在spring进行声明式事务管理，底层使用AOP原理</li></ol><h2 id="基于注解声明式事务管理"><a href="#基于注解声明式事务管理" class="headerlink" title="基于注解声明式事务管理"></a>基于注解声明式事务管理</h2><h3 id="1-在配置文件中配置事务管理器"><a href="#1-在配置文件中配置事务管理器" class="headerlink" title="1.在配置文件中配置事务管理器"></a>1.在配置文件中配置事务管理器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--    开启组件扫描--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.spring&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!--    配置数据库连接池--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///user_db&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--    创建数据库对象--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jdbcTemplate&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--    name表示要注入JdbcTemplate类中的变量名，ref表示进行注入的内部bean的id--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--创建事务管理器--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--开启事务注解--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-在service类上面添加事务注解"><a href="#2-在service类上面添加事务注解" class="headerlink" title="2.在service类上面添加事务注解"></a>2.在service类上面添加事务注解</h3><ol><li><code>@Transactional</code> ，这个注解可以添加到类上，也可以添加到方法上面</li></ol><h1 id="六、Spring5新特性"><a href="#六、Spring5新特性" class="headerlink" title="六、Spring5新特性"></a>六、Spring5新特性</h1><ol><li>整个Spring5框架的代码基于Java8，同时兼容JAVA9</li><li>Spring5框架核心容器支持 @Nullable 注解，可以使用在方法上，属性上，参数上，表示方法返回可以为空，属性值可以为空，参数值可以为空</li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多元Huffman编码--贪心算法</title>
    <link href="/2020/11/05/%E5%A4%9A%E5%85%83Huffman%E7%BC%96%E7%A0%81-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <url>/2020/11/05/%E5%A4%9A%E5%85%83Huffman%E7%BC%96%E7%A0%81-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在一个操场的四周摆放着n堆石子。现要将石子有次序地合并成一堆。规定每次至少选2 堆最多选k堆石子合并成新的一堆，合并的费用为新的一堆的石子数。试设计一个算法，计算出将n堆石子合并成一堆的最大总费用和最小总费用。 对于给定n堆石子,计算合并成一堆的最大总费用和最小总费用。</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入数据的第1 行有2 个正整数n和k（n≤100000，k≤10000），表示有n堆石子，每次至少选2 堆最多选k堆石子合并。第2 行有n个数，分别表示每堆石子的个数。</p><h2 id="输出Output"><a href="#输出Output" class="headerlink" title="输出Output"></a>输出Output</h2><p>将计算出的最大总费用和最小总费用输出，两个整数之间用空格分开。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">7 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">45 </span><span class="hljs-number">13</span> <span class="hljs-number">12</span> <span class="hljs-number">16</span> <span class="hljs-number">9</span> <span class="hljs-number">5</span> <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">593 </span><span class="hljs-number">199</span><br></code></pre></td></tr></table></figure><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><ul><li>最大值是每次取数量最大的两堆合并，然后把合并的数记录下来，然后放回数组种</li><li>最小值是除第一次外每次取K个最小的合并，然后把合并的放回数组，递归调用。除去第一次每次都取K个是因为要保证最后一次取到K个数据</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> p[<span class="hljs-number">200000</span>];<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">把数组P中的第n-1个数据，插入到i到n-2数据里，</span><br><span class="hljs-comment">相当于把i到n从小到大排序</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_sorted</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n<span class="hljs-number">-1</span>; j &gt;= i; --j) &#123;<br>        <span class="hljs-keyword">if</span>(p[j]&lt;p[j<span class="hljs-number">-1</span>])&#123;<br>            <span class="hljs-built_in">swap</span>(p[j],p[j<span class="hljs-number">-1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin&gt;&gt;p[i];<br>    &#125;<br>    <span class="hljs-comment">//扩大数组，保证每次都能取K个数据</span><br>    <span class="hljs-keyword">while</span>(n%(k<span class="hljs-number">-1</span>)!=<span class="hljs-number">1</span>)<br>        p[n++]=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//从小到大排序</span><br>    <span class="hljs-built_in">sort</span>(p,p+n);<br><br>    <span class="hljs-comment">//计算最大值</span><br>    <span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> max2 = p[n<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        <span class="hljs-keyword">if</span>(p[i] == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>        max2 += p[i];<br>        max += max2;<br>    &#125;<br><br>    <span class="hljs-comment">//计算最小值</span><br>    <span class="hljs-type">int</span> min = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>;) &#123;<br>        <span class="hljs-type">int</span> min2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; k; ++j) &#123;<br>            min2 += p[i++];<br>        &#125;<br>        p[n++] = min2;<br>        min += min2;<br>        <span class="hljs-built_in">my_sorted</span>(i);<br><br><span class="hljs-comment">//        for (int j = i; j &lt; n; ++j) &#123;</span><br><span class="hljs-comment">//            cout&lt;&lt;p[j]&lt;&lt;&#x27; &#x27;;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        cout&lt;&lt;endl;</span><br>    &#125;<br>    cout&lt;&lt;max&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;min&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多元Huffman编码变形—回溯</title>
    <link href="/2020/11/05/%E5%A4%9A%E5%85%83Huffman%E7%BC%96%E7%A0%81%E5%8F%98%E5%BD%A2%E2%80%94%E5%9B%9E%E6%BA%AF/"/>
    <url>/2020/11/05/%E5%A4%9A%E5%85%83Huffman%E7%BC%96%E7%A0%81%E5%8F%98%E5%BD%A2%E2%80%94%E5%9B%9E%E6%BA%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在一个操场的四周摆放着n堆石子。现要将石子有次序地合并成一堆。规定在合并过程中最多可以有m(k)次选k堆石子合并成新的一堆，2≤k≤n，合并的费用为新的一堆的石子数。试设计一个算法，计算出将n堆石子合并成一堆的最小总费用。 对于给定n堆石子,计算合并成一堆的最小总费用。</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入数据的第1 行有1 个正整数n（n≤100），表示有n 堆石子。第2行有n个数，分别表示每堆石子的个数。第3 行有n-1 个数，分别表示m(k)（2≤k≤n）的值。</p><h2 id="输出Output"><a href="#输出Output" class="headerlink" title="输出Output"></a>输出Output</h2><p>将计算出的最小总费用输出。问题无解时输出“No solution!”</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">45 </span><span class="hljs-number">13</span> <span class="hljs-number">12</span> <span class="hljs-number">16</span> <span class="hljs-number">9</span> <span class="hljs-number">5</span> <span class="hljs-number">22</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">136<br></code></pre></td></tr></table></figure><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><ul><li>首先用分支界限法（回溯法）找出每次合并石子堆数和可用次数<code>v[i]</code></li><li>然后对石子从小到大排序，每次取最小堆数合并石子（这样保证越往后合并的堆数就越多）</li><li>这样就就可以保证最小输出</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> p[<span class="hljs-number">201</span>];<br><span class="hljs-type">int</span> m[<span class="hljs-number">101</span>];<br><span class="hljs-type">int</span> v[<span class="hljs-number">101</span>];<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">分支界限法 找出每次合并石子堆数和可用次数</span><br><span class="hljs-comment">参数：第i次合并，还剩余sum堆石子</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">branch</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> sum)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(sum==<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=m[i];j&gt;=<span class="hljs-number">0</span>;j--)&#123;<br>        v[i] = j;<br>        <span class="hljs-keyword">if</span>(sum-v[i]*(i<span class="hljs-number">-1</span>)&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">branch</span>(i<span class="hljs-number">-1</span>,sum-v[i]*(i<span class="hljs-number">-1</span>)))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">把数组P中的第n-1个数据，插入到i到n-2数据里，</span><br><span class="hljs-comment">相当于把i到n从小到大排序</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_sorted</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n<span class="hljs-number">-1</span>; j &gt;= i; --j) &#123;<br>        <span class="hljs-keyword">if</span>(p[j]&lt;p[j<span class="hljs-number">-1</span>])&#123;<br>            <span class="hljs-built_in">swap</span>(p[j],p[j<span class="hljs-number">-1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin&gt;&gt;p[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; ++i) &#123;<br>        cin&gt;&gt;m[i];<br>    &#125;<br>    <span class="hljs-comment">//判断是否有解，并且把每次需要合并多少堆石子求出来</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">branch</span>(n,n))&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;No solution!&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(p,p+n);<br><br><span class="hljs-comment">//        for(int i=0;i&lt;=n;i++)&#123;</span><br><span class="hljs-comment">//            cout&lt;&lt;v[i]&lt;&lt;&#x27; &#x27;;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        cout&lt;&lt;endl;</span><br><br>    <span class="hljs-type">int</span> min = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> num = n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= num;i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;k &lt; v[i];k++)&#123;<br>            <span class="hljs-type">int</span> min2 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; ++j) &#123;<br>                min2 += p[start++];<br>            &#125;<br>            p[n++] = min2;<br>            min += min2;<br>            <span class="hljs-built_in">my_sorted</span>(start);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;min&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的HashMap（jdk1.8版本）</title>
    <link href="/2020/11/03/Java%E4%B8%AD%E7%9A%84HashMap/"/>
    <url>/2020/11/03/Java%E4%B8%AD%E7%9A%84HashMap/</url>
    
    <content type="html"><![CDATA[<h1 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>基于哈希表Map接口实现，是以key-value存储形式存在，即主要用来存放键值对。HashMap的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外HashMap中的映射不是有序的。</p><span id="more"></span><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>JDK1.8 之后HashMap由数组+链表+红黑树组成，链表主要是为了解决哈希冲突，当链表长度大于阈值（默认为8）且数组长度大于64时链表会改为红黑树存储，小于64则会扩容。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>存取无序的   </li><li>键和值为的位置都可以是null，但是键位置只能有一个null  </li><li>键位置唯一，底层数据结构控制  </li><li>非线程安全。</li></ol><h1 id="HashMap-实现原理"><a href="#HashMap-实现原理" class="headerlink" title="HashMap 实现原理"></a>HashMap 实现原理</h1><h2 id="哈希表底层采用何种算法计算出hash值？"><a href="#哈希表底层采用何种算法计算出hash值？" class="headerlink" title="哈希表底层采用何种算法计算出hash值？"></a>哈希表底层采用何种算法计算出hash值？</h2><ul><li>底层采用的key的hashCode方法的值结合数组的长度进行无符号右移（&gt;&gt;&gt;）、按位异或（^）、按位与（&amp;）计算出索引。</li><li>还可以使用：平方取中法、取余法、伪随机数法</li><li>按位算法效率要高于其他算法<h2 id="何时发生哈希碰撞、如何解决哈希碰撞"><a href="#何时发生哈希碰撞、如何解决哈希碰撞" class="headerlink" title="何时发生哈希碰撞、如何解决哈希碰撞"></a>何时发生哈希碰撞、如何解决哈希碰撞</h2>只要两个元素的key计算的哈希码相同就会发生哈希碰撞，jdk8之后采用链表+红黑树解决哈希碰撞。<h2 id="如果两个键的hashcode相同，如何存储。"><a href="#如果两个键的hashcode相同，如何存储。" class="headerlink" title="如果两个键的hashcode相同，如何存储。"></a>如果两个键的hashcode相同，如何存储。</h2>hashcode相同，通过键的equals方法比较内容是否相同，<br>相同：新的value会覆盖之前的value<br>不同：则将新的键值对添加至哈希表</li></ul><h2 id="何时扩容，如何扩容"><a href="#何时扩容，如何扩容" class="headerlink" title="何时扩容，如何扩容"></a>何时扩容，如何扩容</h2><p>当元素数量超过临界值且当前放至元素的位置非空时扩容，<br>默认扩容为原来容量的二倍，并将原来的数据复制。</p><h2 id="红黑树示例"><a href="#红黑树示例" class="headerlink" title="红黑树示例"></a>红黑树示例</h2><blockquote><p>依次插入1-8，8个数据。</p></blockquote><p><img src="/myimages/202011051024.png" alt="红黑树示例"></p><p><a href="https://rbtree.phpisfuture.com/">红黑树在线演示</a></p><h1 id="HashMap-源码"><a href="#HashMap-源码" class="headerlink" title="HashMap 源码"></a>HashMap 源码</h1><h2 id="put方法流程"><a href="#put方法流程" class="headerlink" title="put方法流程"></a>put方法流程</h2><p><img src="/myimages/202011041524.png" alt="put方法流程"></p><h2 id="构造方法1"><a href="#构造方法1" class="headerlink" title="构造方法1"></a>构造方法1</h2><ul><li> initialCapacity 可选，初始容量，<br>若不是2的整数次幂则自动加至2的整数次幂（默认是16在第一次put操作时扩容）  </li></ul><p><strong>在开发时我们应指定足够大初始容量，尽量避免多次扩容带来的性能损耗。</strong></p><ul><li> loadFactor 可选，加载因子,<br>表示实际容量达到最大容量的多少时扩容。（默认是0.75）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> <br></code></pre></td></tr></table></figure></li></ul><h2 id="构造方法2"><a href="#构造方法2" class="headerlink" title="构造方法2"></a>构造方法2</h2><p>传入一个哈希表，将表中的键值对复制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span><br></code></pre></td></tr></table></figure><h2 id="forEach方法遍历"><a href="#forEach方法遍历" class="headerlink" title="forEach方法遍历"></a>forEach方法遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        h.put(<span class="hljs-string">&quot;今天&quot;</span>,<span class="hljs-number">4</span>);<br>        h.put(<span class="hljs-string">&quot;明天&quot;</span>,<span class="hljs-number">5</span>);<br>        h.put(<span class="hljs-string">&quot;后天&quot;</span>,<span class="hljs-number">6</span>);<br>        h.put(<span class="hljs-string">&quot;昨天&quot;</span>,<span class="hljs-number">3</span>);<br><br>        h.forEach((k,v)-&gt;&#123;<br>            System.out.println(k + <span class="hljs-string">&quot;---&quot;</span> + v);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL整体架构</title>
    <link href="/2020/11/03/MySQL%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
    <url>/2020/11/03/MySQL%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><h2 id="gitee-限制"><a href="#gitee-限制" class="headerlink" title="gitee 限制"></a>gitee 限制</h2><p><img src="/myimages/202011030922.png"></p><h1 id="MySQL-存储引擎"><a href="#MySQL-存储引擎" class="headerlink" title="MySQL 存储引擎"></a>MySQL 存储引擎</h1><h2 id="MyISAM-和-InnoDB-的区别"><a href="#MyISAM-和-InnoDB-的区别" class="headerlink" title="MyISAM 和 InnoDB 的区别"></a>MyISAM 和 InnoDB 的区别</h2><p><img src="/myimages/202011031010.png"></p><h2 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h2><p><strong>表示数据行和相邻的键值紧凑地存储在一起。一个表只能有一个聚簇索引</strong></p><h1 id="原子性和持久性怎么保证"><a href="#原子性和持久性怎么保证" class="headerlink" title="原子性和持久性怎么保证"></a>原子性和持久性怎么保证</h1><h2 id="原子性实现原理：Undo-log"><a href="#原子性实现原理：Undo-log" class="headerlink" title="原子性实现原理：Undo log"></a>原子性实现原理：Undo log</h2><ul><li>Undo log 是为了实现事务的原子性，在 MySQL 数据库 innoDB 存储引擎中，还用 Undo Log 来实现多版本并发控制。</li><li>在操作任何数据之前，首先将数据备份带一个地方（这个地方称为 Undo Log）。然后进行数据的修改。如果出现了错误或者用户执行了 ROLLBACK 语句，系统可以利用 Undo Log 中的备份将数据恢复到事务开始之前的状态</li><li>undo log 是逻辑日志：1.当 delete 一条记录时，undo log 中会记录一条对应的 insert 记录 2.当 insert 一条记录时，undo log 中会记录一条对应的 delete 记录 3.当 update 一条记录时，会记录一条对应的相反的 update 记录</li></ul><h2 id="持久性实现原理：Redo-log"><a href="#持久性实现原理：Redo-log" class="headerlink" title="持久性实现原理：Redo log"></a>持久性实现原理：Redo log</h2><ul><li><p>持久性：事务一旦提交，其对数据库的更新是持久的。任何事务或者系统故障都不会导致数据丢失。</p></li><li><p>Redo log 保存每次修改信息。每秒把修改的信息刷新到磁盘。<br>三种实现方法：<br><img src="/myimages/202011031109.png"></p></li><li><p>系统默认第一种，最安全但数据量大时效率低。<br><img src="/myimages/202011031110.png"></p></li><li><p>Redo log 用于实现第 0 种</p></li></ul><h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><ul><li>事务具有隔离性，理论上来说事务之间执行不应该相互产生影响，其对数据库的影响应该和它们串行执行时一致。</li><li>然而完全的隔离性会导致系统并发性能很低，降低对资源的利用率，因此实际上对隔离性的要求会有所放宽，这也会一定程度上造成对数据库一致性要求降低。</li><li>SQL 标准为事务定义了不同的隔离级别，从低到高依次是：1.读未提交 2.读已提交 3.可重复读（MySQL 默认） 4.序列化</li></ul><p>事务隔离中存在的问题：</p><ol><li>脏读：存在于<strong>读未提交</strong>中，一个用户可以读取另一个用户未提交的事务，当用户回滚事务时会造成其他用户之前读取的脏数据。</li><li>不可重复读：存在于<strong>读未提交、读已提交</strong>中，一个用户可以读取另一个用户修改前和修改后的数据，会造成两次读取数据的不一致性。</li><li>幻读：存在于<strong>读未提交、读已提交、可重复读</strong>中，一个用户进行插入操作后另一用户不能插入相同的数据，且不能插入数据的用户也无法看到该数据。</li></ol><h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><p>事务的执行结果必须使数据库从一个一致性状态到另一个一致性状态。一致性状态是指：1 系统的状态满足数据的完整性约束（主码，参照，check）2.系统的状态反应数据库本应描述的现实世界的真实状态，比如转账前后的两个账户的金额总和应该保持不变。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解Java线程池</title>
    <link href="/2020/11/02/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2020/11/02/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、线程池简介"><a href="#一、线程池简介" class="headerlink" title="一、线程池简介"></a>一、线程池简介</h1><p>线程池的工作主要是控制运行的线程数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量，超出数量的线程排队等候，等其他线程执行完毕，再从队列中取出任务来执行。</p><span id="more"></span><h1 id="二、线程池的优点"><a href="#二、线程池的优点" class="headerlink" title="二、线程池的优点"></a>二、线程池的优点</h1><ul><li>1.重复利用已有的线程，降低资源浪费。</li><li>2.有效管理线程的数量，统一分配资源，提高系统的稳定性。</li><li>3.提高响应速度，任务到达时直接执行，省去创建线程的时间。</li></ul><h1 id="三、工作原理"><a href="#三、工作原理" class="headerlink" title="三、工作原理"></a>三、工作原理</h1><ul><li>当一个新任务提交到线程池中时，线程池会先判断有空闲线程，若有则交给空闲线程执行，若无则提交至线程等待队列。</li><li>若等待队列饱和且线程数量未达到最大值，则新建线程执行。若达到最大值则执行饱和策略。</li></ul><h1 id="四、5种状态"><a href="#四、5种状态" class="headerlink" title="四、5种状态"></a>四、5种状态</h1><ul><li>Running：能够接受新任务及处理已添加的任务。</li><li>Shutdown：不接受新任务，可以处理已经添加的任务。</li><li>Stop：不接受新任务，不处理已经添加的任务，并且中断正在处理的任务。</li><li>Tidying：所有的任务已经终止，ctl记录的任务数量为0，ctl负责记录线程池的运行状态与活动线程数量。</li><li>Terminated：线程池彻底终止，则线程池转变为终止状态。</li></ul><h1 id="五、常用类"><a href="#五、常用类" class="headerlink" title="五、常用类"></a>五、常用类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ExecutorService  <span class="hljs-comment">//真正的线程池接口。</span><br>ScheduledExecutorService   <span class="hljs-comment">//能和Timer/TimerTask类似，解决那些需要任务重复执行的问题。</span><br>ThreadPoolExecutor  <span class="hljs-comment">//ExecutorService的默认实现。</span><br>ScheduledThreadPoolExecutor  <span class="hljs-comment">//继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。</span><br></code></pre></td></tr></table></figure><p>类继承关系图</p><p><img src="/myimages/202012281603.png" alt="线程池接口关系图"></p><h2 id="ThreadPoolExecutor的用法"><a href="#ThreadPoolExecutor的用法" class="headerlink" title="ThreadPoolExecutor的用法"></a>ThreadPoolExecutor的用法</h2><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><code>corePoolSize</code>：线程池种的线程数量，即使线程空闲也不会销毁。</li><li><code>maximumPoolSize</code>：线程池中最大的线程数，一旦超过这个数量，就会采取饱和策略</li><li><code>keepAliveTime</code>：时间，新增的线程空闲时间一旦超过这个量就会被销毁</li><li><code>unit</code>：前者的之间单位，例如秒（TimeUnit.SECONDS）</li><li><code>workQueue</code>：线程等待队列。</li><li><code>threadFactory</code>：可选参数，线程生产的工厂，可自定义产生新线程，一般使用默认值，默认值为Executors.defaultThreadFactory()</li><li><code>handler</code>：可选参数，自定义饱和策略，默认AbortPolicy类抛出异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                        <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                        <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                        TimeUnit unit,</span><br><span class="hljs-params">                        BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                        ThreadFactory threadFactory,</span><br><span class="hljs-params">                        RejectedExecutionHandler handler)</span><br></code></pre></td></tr></table></figure><h3 id="ThreadPoolExecutor线程池举例："><a href="#ThreadPoolExecutor线程池举例：" class="headerlink" title="ThreadPoolExecutor线程池举例："></a>ThreadPoolExecutor线程池举例：</h3><p><code>ThreadPoolExecutor(10, 100, 60,                 TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(50));</code><br>是创建线程数为10个的线程池，最大线程数为100，新增线程空闲60秒后销毁，线程等待队列大小为50。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//任务计数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">60</span>,<br>                TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(<span class="hljs-number">50</span>));<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">synchronized</span> (ThreadDemo.class) &#123;<br>                number ++;<br>                System.out.println(Thread.currentThread().getName() +<span class="hljs-string">&quot;执行任务：&quot;</span> +  number);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);  <span class="hljs-comment">//线程睡眠，模拟业务执行耗时</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br><br>        &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100</span>;i++)&#123;<br>            pool.submit(r); <span class="hljs-comment">//向线程池中添加任务</span><br>        &#125;<br>        pool.shutdown();    <span class="hljs-comment">//停止向等待队列中添加任务，当已有任务执行完成时自动销毁线程池</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java—面向面试</title>
    <link href="/2020/10/29/Java%E2%80%94%E9%9D%A2%E5%90%91%E9%9D%A2%E8%AF%95/"/>
    <url>/2020/10/29/Java%E2%80%94%E9%9D%A2%E5%90%91%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、计算机底层概念"><a href="#一、计算机底层概念" class="headerlink" title="一、计算机底层概念"></a>一、计算机底层概念</h1><h2 id="1、进程是什么？"><a href="#1、进程是什么？" class="headerlink" title="1、进程是什么？"></a>1、进程是什么？</h2><ul><li>进程是资源分配的基本单位<h2 id="2、线程是什么？"><a href="#2、线程是什么？" class="headerlink" title="2、线程是什么？"></a>2、线程是什么？</h2></li><li>线程是程序执行的基本单位<span id="more"></span><h2 id="3、程序如何开始运行"><a href="#3、程序如何开始运行" class="headerlink" title="3、程序如何开始运行"></a>3、程序如何开始运行</h2></li><li>CPU从PC中读指令（PC程序计数器），然后从内存中读数据放在寄存器中，通过ALU计算，最后把结果写入内存并读下一条指令。<h2 id="4、协程与线程"><a href="#4、协程与线程" class="headerlink" title="4、协程与线程"></a>4、协程与线程</h2></li><li>协程和线程数不是一一对应，一般协程数要远大于线程。协程更像是一个个在队列中的任务，交由适量线程一个个执行，因此协程数量再多也不会影响CPU效率。而线程数目过多会导致CPU花费在线程调度的时间大幅上升，导致CPU效率降低甚至程序崩溃。<h2 id="5、计算机中的四核八线程原理"><a href="#5、计算机中的四核八线程原理" class="headerlink" title="5、计算机中的四核八线程原理"></a>5、计算机中的四核八线程原理</h2></li></ul><ul><li>CPU中主要包含：计算单元 ALU、寄存器、程序计数器 PC、缓存 chche</li><li>一个ALU对应一组寄存器可以执行一个线程</li><li>一个ALU对应两组寄存器可以执行两个线程</li><li>一个ALU就是一核，对应两组寄存器就是两线程。</li></ul><h1 id="二、锁"><a href="#二、锁" class="headerlink" title="二、锁"></a>二、锁</h1><h2 id="1、Java中sleep-和wait-的区别"><a href="#1、Java中sleep-和wait-的区别" class="headerlink" title="1、Java中sleep()和wait()的区别"></a>1、Java中sleep()和wait()的区别</h2><ol><li><p>最主要是sleep方法没有释放锁，而wait方法释放了锁。sleep不出让系统资源；wait是进入线程等待池等待，出让系统资源。</p></li><li><p>这两个方法来自不同的类分别是，sleep来自Thread类，和wait来自Object类。sleep()是Thread的静态类方法，在a线程里调用了b的sleep方法，实际上还是a去睡觉。</p></li><li><p>使用范围：wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用.</p></li><li><p>sleep必须捕获异常，而wait，notify和notifyAll不需要捕获异常</p></li></ol><h2 id="2、synchronized修饰方法"><a href="#2、synchronized修饰方法" class="headerlink" title="2、synchronized修饰方法"></a>2、synchronized修饰方法</h2><p><strong>1.修饰普通函数：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.修饰静态函数：（Demo是类名）</strong>*</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">synchronized</span>(Demo.class);&#125;<br></code></pre></td></tr></table></figure><h2 id="3、轻量级锁与重量级锁"><a href="#3、轻量级锁与重量级锁" class="headerlink" title="3、轻量级锁与重量级锁"></a>3、轻量级锁与重量级锁</h2><p><strong>1.两者比较</strong></p><ul><li>轻量级锁不进入等待队列，执行时不需要唤醒，效率高</li><li>重量级锁需要进入等待队列，执行时需要系统唤醒，需要耗费时间</li></ul><p><strong>2.使用策略</strong></p><ul><li>当竞争不激烈时，每个线程等待时间很短，此时应该选用轻量锁</li><li>当竞争非常激烈，线程需要等待很长时间才会执行，此时应使用重量级锁，使用轻量锁会导致CPU浪费。</li></ul><h2 id="4-volatile-使用"><a href="#4-volatile-使用" class="headerlink" title="4. volatile 使用"></a>4. volatile 使用</h2><ul><li>volatile只能保证变量在多线程中可见性，无法保证原子性。</li></ul><h2 id="5-自旋锁中的CAS方法"><a href="#5-自旋锁中的CAS方法" class="headerlink" title="5. 自旋锁中的CAS方法"></a>5. 自旋锁中的CAS方法</h2><p><strong>1.原理</strong></p><ul><li>要修改一个变量数值时：假如要把变量m的数值由1加上4，</li><li>首先记录变量m当前的值0，然后调用对变量修改的函数加上4，修改完成后比较此时变量m是否还是0，</li><li>如果还是0，则把变量m改为新值5，结束。</li><li>如果不是0，则重新记录m的当前值，循环执行直至变量没有被其他线程修改。</li></ul><p><strong>2.CAS方法存在的ABA问题</strong></p><ul><li>ABA问题是指一个变量被其他线程修改后由改回原先值的问题，是针对于上述CAS的原理中存在的问题。</li><li>解决方法：添加版本号，每次被其他线程调用版本号改变。</li></ul><p><strong>3.CAS方法存在的原子性问题</strong></p><ul><li>如果变量在CAS判断相同后和赋值前，抢先对其修改了，则CAS方法就失效了。</li><li>因此应该在这里保证原子性</li><li>解决方法：底层汇编代码使用<code>lock</code>指令锁住总线，其他指定无法执行。</li></ul><h2 id="6-synchronized锁升级过程"><a href="#6-synchronized锁升级过程" class="headerlink" title="6. synchronized锁升级过程"></a>6. synchronized锁升级过程</h2><p><strong>1.升级过程</strong><br>偏向锁 —&gt; 轻量锁 —&gt; 重量锁<br><img src="/myimages/20201028211136787.png" alt="在这里插入图片描述"></p><p><strong>2.偏向锁</strong></p><ul><li>偏向锁是一种无锁状态，即线程声明这把锁是自己的即可，不用需要竞争，因为大部分的代码是单线程执行的，这样会大幅节省时间。</li><li>升级时机：只要有一个线程来抢锁，就必须升级为轻量级锁。</li></ul><p><strong>3.轻量级锁</strong></p><ul><li>轻量级锁用于多线程竞争比激烈的情况，此时没有获得锁的线程不会进入阻塞状态，会在原地等待或者尝试获得锁</li><li>如果等待的线程过多或等待时间过长，就会升级为重量级锁.</li></ul><p><strong>4.重量级锁</strong></p><ul><li>没有获得锁的线程会自动进入阻塞状态，当有线程释放锁时会唤醒线程来竞争</li><li>线程进入阻塞状态或者唤醒线程时cpu会切换到内核态执行，会消耗一定的cpu资源.</li></ul><h2 id="7-Object-o-new-Object-发生了什么"><a href="#7-Object-o-new-Object-发生了什么" class="headerlink" title="7. Object o = new Object();发生了什么"></a>7. Object o = new Object();发生了什么</h2><ul><li>这个问题好像就是问：把大象装冰箱需要几步，1把冰箱门打开，2把大象装进去，3把冰箱门关上。</li><li>编译器执行时也分三步：</li></ul><blockquote><p>1.申请一个内存空间，变量都是默认值，基础变量是0，引用变量是null。<br>2.调用构造方法，对变量进行初始化。<br>3.建立对象与其引用的联系。</p></blockquote><h2 id="8-简单的单例类"><a href="#8-简单的单例类" class="headerlink" title="8. 简单的单例类"></a>8. 简单的单例类</h2><ul><li><strong>写法一：加载时创建</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mgr01</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Mgr01</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mgr01</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Mgr01</span><span class="hljs-params">()</span>&#123;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr01 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123; <span class="hljs-keyword">return</span> INSTANCE;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123; System.out.println(<span class="hljs-string">&quot;m&quot;</span>);&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Mgr01</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> Mgr01.getInstance();<br>        <span class="hljs-type">Mgr01</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> Mgr01.getInstance();<br>        System.out.println(m1 == m2);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure></li><li><strong>写法二：使用时创建该类的对象</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mgr01</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mgr01 INSTANCE;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Mgr01</span><span class="hljs-params">()</span>&#123;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr01 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123; <br>        <span class="hljs-keyword">if</span>(INSTANCE == <span class="hljs-literal">null</span>)&#123;<br>             INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mgr01</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>写法三DCL（Double Check Lock）单例模式</strong>：采用锁双重验证锁机制，保证线程安全。同时降低锁粒度提高并发效率。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mgr01</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Mgr01 INSTANCE;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Mgr01</span><span class="hljs-params">()</span>&#123;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr01 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//多个业务逻辑</span><br>        <span class="hljs-keyword">if</span>(INSTANCE == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Mgr01.class) &#123;<br>                <span class="hljs-keyword">if</span>(INSTANCE == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//多个业务</span><br>                    INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mgr01</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><strong>DCL单例模式需要加volatile修饰吗？答案：必须加！</strong><blockquote><p><strong>1.原因分析：</strong> 采用DCL方法创建单例模式时，若不加<strong>volatile</strong>修饰<strong>INSTANCE</strong>变量CPU在执行时会对指令或语句进行重排序。就会存在这样的情况：<br><strong>2.特殊情况：</strong> 线程1获得锁在new一个相应的单例对象，分三步1：申请空间2：变量赋值3：<strong>INSTANCE</strong>指向内存空间。CPU优化指令把第2步与第3步顺序交换，就会导致提前返回一个未完全初始的对象。此时恰好轮到线程2执行，线程2将判断<strong>INSTANCE</strong>是否是空，由于线程1已经将其指向相应的内存，就会导致<strong>INSTANCE</strong>非空，函数就会返回一个未完全初始化的对象。。<br><strong>3.解决办法：</strong> 使用<strong>volatile</strong>修饰则可避免CPU在执行时对其重排序问题。</p></blockquote></li></ul><h2 id="9-JVM内存屏障"><a href="#9-JVM内存屏障" class="headerlink" title="9.JVM内存屏障"></a>9.JVM内存屏障</h2><p><strong>屏障两边的指令不可以重排，保障有序。</strong></p><ul><li><strong>hotspot实现方式</strong><br>汇编层通<strong>LOCK</strong>执行一条空语句实现</li></ul><p><strong>LOCK用于在多处理器中执行命令时对共享内存的独占使用。<br>它的作用是能够将当前处理器对应缓存的内容刷新到内存中，并使其他处理器对应的缓存失效。另外还提供了有序的指令无法越过这个内存屏障的作用。</strong></p><h1 id="三、JVM-GC（Garbage-Collector）"><a href="#三、JVM-GC（Garbage-Collector）" class="headerlink" title="三、JVM GC（Garbage Collector）"></a>三、JVM GC（Garbage Collector）</h1><h2 id="1-怎么判断一块内存是垃圾："><a href="#1-怎么判断一块内存是垃圾：" class="headerlink" title="1.怎么判断一块内存是垃圾："></a><strong>1.怎么判断一块内存是垃圾：</strong></h2><p>Root Searching算法：从ROOT根上开始找，凡是能找到的就不是垃圾，否则就清除。</p><h2 id="2-三种垃圾回收算法："><a href="#2-三种垃圾回收算法：" class="headerlink" title="2.三种垃圾回收算法："></a><strong>2.三种垃圾回收算法：</strong></h2><p><strong>Mark-Sweep(标记清除)、Copying(拷贝)、Mark-Compact(标记压缩)</strong></p><ul><li><strong>标记清除</strong>：把可回收的对象标记为未使用的，缺点会差生大量碎片</li><li><strong>拷贝</strong>：把内存一分为二，把存活对象复制到另一半，然后把前一半内存全部清除。缺点内存浪费</li><li><strong>标记压缩</strong>：标记清楚后，把存活的对象压缩到连续的内存空间。缺点效率低</li></ul><h2 id="3-Garbage-Collector的十种垃圾回收器："><a href="#3-Garbage-Collector的十种垃圾回收器：" class="headerlink" title="3.Garbage Collector的十种垃圾回收器："></a><strong>3.Garbage Collector的十种垃圾回收器：</strong></h2><p><img src="/myimages/202011020945.png" alt="十种垃圾回收器"><br><strong>JDK1.8默认垃圾回收器(PS + PO)</strong><br>垃圾回收器分为两种——分代模型和分区模型</p><ul><li><strong>分代模型：</strong><br>分为新生代和老年代。原理：新生代存放新new出来的对象，老年代存放多次清理未清理掉的对象，新生代区域采用Copying(拷贝)回收算法，老年代采用Mark-Sweep或者Mark-Compact回收算法。<br><img src="/myimages/20201101190805587.png" alt="分代模型"></li><li><strong>分代模型中对象创建过程</strong><br>对象在创建时第一步会检测对象能否创建在栈上（逃逸分析和标量替换）如果能则直接创建在栈上，如果不能则放在堆上：对象比较大直接放在老年代（因为老年代分区大）较小则放在新生代，在新生代中多次回收后没回收的对象转移到老年代。<br><img src="/myimages/20201101193300930.png" alt="分代模型"></li></ul><h2 id="4-STW现象"><a href="#4-STW现象" class="headerlink" title="4.STW现象"></a>4.STW现象</h2><p> <strong>STW全称stop-the-world（世界停止），原因：垃圾回收器开始工作，所有业务必须停止等待，在JVM调优时应极力缩短STW现象的时间。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-观察者模式</title>
    <link href="/2020/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。</p><span id="more"></span><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p>主要解决：一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><p>何时使用：一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p><p>如何解决：使用面向对象技术，可以将这种依赖关系弱化。</p><p>关键代码：在抽象类里有一个 ArrayList 存放观察者们。</p><p>应用实例： 1、拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。 2、西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。</p><p>优点： 1、观察者和被观察者是抽象耦合的。 2、建立一套触发机制。</p><p>缺点： 1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><p>使用场景：</p><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li><li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。<br>注意事项： 1、JAVA 中已经有了对观察者模式的支持类。 2、避免循环引用。 3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li></ul><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>观察者模式使用三个类 Subject、Observer 和 Client。Subject 对象带有绑定观察者到 Client 对象和从 Client 对象解绑观察者的方法。我们创建 Subject 类、Observer 抽象类和扩展了抽象类 Observer 的实体类。</p><p>ObserverPatternDemo，我们的演示类使用 Subject 和实体类对象来演示观察者模式。</p><p>步骤 1<br>创建 Subject 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">Subject.java<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Subject</span> &#123;<br>   <br>   <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers <br>      = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Observer&gt;();<br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> state;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> state;<br>   &#125;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(<span class="hljs-type">int</span> state)</span> &#123;<br>      <span class="hljs-built_in">this</span>.state = state;<br>      notifyAllObservers();<br>   &#125;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Observer observer)</span>&#123;<br>      observers.add(observer);      <br>   &#125;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyAllObservers</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-keyword">for</span> (Observer observer : observers) &#123;<br>         observer.update();<br>      &#125;<br>   &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>步骤 2<br>创建 Observer 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Observer.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>   <span class="hljs-keyword">protected</span> Subject subject;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>步骤 3<br>创建实体观察者类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">BinaryObserver.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryObserver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Observer</span>&#123;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">BinaryObserver</span><span class="hljs-params">(Subject subject)</span>&#123;<br>      <span class="hljs-built_in">this</span>.subject = subject;<br>      <span class="hljs-built_in">this</span>.subject.attach(<span class="hljs-built_in">this</span>);<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>      System.out.println( <span class="hljs-string">&quot;Binary String: &quot;</span> <br>      + Integer.toBinaryString( subject.getState() ) ); <br>   &#125;<br>&#125;<br>OctalObserver.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OctalObserver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Observer</span>&#123;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">OctalObserver</span><span class="hljs-params">(Subject subject)</span>&#123;<br>      <span class="hljs-built_in">this</span>.subject = subject;<br>      <span class="hljs-built_in">this</span>.subject.attach(<span class="hljs-built_in">this</span>);<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>     System.out.println( <span class="hljs-string">&quot;Octal String: &quot;</span> <br>     + Integer.toOctalString( subject.getState() ) ); <br>   &#125;<br>&#125;<br>HexaObserver.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HexaObserver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Observer</span>&#123;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">HexaObserver</span><span class="hljs-params">(Subject subject)</span>&#123;<br>      <span class="hljs-built_in">this</span>.subject = subject;<br>      <span class="hljs-built_in">this</span>.subject.attach(<span class="hljs-built_in">this</span>);<br>   &#125;<br> <br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>      System.out.println( <span class="hljs-string">&quot;Hex String: &quot;</span> <br>      + Integer.toHexString( subject.getState() ).toUpperCase() ); <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>步骤 4<br>使用 Subject 和实体观察者对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">ObserverPatternDemo.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObserverPatternDemo</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br> <br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">HexaObserver</span>(subject);<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">OctalObserver</span>(subject);<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryObserver</span>(subject);<br> <br>      System.out.println(<span class="hljs-string">&quot;First state change: 15&quot;</span>);   <br>      subject.setState(<span class="hljs-number">15</span>);<br>      System.out.println(<span class="hljs-string">&quot;Second state change: 10&quot;</span>);  <br>      subject.setState(<span class="hljs-number">10</span>);<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="/2020/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p><p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><span id="more"></span><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>意图：定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p><p>主要解决：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><p>何时使用：一个系统有许多许多类，而区分它们的只是他们直接的行为。</p><p>如何解决：将这些算法封装成一个一个的类，任意地替换。</p><p>关键代码：实现同一个接口。</p><p>应用实例： 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 3、JAVA AWT 中的 LayoutManager。</p><p>优点： 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p><p>缺点： 1、策略类会增多。 2、所有策略类都需要对外暴露。</p><p>使用场景： 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p><p>注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h2><p>创建一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Strategy.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Strategy</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h2><p>创建实现接口的实体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">OperationAdd.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationAdd</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>      <span class="hljs-keyword">return</span> num1 + num2;<br>   &#125;<br>&#125;<br>OperationSubtract.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationSubtract</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>      <span class="hljs-keyword">return</span> num1 - num2;<br>   &#125;<br>&#125;<br>OperationMultiply.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationMultiply</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span>&#123;<br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doOperation</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span> &#123;<br>      <span class="hljs-keyword">return</span> num1 * num2;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h2><p>创建 Context 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">Context.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span> &#123;<br>   <span class="hljs-keyword">private</span> Strategy strategy;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Context</span><span class="hljs-params">(Strategy strategy)</span>&#123;<br>      <span class="hljs-built_in">this</span>.strategy = strategy;<br>   &#125;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">executeStrategy</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>&#123;<br>      <span class="hljs-keyword">return</span> strategy.doOperation(num1, num2);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h2><p>使用 Context 来查看当它改变策略 Strategy 时的行为变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">StrategyPatternDemo.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrategyPatternDemo</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationAdd</span>());    <br>      System.out.println(<span class="hljs-string">&quot;10 + 5 = &quot;</span> + context.executeStrategy(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>));<br> <br>      context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationSubtract</span>());      <br>      System.out.println(<span class="hljs-string">&quot;10 - 5 = &quot;</span> + context.executeStrategy(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>));<br> <br>      context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationMultiply</span>());    <br>      System.out.println(<span class="hljs-string">&quot;10 * 5 = &quot;</span> + context.executeStrategy(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>));<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 中的 String、StringBuffer和StringBuilder的区别</title>
    <link href="/2020/10/28/Java-String%E3%80%81StringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/10/28/Java-String%E3%80%81StringBuffer%E5%92%8CStringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><ol><li>字符串常量，字符串长度不可变<br>String 类的包含如下定义：</li></ol><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** The value is used for character storage. */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[];<br><br><span class="hljs-comment">/** The offset is the first index of the storage that is used. */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> offset;<br><br><span class="hljs-comment">/** The count is the number of characters in the String. */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> count;<br></code></pre></td></tr></table></figure><p><strong>用于存放字符的数组被声明为 final 的，因此只能赋值一次，不可再更改。</strong></p><h1 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h1><ol><li><p>字符串变量（Synchronized，即线程安全）。如果要频繁对字符串内容进行修改，出于效率考虑最好使用 StringBuffer，如果想转成 String 类型，可以调用 StringBuffer 的 toString() 方法。</p></li><li><p>线程安全的可变字符序列。在任意时间点上它都包含某种特定的字符序列，但通过某些方法调用可以改变该序列的长度和内容。可将字符串缓冲区安全地用于多个线程。</p></li><li><p>StringBuffer 上的主要操作是 append 和 insert 方法，可重载这些方法，以接受任意类型的数据。每个方法都能有效地将给定的数据转换成字符串，然后将该字符串的字符追加或插入到字符串缓冲区中。append 方法始终将这些字符添加到缓冲区的末端；insert 方法则在指定的点添加字符。</p></li></ol><h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h1><ol><li><p>字符串变量（非线程安全）。在内部，StringBuilder 对象被当作是一个包含字符序列的变长数组。</p></li><li><p>StringBuilder 是一个可变的字符序列，是 JDK5.0 新增的。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。</p></li></ol><h1 id="使用策略"><a href="#使用策略" class="headerlink" title="使用策略"></a>使用策略</h1><ol><li><p>基本原则：如果要操作少量的数据，用String ；单线程操作大量数据，用StringBuilder ；多线程操作大量数据，用StringBuffer。</p></li><li><p>不要使用String类的”+”来进行频繁的拼接，因为那样的性能极差的，应该使用StringBuffer或StringBuilder类，这在Java的优化上是一条比较重要的原则。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (String s : hugeArray) &#123;<br>    result = result + s;<br>&#125;<br><br><span class="hljs-comment">// 使用StringBuilder</span><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-keyword">for</span> (String s : hugeArray) &#123;<br>    sb.append(s);<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> sb.toString();<br></code></pre></td></tr></table></figure><p>当出现上面的情况时，显然我们要采用第二种方法，因为第一种方法，每次循环都会创建一个String result用于保存结果，除此之外二者基本相同</p></li><li><p>为了获得更好的性能，在构造 StringBuffer 或 StringBuilder 时应尽可能指定它们的容量。当然，如果你操作的字符串长度（length）不超过 16 个字符就不用了，当不指定容量（capacity）时默认构造一个容量为16的对象。不指定容量会显著降低性能。</p></li><li><p>StringBuilder 一般使用在方法内部来完成类似 + 功能，因为是线程不安全的，所以用完以后可以丢弃。StringBuffer 主要用在全局变量中。</p></li><li><p>相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。而在现实的模块化编程中，负责某一模块的程序员不一定能清晰地判断该模块是否会放入多线程的环境中运行，因此：除非确定系统的瓶颈是在 StringBuffer 上，并且确定你的模块不会运行在多线程模式下，才可以采用 StringBuilder；否则还是用 StringBuffer。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>W10安装NoteBook(python工具)</title>
    <link href="/2020/10/26/W10%E5%AE%89%E8%A3%85NoteBook-python%E5%B7%A5%E5%85%B7/"/>
    <url>/2020/10/26/W10%E5%AE%89%E8%A3%85NoteBook-python%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="安装NoteBook"><a href="#安装NoteBook" class="headerlink" title="安装NoteBook"></a>安装NoteBook</h1><h2 id="1-找到Python的安装目录下的Scripts文件夹，并打开。我们需要用到这里的pip插件来下载jupyter"><a href="#1-找到Python的安装目录下的Scripts文件夹，并打开。我们需要用到这里的pip插件来下载jupyter" class="headerlink" title="1.找到Python的安装目录下的Scripts文件夹，并打开。我们需要用到这里的pip插件来下载jupyter"></a>1.找到Python的安装目录下的Scripts文件夹，并打开。我们需要用到这里的pip插件来下载jupyter</h2><span id="more"></span><p><img src="/myimages/20200901172010485.png" alt="在这里插入图片描述"></p><h2 id="2-打开命令提示符，打开上述文件夹输入指令："><a href="#2-打开命令提示符，打开上述文件夹输入指令：" class="headerlink" title="2.打开命令提示符，打开上述文件夹输入指令："></a>2.打开命令提示符，打开上述文件夹输入指令：</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">pip install jupyter notebook<br></code></pre></td></tr></table></figure><p><img src="/myimages/20200901173615792.png" alt="在这里插入图片描述"><br>然后静待安装</p><h2 id="3-打开notebook"><a href="#3-打开notebook" class="headerlink" title="3.打开notebook:"></a>3.打开notebook:</h2><p>在命令提示窗口当前路径下输入命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">jupyter notebook<br></code></pre></td></tr></table></figure><p>** 把上述文件路径添加至环境变量，在命令窗口任意路径都可以运行该命令<br>运行 notebook时不要关闭终端，因为关闭终端口会断开网页与本地的连接。**</p><p><img src="/myimages/20200901174435738.png" alt="在这里插入图片描述"></p><h2 id="4-新建文件：先点击网页右边New按钮，然后再点击Python3，即可新建文件"><a href="#4-新建文件：先点击网页右边New按钮，然后再点击Python3，即可新建文件" class="headerlink" title="4.新建文件：先点击网页右边New按钮，然后再点击Python3，即可新建文件"></a>4.新建文件：先点击网页右边New按钮，然后再点击Python3，即可新建文件</h2><p><img src="/myimages/20200901174604376.png" alt="在这里插入图片描述"></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="生成配置文件："><a href="#生成配置文件：" class="headerlink" title="生成配置文件："></a>生成配置文件：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">jupyter notebook --generate-config</span><br></code></pre></td></tr></table></figure><p>生成的配置文件默认是：C:\Users\Administrator.jupyter 下的 jupyter_notebook_config.py 文件<br><img src="/myimages/20200901180811372.png" alt="在这里插入图片描述"></p><h2 id="修改Jupyter-启动文件夹"><a href="#修改Jupyter-启动文件夹" class="headerlink" title="修改Jupyter 启动文件夹"></a>修改Jupyter 启动文件夹</h2><p>打开 <strong>jupyter_notebook_config.py</strong> 文件，搜索到 <strong>c.NotebookApp.notebook_dir</strong> 变量<br><img src="/myimages/20200901184247617.png" alt="在这里插入图片描述"><br>将其改为你希望的文件夹，注意把前面的#q去掉。重启服务。![在<img src="/myimages/20200901184352697.png" alt="在这里插入图片描述"></p><h2 id="使-Jupyter-显示多个输出"><a href="#使-Jupyter-显示多个输出" class="headerlink" title="使 Jupyter 显示多个输出"></a>使 Jupyter 显示多个输出</h2><p>运行代码即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> IPython.core.interactiveshell <span class="hljs-keyword">import</span> InteractiveShell<br>InteractiveShell.ast_node_interactivity = <span class="hljs-string">&quot;all&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/myimages/20200901184643903.png" alt="在这里插入图片描述"></p><h2 id="切换浏览器后无法进入"><a href="#切换浏览器后无法进入" class="headerlink" title="切换浏览器后无法进入"></a>切换浏览器后无法进入</h2><p><img src="/myimages/2020090118543239.png" alt="在这里插入图片描述"></p><p>在终端中找到token的值，然后输入到上面框中，点击Log in登陆即可。<br><img src="/myimages/20200901185253571.png" alt="在这里插入图片描述"></p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>选中单元，并切换到标记（markdown）状态，然后直接把图片粘贴到单元格中并运行即可</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>命令模式 (按键 Esc 开启)<br>Enter : 转入编辑模式<br><strong>Shift-Enter : 运行本单元，选中下个单元<br>Ctrl-Enter : 运行本单元<br>Alt-Enter : 运行本单元，在其下插入新单元</strong><br><strong>Y : 单元转入代码状态<br>M :单元转入markdown状态<br>R : 单元转入raw状态</strong><br>1 : 设定 1 级标题<br>2 : 设定 2 级标题<br>3 : 设定 3 级标题<br>4 : 设定 4 级标题<br>5 : 设定 5 级标题<br>6 : 设定 6 级标题<br>Up : 选中上方单元<br>K : 选中上方单元<br>Down : 选中下方单元<br>J : 选中下方单元<br>Shift-K : 扩大选中上方单元<br>Shift-J : 扩大选中下方单元<br><strong>A : 在上方插入新单元<br>B : 在下方插入新单元</strong><br>X : 剪切选中的单元<br>C : 复制选中的单元<br>Shift-V : 粘贴到上方单元<br>V : 粘贴到下方单元<br>Z : 恢复删除的最后一个单元<br><strong>D : 删除选中的单元</strong><br>Shift-M : 合并选中的单元<br>Ctrl-S : 文件存盘<br>S : 文件存盘<br>L : 转换行号<br>O : 转换输出<br>Shift-O : 转换输出滚动<br>Esc : 关闭页面<br>Q : 关闭页面<br>H : 显示快捷键帮助<br>I,I : 中断Notebook内核<br>0,0 : 重启Notebook内核<br>Shift : 忽略<br>Shift-Space : 向上滚动<br>Space : 向下滚动</p><p>编辑模式 ( Enter 键启动)<br><strong>Tab : 代码补全或缩进</strong><br>Shift-Tab : 提示<br>Ctrl-] : 缩进<br>Ctrl-[ : 解除缩进<br>Ctrl-A : 全选<br>Ctrl-Z : 复原<br>Ctrl-Shift-Z : 再做<br>Ctrl-Y : 再做<br>Ctrl-Home : 跳到单元开头<br>Ctrl-Up : 跳到单元开头<br>Ctrl-End : 跳到单元末尾<br>Ctrl-Down : 跳到单元末尾<br>Ctrl-Left : 跳到左边一个字首<br>Ctrl-Right : 跳到右边一个字首<br>Ctrl-Backspace : 删除前面一个字<br>Ctrl-Delete : 删除后面一个字<br>Esc : 进入命令模式<br>Ctrl-M : 进入命令模式<br>Shift-Enter : 运行本单元，选中下一单元<br>Ctrl-Enter : 运行本单元<br>Alt-Enter : 运行本单元，在下面插入一单元<br>Ctrl-Shift– : 分割单元<br>Ctrl-Shift-Subtract : 分割单元<br>Ctrl-S : 文件存盘<br>Shift : 忽略<br>Up : 光标上移或转入上一单元<br>Down :光标下移或转入下一单元</p>]]></content>
    
    
    <categories>
      
      <category>python3基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NoteBook</tag>
      
      <tag>python3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux(centos7)安装python3</title>
    <link href="/2020/10/26/linux-centos7-%E5%AE%89%E8%A3%85python3/"/>
    <url>/2020/10/26/linux-centos7-%E5%AE%89%E8%A3%85python3/</url>
    
    <content type="html"><![CDATA[<h1 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">wget</span> https://www.python.org/ftp/python/<span class="hljs-number">3.7</span>.<span class="hljs-number">9</span>/Python<span class="hljs-literal">-3</span>.<span class="hljs-number">7.9</span>.tar.xz<br></code></pre></td></tr></table></figure><p><img src="/myimages/2020092220094447.png" alt="在这里插入图片描述"><br>也可以下载其他版本的，下载地址：<a href="https://www.python.org/ftp/python/">https://www.python.org/ftp/python/</a><br>linux下要下载以**.tar.xz**结尾的</p><span id="more"></span><h1 id="2-解压文件"><a href="#2-解压文件" class="headerlink" title="2.解压文件"></a>2.解压文件</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">tar <span class="hljs-literal">-xvf</span> Python<span class="hljs-literal">-3</span>.<span class="hljs-number">7.9</span>.tar.xz<br></code></pre></td></tr></table></figure><p>解压完成后在当前目录下就多出了<strong>Python-3.7.9</strong>文件夹<br><img src="/myimages/20200922201229239.png" alt="在这里插入图片描述"></p><h1 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h1><h2 id="安装python依赖，运行命令："><a href="#安装python依赖，运行命令：" class="headerlink" title="安装python依赖，运行命令："></a>安装python依赖，运行命令：</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">yum <span class="hljs-literal">-y</span> install zlib<span class="hljs-literal">-devel</span> bzip2<span class="hljs-literal">-devel</span> openssl<span class="hljs-literal">-devel</span> ncurses<span class="hljs-literal">-devel</span> sqlite<span class="hljs-literal">-devel</span> readline<span class="hljs-literal">-devel</span> tk<span class="hljs-literal">-devel</span> gdbm<span class="hljs-literal">-devel</span> db4<span class="hljs-literal">-devel</span> libpcap<span class="hljs-literal">-devel</span> xz<span class="hljs-literal">-devel</span><br></code></pre></td></tr></table></figure><h2 id="进入python文件夹"><a href="#进入python文件夹" class="headerlink" title="进入python文件夹"></a>进入python文件夹</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> Python<span class="hljs-literal">-3</span>.<span class="hljs-number">7.9</span><br></code></pre></td></tr></table></figure><h2 id="指定安装路径："><a href="#指定安装路径：" class="headerlink" title="指定安装路径："></a>指定安装路径：</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">./configure <span class="hljs-literal">--prefix</span>=/root/local/python37<br></code></pre></td></tr></table></figure><h2 id="安装python，运行命令："><a href="#安装python，运行命令：" class="headerlink" title="安装python，运行命令："></a>安装python，运行命令：</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h2 id="建立python3和pip3的软连接（相当于添加快捷方式）"><a href="#建立python3和pip3的软连接（相当于添加快捷方式）" class="headerlink" title="建立python3和pip3的软连接（相当于添加快捷方式）"></a>建立python3和pip3的软连接（相当于添加快捷方式）</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ln <span class="hljs-literal">-s</span> /root/local/python37/bin/python3.<span class="hljs-number">7</span> /usr/bin/python3<br>ln <span class="hljs-literal">-s</span> /root/local/python37/bin/pip3 /usr/bin/pip3<br></code></pre></td></tr></table></figure><p><img src="/myimages/20200922203033477.png" alt="在这里插入图片描述"></p><h2 id="运行pip3和python3"><a href="#运行pip3和python3" class="headerlink" title="运行pip3和python3"></a>运行pip3和python3</h2><p><img src="/myimages/20200922203207610.png" alt="在这里插入图片描述"><br><img src="/myimages/20200922203221290.png" alt="在这里插入图片描述"></p><p>只要不报错即安装成功。</p>]]></content>
    
    
    <categories>
      
      <category>python3基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>python3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>W10向linux服务器传文件</title>
    <link href="/2020/10/26/W10%E5%90%91linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <url>/2020/10/26/W10%E5%90%91linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、上传目录到linux服务器上"><a href="#一、上传目录到linux服务器上" class="headerlink" title="一、上传目录到linux服务器上"></a>一、上传目录到linux服务器上</h1><span id="more"></span><p>其中 <strong>C:\Users\Administrator\PycharmProjects\Text</strong> 目录的路径<br><strong>root</strong> 是服务器用户名<br><strong>10.32.77.1</strong> 是服务器ip地址<br>~  是上传到服务器的~目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">scp -r C:\Users\Administrator\PycharmProjects\Text root@10.32.77.1:~<br></code></pre></td></tr></table></figure><h1 id="二、上传文件到linux服务器上"><a href="#二、上传文件到linux服务器上" class="headerlink" title="二、上传文件到linux服务器上"></a>二、上传文件到linux服务器上</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">scp C:\Users\Administrator\PycharmProjects\Text\requirements.txt root@10.32.77.1:~<br></code></pre></td></tr></table></figure><p>连接成功后还会提示输入用户密码（输入时不显示）。</p><h1 id="三、删除远程连接-ssh-密钥"><a href="#三、删除远程连接-ssh-密钥" class="headerlink" title="三、删除远程连接 ssh 密钥"></a>三、删除远程连接 ssh 密钥</h1><ul><li>一般用于远程服务器重装系统后，再次连接报错问题</li><li>10.32.77.35 是远程服务器IP<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">ssh-keygen -R 10.32.77.35<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java1.8新特性（Lambda 表达式和函数式接口）</title>
    <link href="/2020/10/26/Java1.8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2020/10/26/Java1.8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Lambda表达式和函数式接口"><a href="#一、Lambda表达式和函数式接口" class="headerlink" title="一、Lambda表达式和函数式接口"></a>一、Lambda表达式和函数式接口</h1><h2 id="1-Lambda-表达式举例"><a href="#1-Lambda-表达式举例" class="headerlink" title="1.Lambda 表达式举例"></a>1.Lambda 表达式举例</h2><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><span id="more"></span><p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p><ul><li>lambda语法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">(parameters) -&gt; expression<br>或<br>(parameters) -&gt;&#123; statements; &#125;<br></code></pre></td></tr></table></figure></li></ul><ol><li>可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。</li><li>可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li>可选的大括号：如果主体包含了一个语句，就不需要使用大括号。</li><li>可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li></ol><h3 id="举例使用-Lambda-表达式排序"><a href="#举例使用-Lambda-表达式排序" class="headerlink" title="举例使用 Lambda 表达式排序"></a>举例使用 Lambda 表达式排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; intArray = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">111</span>);<br><span class="hljs-comment">//从小到大排序</span><br>intArray.sort((x,y) -&gt; x-y);<br>System.out.println(intArray);<br><span class="hljs-comment">//从大到小排序</span><br>intArray.sort((x,y) -&gt; y-x);<br>System.out.println(intArray);<br></code></pre></td></tr></table></figure><h2 id="2-函数式接口举例"><a href="#2-函数式接口举例" class="headerlink" title="2. 函数式接口举例"></a>2. 函数式接口举例</h2><blockquote><p>Predicate <T> 接口的使用：它是接受一个输入参数 T，返回一个布尔值结果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>);<br>    System.out.println(<span class="hljs-string">&quot;输出所有偶数:&quot;</span>);<br>    print(list, n-&gt; n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span> );<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> &#123;<br>    <span class="hljs-keyword">for</span>(Integer n: list) &#123;<br>        <span class="hljs-keyword">if</span>(predicate.test(n)) &#123;<br>            System.out.print(n + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、接口的默认方法和静态方法"><a href="#二、接口的默认方法和静态方法" class="headerlink" title="二、接口的默认方法和静态方法"></a>二、接口的默认方法和静态方法</h1><p><strong>默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。</strong></p><blockquote><p>目的：解决接口的修改与现有的实现不兼容的问题。</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>默认方法语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>   <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;我是一辆车!&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="静态默认方法"><a href="#静态默认方法" class="headerlink" title="静态默认方法"></a>静态默认方法</h2><p>Java 8 的另一个特性是接口可以声明（并且可以提供实现）静态方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>   <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;我是一辆车!&quot;</span>);<br>   &#125;<br>    <span class="hljs-comment">// 静态方法</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">blowHorn</span><span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;按喇叭!!!&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java类中修饰符的区别</title>
    <link href="/2020/10/26/Java%E7%B1%BB%E4%B8%AD%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/10/26/Java%E7%B1%BB%E4%B8%AD%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>Java类中修饰符分为：public、protected、default、private</p><span id="more"></span><h1 id="一、不同修饰符在不同情况下的区别"><a href="#一、不同修饰符在不同情况下的区别" class="headerlink" title="一、不同修饰符在不同情况下的区别"></a>一、不同修饰符在不同情况下的区别</h1><table><thead><tr><th>作用域</th><th>当前类</th><th>同一包</th><th>子类</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><blockquote><p>在普通类中如果不加修饰则默认为<code>default</code>修饰</p></blockquote><h1 id="二、接口中的修饰符："><a href="#二、接口中的修饰符：" class="headerlink" title="二、接口中的修饰符："></a>二、接口中的修饰符：</h1><p><code>我们建议不要给接口中的抽象方法和变量添加修饰符</code></p><p>编译器对于接口中的方法使用<code>public abstract </code>修饰为公共抽象的方法，对于变量使用<code>public static final </code>修饰为公共静态不可改变的常量。</p><h2 id="也就是下列两种定义接口的方式是等价的"><a href="#也就是下列两种定义接口的方式是等价的" class="headerlink" title="也就是下列两种定义接口的方式是等价的**"></a>也就是下列两种定义接口的方式是等价的**</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Dao</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dao&quot;</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print_name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>等价于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Dao</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dao&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print_name</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2020/09/27/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/09/27/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><span id="more"></span><h1 id="一、-首次使用"><a href="#一、-首次使用" class="headerlink" title="一、 首次使用"></a>一、 首次使用</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置用户信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global user.name <span class="hljs-string">&quot;John Doe&quot;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global user.email johndoe@example.com</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化 Git 本地仓库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git init</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># 可选，若初始化了本地仓库则跳过</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用命令 git add [-A]是开始跟踪一个文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add [-A]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用命令 git add . 是跟踪所有文件</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add .</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检查当前文件状态</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status -s</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交更新到仓库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -m <span class="hljs-string">&quot;本次提交的描述信息&quot;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加远程仓库,&lt;url&gt;是远程仓库地址。</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote add origin &lt;url&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程仓库  ，origin 是远程仓库名称</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote <span class="hljs-built_in">rm</span> origin</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改远程仓库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote set-url origin &lt;url&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">推送到远程仓库</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin master</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程仓库信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote -v</span><br><br></code></pre></td></tr></table></figure><p><strong>至此一个初步的项目完成</strong></p><h1 id="二、分支管理"><a href="#二、分支管理" class="headerlink" title="二、分支管理"></a>二、分支管理</h1><p>使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>有人把 Git 的分支模型称为<strong>必杀技特性</strong>，而正是因为它，将 <strong>Git</strong> 从版本控制系统家族里区分出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建并切换分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -b 分支名</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">仅创建</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch 分支名</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout 分支名</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">合并分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git merge 分支名</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除未合并分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -D 分支名</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除已合并分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -d 分支名</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前分支</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有分支的信息</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git branch -a</span><br><br></code></pre></td></tr></table></figure><h1 id="三、Git基础-常用命令"><a href="#三、Git基础-常用命令" class="headerlink" title="三、Git基础-常用命令"></a>三、Git基础-常用命令</h1><p><strong>1. 检查当前文件状态</strong></p><p>可以用 git status 命令查看哪些文件处于什么状态：已跟踪 或 未跟踪</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status</span><br></code></pre></td></tr></table></figure><p><strong>2. 简洁输出</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git status -s</span><br></code></pre></td></tr></table></figure><p><strong>3. 跟踪新文件并让其处于暂存状态</strong></p><p>使用命令 git add 开始跟踪一个文件。 所以，要跟踪 README 文件，运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git add README</span><br></code></pre></td></tr></table></figure><p><strong>5. 查看已暂存和未暂存的修改</strong></p><p>要查看尚未暂存的文件更新了哪些部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git diff</span><br></code></pre></td></tr></table></figure><p>查看已暂存的将要添加到下次提交里的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git diff --staged</span><br></code></pre></td></tr></table></figure><p><strong>6. 忽略文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> filename</span><br></code></pre></td></tr></table></figure><p><strong>7.跳过使用暂存区域</strong></p><p>Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git commit -a -m <span class="hljs-string">&#x27;提交信息&#x27;</span></span><br></code></pre></td></tr></table></figure><p><strong>8. 从暂存区域移除文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">rm</span> --cached PROJECTS.md</span><br></code></pre></td></tr></table></figure><p><strong>9. 查看远程仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote -v</span><br></code></pre></td></tr></table></figure><p><strong>10. 添加远程仓库</strong></p><p>运行 git remote add <shortname> <url> 添加一个新的远程 Git 仓库，同时指定一个方便使用的简写：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote</span><br>origin<br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote add pb https://github.com/paulboone/ticgit</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git remote -v</span><br>originhttps://github.com/schacon/ticgit (fetch)<br>originhttps://github.com/schacon/ticgit (push)<br>pbhttps://github.com/paulboone/ticgit (fetch)<br>pbhttps://github.com/paulboone/ticgit (push)<br></code></pre></td></tr></table></figure><p><strong>11. 从远程仓库中抓取与拉取</strong></p><p>这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git fetch origin</span><br></code></pre></td></tr></table></figure><p><strong>12. 推送到远程仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git push origin master</span><br></code></pre></td></tr></table></figure><p><strong>13. 查看提交历史</strong></p><p>–stat 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> [--<span class="hljs-built_in">stat</span>]</span><br></code></pre></td></tr></table></figure><p><strong>14. 打标签</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git tag -a v1.4 -m <span class="hljs-string">&quot;my version 1.4&quot;</span></span><br></code></pre></td></tr></table></figure><p><strong>15. 检查配置信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --list</span><br></code></pre></td></tr></table></figure><p><strong>16. 获取帮助</strong></p><p><strong>查询Git命令的三种等价方法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">help</span> &lt;verb&gt;</span>   <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git &lt;verb&gt; --<span class="hljs-built_in">help</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">man git-&lt;verb&gt;</span><br></code></pre></td></tr></table></figure><h1 id="git命令思维导图"><a href="#git命令思维导图" class="headerlink" title="git命令思维导图"></a>git命令思维导图</h1><p><img src="/myimages/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地电脑搭建成linux服务器</title>
    <link href="/2020/09/22/%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E6%90%AD%E5%BB%BA%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2020/09/22/%E6%9C%AC%E5%9C%B0%E7%94%B5%E8%84%91%E6%90%AD%E5%BB%BA%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>说明：我这里用的是一台实验室的电脑充当服务器。选择linux的原因是因为现在的服务器都是Linux系统的且相对于Win10速度快，  选择CentOS的GUI图形界面，操作相对简单，门槛较低。</p></blockquote><h1 id="1：下载VMware虚拟机，安装CentOS系统"><a href="#1：下载VMware虚拟机，安装CentOS系统" class="headerlink" title="1：下载VMware虚拟机，安装CentOS系统"></a>1：下载VMware虚拟机，安装CentOS系统</h1><span id="more"></span><p><a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">vmware下载地址</a></p><h2 id="1-1：下载完成后激活。随便去网上搜一下自己虚拟机对应版本的激活码即可，我这放几个我找到的激活码。"><a href="#1-1：下载完成后激活。随便去网上搜一下自己虚拟机对应版本的激活码即可，我这放几个我找到的激活码。" class="headerlink" title="1-1：下载完成后激活。随便去网上搜一下自己虚拟机对应版本的激活码即可，我这放几个我找到的激活码。"></a>1-1：下载完成后激活。随便去网上搜一下自己虚拟机对应版本的激活码即可，我这放几个我找到的激活码。</h2><p><strong>vmware14:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">FF31K</span>-AHZD1-H8ETZ-<span class="hljs-number">8</span>WWEZ-WUUVA<br><span class="hljs-attribute">CV7T2</span>-<span class="hljs-number">6</span>WY5Q-<span class="hljs-number">48</span>EWP-ZXY7X-QGUWD<br></code></pre></td></tr></table></figure><p><strong>vmware15:</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">VZ182</span>-<span class="hljs-number">0</span>NDE6-<span class="hljs-number">0817</span>Y-KMMZZ-YKAC4<br><span class="hljs-attribute">ZC75R</span>-<span class="hljs-number">0</span>YW5P-H809Y-QYWQZ-NZ8G8<br><span class="hljs-attribute">ZV7XK</span>-<span class="hljs-number">02</span>D56-<span class="hljs-number">480</span>JZ-ENZEX-YF8XD<br><span class="hljs-attribute">YC588</span>-FTDDL-H852Y-UXYGE-YZKE2<br></code></pre></td></tr></table></figure><h2 id="1-2：下载CentOS系统"><a href="#1-2：下载CentOS系统" class="headerlink" title="1-2：下载CentOS系统"></a>1-2：下载CentOS系统</h2><p><a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">阿里云镜像下载地址</a>（速度快）<br>选择其中的  <strong>CentOS-7-x86_64-DVD-2003.iso</strong>   下载。<br>下载完成后用  <strong>VMware</strong>  创建新的虚拟机   <strong>（虚拟机的路径建议放在非系统盘，因为要占用很多的存储空间）</strong><br>CentOS安装时软件选择带GUI的服务器界面，这样会自动安装很多工具，例如：Java-jdk1.8、wget、python2等。省事。</p><h1 id="第二步：搭建服务器环境"><a href="#第二步：搭建服务器环境" class="headerlink" title="第二步：搭建服务器环境"></a>第二步：搭建服务器环境</h1><p>下载tomcat服务器</p><p>1.切换至目录src下面（如果没有就看一下当前用户是否为管理员root）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> /usr/local/src<br></code></pre></td></tr></table></figure><p>2.用wget命令下载tomcat</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">wget</span> https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat<span class="hljs-literal">-8</span>/v8.<span class="hljs-number">5.57</span>/bin/apache<span class="hljs-literal">-tomcat-8</span>.<span class="hljs-number">5.57</span>.tar.gz<br></code></pre></td></tr></table></figure><p>&gt;如果http连接失效，说明资源更换了，可以用浏览器打开  <strong><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat">https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat</a></strong>  下找到对应的tomcat文件夹-&gt;对应版本-&gt;bin文件-&gt;相应的以**.tar.gz**结尾的文件，然后把上述连接替换成该文件的下载链接</p><p>3.下载完成后解压到当前文件夹</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">tar <span class="hljs-literal">-zxvf</span> apache<span class="hljs-literal">-tomcat-8</span>.<span class="hljs-number">5.57</span>.tar.gz<br></code></pre></td></tr></table></figure><p>解压完成后输入<strong>ls</strong>查看当前目录文件<br>修改文件夹名称：<strong>mv apache-tomcat-8.5.57 tomcat8</strong><br>进入tomcat8文件下的bin文件夹：<strong>cd tomcat8/bin</strong><br><img src="/myimages/2020090720281262.png" alt="在这里插入图片描述"><br>启动服务器：**./startup.sh**<br><img src="/myimages/20200907202938802.png" alt="在这里插入图片描述"><br>4.打开服务器上的8080端口（因为tomcat服务默认端口就是8080）：<strong>firewall-cmd –zone=public –add-port=8080/tcp –permanent</strong><br>重载使其生效：<strong>firewall-cmd –reload</strong><br><img src="/myimages/20200907204001689.png" alt="在这里插入图片描述"><br>5.用浏览器访问你的<strong>IP:8080</strong>看到如下界面即证明端口开放完成，如果是本地访问：<strong><a href="http://localhost:8080/">http://localhost:8080</a></strong><br><img src="/myimages/20200907204429200.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下还原python项目的环境</title>
    <link href="/2020/09/22/linux%E4%B8%8B%E8%BF%98%E5%8E%9Fpython%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/09/22/linux%E4%B8%8B%E8%BF%98%E5%8E%9Fpython%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="1-打包当前Windows环境下的依赖"><a href="#1-打包当前Windows环境下的依赖" class="headerlink" title="1.打包当前Windows环境下的依赖"></a>1.打包当前Windows环境下的依赖</h1><p>打开cmd,随便的一个路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sell">pip freeze &gt;&gt; requirements.txt<br></code></pre></td></tr></table></figure><span id="more"></span><p><img src="/myimages/20200922203033476.png" alt="在这里插入图片描述"><br>打开目录即可看到该文件<br><img src="/myimages/20200922204133789.png" alt="在这里插入图片描述"></p><h1 id="2-上传文件到linux服务器"><a href="#2-上传文件到linux服务器" class="headerlink" title="2.上传文件到linux服务器"></a>2.上传文件到linux服务器</h1><p>在cmd下运行，保证路径和上面的一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sell">scp requirements.txt username@servername:/root/<br></code></pre></td></tr></table></figure><p>username 是服务的用户名</p><p>servername 是服务器IP</p><p>运行后还会提示输入密码。</p><h1 id="3-在linux上安装这些依赖"><a href="#3-在linux上安装这些依赖" class="headerlink" title="3.在linux上安装这些依赖"></a>3.在linux上安装这些依赖</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip3 install -r requirements.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python3基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>python3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySql解压版安装和配置</title>
    <link href="/2020/08/29/MySql%E8%A7%A3%E5%8E%8B%E7%89%88%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/08/29/MySql%E8%A7%A3%E5%8E%8B%E7%89%88%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="下载mysql免安装版，并解压"><a href="#下载mysql免安装版，并解压" class="headerlink" title="下载mysql免安装版，并解压"></a>下载mysql免安装版，并解压</h1><p><a href="https://dev.mysql.com/downloads/repo/yum/">MySQL官网：https://dev.mysql.com/downloads/repo/yum/</a></p><span id="more"></span><p><img src="/myimages/20200829211816726.png" alt="在这里插入图片描述"></p><h1 id="下载完成后在mysql的目录下创建my-ini文件（如果有就忽略这一步）"><a href="#下载完成后在mysql的目录下创建my-ini文件（如果有就忽略这一步）" class="headerlink" title="下载完成后在mysql的目录下创建my.ini文件（如果有就忽略这一步）"></a>下载完成后在mysql的目录下创建my.ini文件（如果有就忽略这一步）</h1><p><img src="/myimages/20200508160107998.png" alt="在这里插入图片描述"><br><strong>其中</strong></p><blockquote><p>basedir=E:\mysql-8.0.19-winx64</p></blockquote><p><strong>是自己mysql的安装目录</strong><br><strong>下一行的</strong></p><blockquote><p>datadir=E:\mysql-8.0.19-winx64\Data</p></blockquote><p><strong>也是同理</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">mysqld</span>]<br><span class="hljs-comment"># 设置3306端口</span><br>port=<span class="hljs-number">3306</span><br><span class="hljs-comment"># 设置mysql的安装目录</span><br>basedir=E:\mysql<span class="hljs-literal">-8</span>.<span class="hljs-number">0.19</span><span class="hljs-literal">-winx64</span><br><span class="hljs-comment"># 设置mysql数据库的数据的存放目录</span><br>datadir=E:\mysql<span class="hljs-literal">-8</span>.<span class="hljs-number">0.19</span><span class="hljs-literal">-winx64</span>\Data<br><span class="hljs-comment"># 允许最大连接数</span><br>max_connections=<span class="hljs-number">200</span><br><span class="hljs-comment"># 允许连接失败的次数。</span><br>max_connect_errors=<span class="hljs-number">10</span><br><span class="hljs-comment"># 服务端使用的字符集默认为utf8mb4</span><br>character<span class="hljs-literal">-set-server</span>=utf8mb4<br><span class="hljs-comment"># 创建新表时将使用的默认存储引擎</span><br>default<span class="hljs-literal">-storage-engine</span>=INNODB<br><span class="hljs-comment"># 默认使用“mysql_native_password”插件认证</span><br><span class="hljs-comment">#mysql_native_password</span><br>default_authentication_plugin=mysql_native_password<br>[<span class="hljs-type">mysql</span>]<br><span class="hljs-comment"># 设置mysql客户端默认字符集</span><br>default<span class="hljs-literal">-character-set</span>=utf8mb4<br>[<span class="hljs-type">client</span>]<br><span class="hljs-comment"># 设置mysql客户端连接服务端时默认使用的端口</span><br>port=<span class="hljs-number">3306</span><br>default<span class="hljs-literal">-character-set</span>=utf8mb4<br></code></pre></td></tr></table></figure><h1 id="以管理员身份运行命令提示符："><a href="#以管理员身份运行命令提示符：" class="headerlink" title="以管理员身份运行命令提示符："></a>以管理员身份运行命令提示符：</h1><p><strong>运行命令：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">&gt; mysqld <span class="hljs-literal">--initialize</span> <span class="hljs-literal">--console</span><br>&gt; mysqld <span class="hljs-literal">--install</span><br>&gt; net <span class="hljs-built_in">start</span> mysql<br>&gt; mysql <span class="hljs-literal">-u</span> root <span class="hljs-literal">-p</span><br>&gt; 输入密码。。<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/myimages/20200829213039565.png" alt="在这里插入图片描述"></p><h1 id="修改数据库密码："><a href="#修改数据库密码：" class="headerlink" title="修改数据库密码："></a>修改数据库密码：</h1><p>root是用户名<br>‘123456’是新密码，注意密码要用引号<br><strong>运行命令：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mysql&gt; ALTER USER <span class="hljs-string">&#x27;root&#x27;</span><span class="hljs-string">@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong><br><img src="/myimages/2020042423432928.png" alt="在这里插入图片描述"></p><h1 id="建立自己的数据库-这里名为dataname"><a href="#建立自己的数据库-这里名为dataname" class="headerlink" title="建立自己的数据库(这里名为dataname)"></a>建立自己的数据库(这里名为dataname)</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> database dataname<br></code></pre></td></tr></table></figure><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> use dataname<br></code></pre></td></tr></table></figure><h1 id="MySQL批量执行sql文件，用户批量向数据库中注入数据："><a href="#MySQL批量执行sql文件，用户批量向数据库中注入数据：" class="headerlink" title="MySQL批量执行sql文件，用户批量向数据库中注入数据："></a>MySQL批量执行sql文件，用户批量向数据库中注入数据：</h1><p>mysqltest.sql是文件名，注意文件路径，也可以放在命令提示符的根目录下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mysql&gt;  source D:\mysqltest.sql<br></code></pre></td></tr></table></figure><h1 id="MySql-导出数据库"><a href="#MySql-导出数据库" class="headerlink" title="MySql 导出数据库"></a>MySql 导出数据库</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">root是用户名<br>curriculum是需要导出的数据库名<br>D:\curriculum.sql是导出到D盘的curriculu.sql文件中，也可以指定其他路径及文件名<br>最后要输入密码。<br></code></pre></td></tr></table></figure><p><img src="/myimages/2020082921515157.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-工厂模式</title>
    <link href="/2020/06/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、工厂模式"><a href="#一、工厂模式" class="headerlink" title="一、工厂模式"></a>一、工厂模式</h1><p>在工厂模式中，创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><p>在spring框架中就是使用工厂模式产生对象，屏蔽类的具体实现，降低代码间的耦合性。</p><span id="more"></span><h1 id="二、介绍"><a href="#二、介绍" class="headerlink" title="二、介绍"></a>二、介绍</h1><blockquote><p>工厂模式是定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。<br>当我们明确地计划不同条件下创建不同实例时。让其子类实现工厂接口，返回的也是一个抽象的产品。</p></blockquote><h2 id="举例："><a href="#举例：" class="headerlink" title="举例："></a><strong>举例：</strong></h2><ul><li>需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。 </li></ul><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h2><ul><li>1、一个调用者想创建一个对象，只要知道其名称就可以了。 </li><li>2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 </li><li>3、屏蔽产品的具体实现，调用者只关心产品的接口。</li></ul><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点：</strong></h2><ul><li>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</li></ul><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a><strong>注意事项：</strong></h2><ul><li>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。</li><li>复杂对象适合使用工厂模式。</li><li>简单对象尤其是是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。</li></ul><h1 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h1><p>首先创建一个 汽车类 接口，然后创建不同的实现 汽车 接口的类。下一步是定义工厂类 ShapeFactory。工厂类根据传入不同的参数来创建不同的对象。</p><p><img src="/myimages/202011051416.png" alt="在这里插入图片描述"></p><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h2><p>创建一个 汽车 接口，都需要重写名字方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">car</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">getname</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h2><p>创建三个实现汽车接口的类，分别是面包车类、火车类、自行车类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Van</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">car</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getname</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是一个面包车！！！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">train</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">car</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getname</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是一个火车！！！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">bicycle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">car</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getname</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是一个自行车&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h2><p>创建一个工厂类，用于生成不同的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShapeFactory</span> &#123;<br>    <span class="hljs-keyword">public</span> car <span class="hljs-title function_">getcar</span><span class="hljs-params">(String shapeType)</span>&#123;<br>        <span class="hljs-keyword">if</span>(shapeType == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;Van&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Van</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;train&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">train</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(shapeType.equalsIgnoreCase(<span class="hljs-string">&quot;bicycle&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">bicycle</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤 4"></a>步骤 4</h2><p>使用工厂获取相应的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">factory_Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建一个工厂</span><br>        <span class="hljs-type">ShapeFactory</span> <span class="hljs-variable">shapeFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShapeFactory</span>();<br>        <span class="hljs-comment">//从工厂中取一个Van面包车对象</span><br>        <span class="hljs-type">car</span> <span class="hljs-variable">car1</span> <span class="hljs-operator">=</span> shapeFactory.getcar(<span class="hljs-string">&quot;Van&quot;</span>);<br>        car1.getname();<br>        <span class="hljs-comment">//从工厂中取一个火车对象</span><br>        <span class="hljs-type">car</span> <span class="hljs-variable">car2</span> <span class="hljs-operator">=</span> shapeFactory.getcar(<span class="hljs-string">&quot;train&quot;</span>);<br>        car2.getname();<br>        <span class="hljs-comment">//从工厂中取一个自行车对象</span><br>        <span class="hljs-type">car</span> <span class="hljs-variable">car3</span> <span class="hljs-operator">=</span> shapeFactory.getcar(<span class="hljs-string">&quot;bicycle&quot;</span>);<br>        car3.getname();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java连接MySQL数据库</title>
    <link href="/2020/04/25/Java%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2020/04/25/Java%E8%BF%9E%E6%8E%A5MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="1-下载Java驱动"><a href="#1-下载Java驱动" class="headerlink" title="1 下载Java驱动"></a>1 下载Java驱动</h2><p>官网下载地址：<a href="https://dev.mysql.com/downloads/connector/j/" title="https://dev.mysql.com/downloads/connector/j/">https://dev.mysql.com/downloads/connector/j/</a><br>选择 <strong>PlatformIndependent</strong> 平台无关版本下的<strong>ZIP</strong>格式</p><span id="more"></span><p><img src="/myimages/20201027170106682.png" alt="在这里插入图片描述"><br>点击直接下载<br><img src="/myimages/20201027170230436.png" alt="在这里插入图片描述"></p><p>只需要 <strong>mysql-connector-java-****.jar</strong> 文件，把该文件放到固定的目录下<br>我是放在 mysql 根目录下。<br><img src="/myimages/20201027172347447.png" alt="在这里插入图片描述"></p><h2 id="2-导入驱动"><a href="#2-导入驱动" class="headerlink" title="2 导入驱动"></a>2 导入驱动</h2><p><strong>在eclipse中 右键项目–&gt;点击properties–&gt;点击左边Java Build Path–&gt;点击中间的Libraries–&gt;点击右边add External jars（为项目添加外部驱动–&gt;找到前面下载的驱动文件打开即可</strong></p><p><img src="/myimages/20201027173116697.png" alt="在这里插入图片描述"></p><h2 id="2-MySQL连接代码："><a href="#2-MySQL连接代码：" class="headerlink" title="2 MySQL连接代码："></a>2 MySQL连接代码：</h2><blockquote><p>参数设置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">db_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/USER?&quot;</span><br>    + <span class="hljs-string">&quot;useSSL=false&amp;serverTimezone=UTC&quot;</span>;表示连接数据库的方式<br>localhost:<span class="hljs-number">3306</span>是本地数据库地址和端口号<br>USER表示你的本地数据库名为USER<br>useSSL=<span class="hljs-literal">false</span>表示与服务器进行通信时是否使用SSL（真／假）。<br>serverTimezone=UTC表示设置时区为全球标准时间<br></code></pre></td></tr></table></figure><blockquote><p>连接代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mysql_Test</span> &#123;<br>    <span class="hljs-comment">// 版本：mysql  8.0</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">driverClass</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;  <br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">db_url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/USER?&quot;</span><br>    + <span class="hljs-string">&quot;useSSL=false&amp;serverTimezone=UTC&quot;</span>;<br>    <span class="hljs-comment">//用户名及密码</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">// 注册 JDBC 驱动</span><br>            Class.forName(driverClass);<br>        <br>            <span class="hljs-comment">// 打开链接</span><br>            System.out.println(<span class="hljs-string">&quot;连接数据库。。。&quot;</span>);<br>            conn = DriverManager.getConnection(db_url,user,password);<br>        <br>            <span class="hljs-comment">// 执行查询</span><br>            stmt = conn.createStatement();<br>            <br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM user&quot;</span>;<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br>        <br>            <span class="hljs-comment">// 展开结果集数据库</span><br>            <span class="hljs-keyword">while</span>(rs.next())&#123;<br>                <span class="hljs-comment">// 通过字段检索</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">id</span>  <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;password&quot;</span>);<br>                System.out.println(id + <span class="hljs-string">&quot;    &quot;</span>+name + <span class="hljs-string">&quot;    &quot;</span>+password);<br>            &#125;<br>            rs.close();<br>            stmt.close();<br>            conn.close();<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>        <span class="hljs-comment">//错误处理。。。</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-XML文件导入依赖"><a href="#3-XML文件导入依赖" class="headerlink" title="3 XML文件导入依赖"></a>3 XML文件导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/curriculum?useSSL=false<span class="hljs-symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区间相交问题——贪心</title>
    <link href="/2020/01/31/%E5%8C%BA%E9%97%B4%E7%9B%B8%E4%BA%A4%E9%97%AE%E9%A2%98-%E8%B4%AA%E5%BF%83/"/>
    <url>/2020/01/31/%E5%8C%BA%E9%97%B4%E7%9B%B8%E4%BA%A4%E9%97%AE%E9%A2%98-%E8%B4%AA%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定x 轴上n个闭区间。去掉尽可能少的闭区间，使剩下的闭区间都不相交。 给定n个闭区间，计算去掉的最少闭区间数。</p><span id="more"></span><p>Input<br>输入数据的第一行是正整数n（n≤100），表示闭区间数。接下来的n行中，每行有2 个整数，分别表示闭区间的2个数端点。<br>Output<br>将计算出的去掉的最少闭区间数输出<br>Sample Input</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">23</span><br><span class="hljs-symbol">12 </span><span class="hljs-number">28</span><br><span class="hljs-symbol">25 </span><span class="hljs-number">35</span><br><span class="hljs-symbol">27 </span><span class="hljs-number">80</span><br><span class="hljs-symbol">36 </span><span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ol><li>建一个结构体保存区间的左右端点，并且保证左端点不大于右端点</li><li>按照区间左端点从小到大排序</li><li>把区间从小到大按顺序依次放到数轴上，并且用一个变量m表示数轴上所有区间的最右侧，</li><li>如果要放置的区间左端点要大于m，说明放置区间后不会相交，则放置该区间，数轴上的区间数目 sum 加一。</li><li>最后要去掉的闭区间为总区间n减去数轴上放置的区间数sum,即<strong>n-sum</strong></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dot</span>&#123;<br>    <span class="hljs-type">int</span> l, r;<br>&#125;;<br><br>dot d[<span class="hljs-number">101</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(dot a,dot b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a.l&lt;b.l;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin&gt;&gt;d[i].l&gt;&gt;d[i].r;<br>        <span class="hljs-keyword">if</span>(d[i].l&gt;d[i].r)<br>            <span class="hljs-built_in">swap</span>(d[i].l, d[i].r);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(d,d + n,cmp);<br><span class="hljs-comment">//    for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="hljs-comment">//        cout&lt;&lt;d[i].l&lt;&lt;&quot;  &quot;&lt;&lt;d[i].r&lt;&lt;endl;</span><br><span class="hljs-comment">//    &#125;</span><br><br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> m = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (m&lt;d[i].l)&#123;<br>            sum ++;<br>            m = d[i].r;<br>        &#125;<br>    &#125;<br><br><br>    cout&lt;&lt;n - sum&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>只出现一次的数字—基础算法</title>
    <link href="/2020/01/31/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97%E2%80%94%E7%AE%97%E6%B3%95/"/>
    <url>/2020/01/31/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97%E2%80%94%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br>说明：<br>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><span id="more"></span><p>输入:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span><br><span class="hljs-attribute">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">1<br></code></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><ol><li>采用异或操作来求解</li><li>异或的性质是对于任意数a都满足 a⊕a = 0、 0⊕a = a 和 交换律</li><li>因此只需要对输入的每个数据进行异或运算即可得出唯一出现一次的数</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> *d = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin&gt;&gt;d[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        ret ^= d[i];<br>    &#125;<br>    cout&lt;&lt;ret&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java文件操作字符流、字节流</title>
    <link href="/2020/01/17/Java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81/"/>
    <url>/2020/01/17/Java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E6%B5%81%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="一、-字符流"><a href="#一、-字符流" class="headerlink" title="一、 字符流"></a>一、 字符流</h1><p>字符流主要是写入字符串的，在本地读写txt文件时常用。</p><span id="more"></span><h2 id="1-写文件"><a href="#1-写文件" class="headerlink" title="1.写文件"></a>1.写文件</h2><p>PrintWriter类有个好处，就是用法和标准输出函数特别相似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 把字符写入文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> * 2019年12月1日</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteFile</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-string">&quot;D:\\mzd.txt&quot;</span>);<br>output.print(<span class="hljs-string">&quot;hello!!!&quot;</span>);<br>output.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-读文件"><a href="#2-读文件" class="headerlink" title="2.读文件"></a>2.读文件</h2><p>字节流读文件使用已经封装好的Scanner多态技术来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.io.File;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadFile</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\mzd.txt&quot;</span>));<br><br><span class="hljs-keyword">while</span>(input.hasNext()) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> input.nextLine();<br>System.out.println(s);<br>&#125;<br>input.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、-字节流"><a href="#二、-字节流" class="headerlink" title="二、 字节流"></a>二、 字节流</h1><p><strong>以字节为单位读取文件，常用于读二进制   文件，如图片、声音、影像等文件。</strong></p><h2 id="1-写文件-1"><a href="#1-写文件-1" class="headerlink" title="1.写文件"></a>1.写文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 把字符写入文件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> * 2019年12月1日</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteFile</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;D:\\mzd.txt&quot;</span>);<br>output.write(<span class="hljs-string">&quot;hello!!!&quot;</span>.getBytes());<br>output.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-读文件-1"><a href="#2-读文件-1" class="headerlink" title="2.读文件"></a>2.读文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadFile</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;D:\\mzd.txt&quot;</span>);<br><span class="hljs-type">byte</span> []b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span>((len = input.read(b)) != -<span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b,<span class="hljs-number">0</span>,len);<br>System.out.println(s);<br>&#125;<br>input.close();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="3-网页下载图片"><a href="#3-网页下载图片" class="headerlink" title="3.网页下载图片"></a>3.网页下载图片</h2><p>字节流可以传输所有类型的文件。在网络上传输图片等文件常用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.DataInputStream;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 字节流下载一个网页上的图片，以此类推可下载视频等任何信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDownloadImage</span> &#123;<br><span class="hljs-comment">//图片网站</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">ImageUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://img9.doubanio.com/view/photo/m/public/p2574278284.jpg&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">ImageName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;南方车站&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []arg)</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(ImageUrl);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">filePar</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;image/&quot;</span>;<span class="hljs-comment">// 文件夹路径  </span><br>            <span class="hljs-type">File</span> <span class="hljs-variable">myPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>( filePar );<br>            <span class="hljs-keyword">if</span> (!myPath.exists())&#123;<br>            <span class="hljs-comment">//如果文件夹不存在则创建此文件夹</span><br>                myPath.mkdirs();  <br>            &#125;<br>            <br><span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(url.openStream());<br>FileOutputStream out=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePar + ImageName +<span class="hljs-string">&quot;.jpg&quot;</span>);<br><br><span class="hljs-type">byte</span>[] b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//缓冲区</span><br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//当前这一次读了多少个字节</span><br><span class="hljs-keyword">while</span>((len=input.read(b))!=-<span class="hljs-number">1</span>)&#123;<br>out.write(b,<span class="hljs-number">0</span>,len);<br>&#125;<br>out.close();<br>input.close();<br>System.out.println(ImageName + <span class="hljs-string">&quot;图片    下载完成！！！&quot;</span>);<br>            <br>        &#125;  <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>文件操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java新建目录（相对路径）</title>
    <link href="/2019/12/16/Java%E6%96%B0%E5%BB%BA%E7%9B%AE%E5%BD%95%EF%BC%88%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%EF%BC%89/"/>
    <url>/2019/12/16/Java%E6%96%B0%E5%BB%BA%E7%9B%AE%E5%BD%95%EF%BC%88%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="新建目录（相对路径）"><a href="#新建目录（相对路径）" class="headerlink" title="新建目录（相对路径）"></a>新建目录（相对路径）</h2><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">filePar</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;image/&quot;</span>;<span class="hljs-comment">// 文件夹路径  </span><br><span class="hljs-type">File</span> <span class="hljs-variable">myPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>( filePar );  <br><span class="hljs-keyword">if</span> (!myPath.exists())&#123;<span class="hljs-comment">//若此目录不存在，则创建之  </span><br><span class="hljs-comment">//myPath.mkdir();//创建此抽象路径名指定的目录。如果父目录不存在则创建不成功。</span><br>myPath.mkdirs();<span class="hljs-comment">//创建此抽象路径名指定的目录，包括所有必需但不存在的父目录。自动创建父目录</span><br>&#125;<br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>( filePar  + <span class="hljs-string">&quot;code.txt&quot;</span>); <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>文件操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java动态申请数组</title>
    <link href="/2019/11/30/Java%E5%8A%A8%E6%80%81%E7%94%B3%E8%AF%B7%E6%95%B0%E7%BB%84/"/>
    <url>/2019/11/30/Java%E5%8A%A8%E6%80%81%E7%94%B3%E8%AF%B7%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="JAVA动态申请数组"><a href="#JAVA动态申请数组" class="headerlink" title="JAVA动态申请数组"></a>JAVA动态申请数组</h2><p><strong>1.java中就只能用new来申请内存。相对C++有个好处是省了delete操作,回收内存由JVM自动完成。</strong><br><strong>2.java中区分可变类与不可变类，这两种申请动态内存的方式不同。</strong><br><strong>3.java中静态数组定义时与申请动态内存一致。</strong></p><span id="more"></span><h2 id="不可变类（int-double-String）"><a href="#不可变类（int-double-String）" class="headerlink" title="不可变类（int,double,String）"></a>不可变类（int,double,String）</h2><p><strong>不可变类除了这几个基本类型外，自己定义类也可以定义为不可变类需要加final修饰。</strong><br><strong>不可变类在申请多维数组时不需要手动遍历其每一个元素申请空间，由java虚拟机自动完成。</strong></p><blockquote><p>申请一个大小为 n=10 的一维数组<br><code>int n = 10;</code><br><code>int[]a = new int[n];</code></p></blockquote><blockquote><p>申请一个大小为n * n的二维数组<br><code>int[][]a = new int[n][n];</code></p></blockquote><blockquote><p>申请一个大小为n * n * n的二维数组<br><code>int[][][]a = new int[10][10][10];</code></p></blockquote><h2 id="可变类"><a href="#可变类" class="headerlink" title="可变类"></a>可变类</h2><p>一般自己定义的类都是可变类。可变类数组申请内存时比较繁琐，需要遍历数组然后对其每一个元素都进行实例化。</p><blockquote><p>申请一个大小为 n=10 的一维数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>My_class[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">My_class</span>[n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>a[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">My_class</span>();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 其他代码</span><br><span class="hljs-comment"> */</span><br><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">My_class</span> &#123;<br><span class="hljs-type">int</span> s;<br><span class="hljs-type">int</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>申请一个大小为n * n的二维数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>My_class[][] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">My_class</span>[n][n];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j&lt;n;j++)<br>a[i][j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">My_class</span>();<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 其他代码</span><br><span class="hljs-comment"> */</span><br><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">My_class</span> &#123;<br><span class="hljs-type">int</span> s;<br><span class="hljs-type">int</span> t;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>申请三维数组也是一样的逻辑。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01背包-动态规划</title>
    <link href="/2019/11/30/01%E8%83%8C%E5%8C%85-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2019/11/30/01%E8%83%8C%E5%8C%85-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>试设计一个用回溯法搜索子集空间树的函数。该函数的参数包括结点可行性判定函数和上界函数等必要的函数，并将此函数用于解 0-1 背包问题。 0-1 背包问题描述如下：给定 n 种物品和一个背包。物品 i 的重量是 wi ，其价值为 vi ，背包的容量为 C。应如何选择装入背包的物品，使得装入背包中物品的总价值最大? 在选择装入背包的物品时，对每种物品 i 只有 2 种选择，即装入背包或不装入背包。不能将物品 i 装入背包多次，也不能只装入部分的物品 i。</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行有 2 个正整数 n 和 c。n 是物品数，c 是背包的容量。接下来的 1 行中有 n 个正整数，表示物品的价值。第 3 行中有 n 个正整数，表示物品的重量。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>将计算出的装入背包物品的最大价值和最优装入方案输出。第一行输出为：Optimal value is</p><p>Sample Input</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Optimal</span> value is<br><span class="hljs-attribute">15</span><br><span class="hljs-attribute">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><h2 id="动态规划基本思想"><a href="#动态规划基本思想" class="headerlink" title="动态规划基本思想"></a>动态规划基本思想</h2><p><strong>如果能够保存已解决的子问题的答案，而在需要时再找出以求得的答案，就可以避免大量重复计算，从而得到多项式时间算法。为了达到这个目的，可以用一个表来记录所有已解决子问题的答案。不管子问题以后是否被用到，只要他被计算过就将其结果填入表中。</strong></p><h2 id="证明问题满足贪心选择性质和最优子结构性质"><a href="#证明问题满足贪心选择性质和最优子结构性质" class="headerlink" title="证明问题满足贪心选择性质和最优子结构性质"></a>证明问题满足贪心选择性质和最优子结构性质</h2><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p><code>m[i][j] = max(m[i-1][j], m[i-1][j-w[i]] + v[i]);</code></p><ul><li>m[i][j]表示背包容量为 j,可选择的物品为前 j 个物品时，01 背包问题的最优值。</li><li>第 i 个物品是否加入背包取决于：这个物品的价值 <strong>v[i]</strong> 加上背包加入该物品后剩余空间能装物品的价值 <strong>m[i-1]j-w[i]]</strong> 与不加该物品背包空间能装物品的价值 <strong>m[i-1][j]</strong> 谁大。</li><li>由于是从第一个物品开始求，所以每个物品不加前的最优解都知道答案。</li><li>traceback()函数中也是通过比较 <strong>m[i][j]</strong> 与 <strong>m[i-1][j]</strong> 是否相等来判断第 i 个物品是否被装进背包。</li></ul><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;<br><br><span class="hljs-type">int</span> v[N], w[N], x[N];<br><span class="hljs-type">int</span> m[N][N];<br><span class="hljs-type">int</span> c=<span class="hljs-number">0</span>, n=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        cin&gt;&gt;v[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        cin&gt;&gt;w[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>        &#123;<br>           <span class="hljs-keyword">if</span>(j&gt;=w[i])&#123;<br>               m[i][j] = <span class="hljs-built_in">max</span>(m[i<span class="hljs-number">-1</span>][j], m[i<span class="hljs-number">-1</span>][j-w[i]] + v[i]);<br>           &#125;<br>           <span class="hljs-keyword">else</span><br>               m[i][j] = m[i<span class="hljs-number">-1</span>][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">traceback</span>();<br><br>    cout&lt;&lt;<span class="hljs-string">&quot;Optimal value is&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;m[n][c]&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>        cout&lt;&lt;x[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    cout&lt;&lt;x[n]&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> k=c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span>(m[i][k] == m[i<span class="hljs-number">-1</span>][k])<br>            x[i]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span>&#123;<br>            x[i]=<span class="hljs-number">1</span>;<br>            k-=w[i];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最大子段和问题—分治</title>
    <link href="/2019/11/30/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E2%80%94%E5%88%86%E6%B2%BB/"/>
    <url>/2019/11/30/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E2%80%94%E5%88%86%E6%B2%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>给定有n个整数(可能为负整数)组成的序列a1,a2,…,an,求该序列连续的子段和的最大值。 如果该子段的所有元素和是负整数时定义其最大子段和为0。</p><span id="more"></span><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行有一个正整数n(n&lt;1000)，后面跟n个整数,绝对值都小于10000。直到文件结束。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出它的最大子段和。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span>-<span class="hljs-number">2</span> <span class="hljs-number">11</span> -<span class="hljs-number">4</span> <span class="hljs-number">13</span> -<span class="hljs-number">5</span> -<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">20<br></code></pre></td></tr></table></figure><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><h2 id="分支法基本思想"><a href="#分支法基本思想" class="headerlink" title="分支法基本思想"></a>分支法基本思想</h2><p>将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>对于数组的最大子段和问题，它最大子段要么在左半边，要么在右半边，要么是穿过中间，三种情况</li><li>每次把N个字段在中间分成两段用递归直至字段分解成长度为一时在返回数组下标对应的数</li><li>每次递归得到左半边和右半边的最大字段后再求穿过中间的情况对应的最大子段，三者取最大值</li></ol><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> *p;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<br>        <span class="hljs-keyword">return</span> p[r];<br>    <span class="hljs-type">int</span> mid = (l + r)/<span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> t1 = <span class="hljs-built_in">f</span>(l,mid);<br>    <span class="hljs-type">int</span> t2 = <span class="hljs-built_in">f</span>(mid+<span class="hljs-number">1</span>,r);<br><br>    <span class="hljs-type">int</span> maxl=<span class="hljs-number">0</span>,maxr=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=mid;i&gt;=l;i--)&#123;<br>        sum+=p[i];<br>        <span class="hljs-keyword">if</span>(sum&gt;maxl)<br>            maxl = sum;<br>    &#125;<br>    sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=mid+<span class="hljs-number">1</span>;i&lt;=r;i++)&#123;<br>        sum+=p[i];<br>        <span class="hljs-keyword">if</span>(sum&gt;maxr)<br>            maxr = sum;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(t1,t2),maxl+maxr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    p = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;p[i];<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-built_in">f</span>(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    cout&lt;&lt;res&lt;&lt;endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用最少数量的箭引爆气球-经典贪心</title>
    <link href="/2019/11/30/%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83-%E7%BB%8F%E5%85%B8%E8%B4%AA%E5%BF%83/"/>
    <url>/2019/11/30/%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83-%E7%BB%8F%E5%85%B8%E8%B4%AA%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。</p><p>一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">6</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">16</span> <span class="hljs-number">2</span> <span class="hljs-number">8</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">2<br></code></pre></td></tr></table></figure><p>解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球</p><p>注意测试数据</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">1</span><br>-<span class="hljs-number">2147483648</span> <span class="hljs-number">2147483647</span><br></code></pre></td></tr></table></figure><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><ol><li>首先按照气球尾部大小从小到大排序</li><li>循环开始从第一个气球的尾部射出一箭,即<code>k = b[i].end-1</code>;</li><li>然后从最后一个被射穿的气球后一个开始循环，即<code>b[i].start&gt;=k</code></li><li>这样能保证每次射穿的气球是最多的，即需要的弓箭是最少的。<h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Balloon</span>&#123;<br>    <span class="hljs-type">int</span> start,end;<br>&#125;;<br>Balloon *b;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Balloon t1,Balloon t2)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> t1.end&lt;t2.end;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    b = <span class="hljs-keyword">new</span> Balloon[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin&gt;&gt; b[i].start&gt;&gt;b[i].end;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(b,b+n,cmp);<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">-1</span>&lt;&lt;<span class="hljs-number">31</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(b[i].start&gt;=k)&#123;<br>            k = b[i].end<span class="hljs-number">-1</span>;<br>            sum++;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;sum&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>骨牌铺方格-递归</title>
    <link href="/2019/11/30/%E9%AA%A8%E7%89%8C%E9%93%BA%E6%96%B9%E6%A0%BC-%E9%80%92%E5%BD%92/"/>
    <url>/2019/11/30/%E9%AA%A8%E7%89%8C%E9%93%BA%E6%96%B9%E6%A0%BC-%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>在2×n的一个长方形方格中,用一个1× 2的骨牌铺满方格,输入n ,输出铺放方案的总数. 例如n=3时,为2× 3方格，骨牌的铺放方案有三种。</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入数据由多行组成，每行包含一个整数n,表示该测试实例的长方形方格的规格是2×n (0&lt; n&lt;=50)。此题用long long</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每个测试实例，请输出铺放方案的总数，每个实例的输出占一行。</p><p>Sample Input</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>3<br>2<br></code></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>3<br>2<br></code></pre></td></tr></table></figure><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><ul><li>用一个足够大的数组存每次求得的最优解</li><li>每次需要用时先去数组中找是否有这个的最优解</li><li>如果有则直接返回这个最优解，如果没有则求出最优解并保存到数组中</li></ul><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">long</span> a[<span class="hljs-number">51</span>];<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">return</span> n;<br>    <span class="hljs-keyword">if</span>(a[n<span class="hljs-number">-1</span>] == <span class="hljs-number">0</span>)<br>        a[n<span class="hljs-number">-1</span>]=<span class="hljs-built_in">f</span>(n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">if</span>(a[n<span class="hljs-number">-2</span>] == <span class="hljs-number">0</span>)<br>        a[n<span class="hljs-number">-2</span>]=<span class="hljs-built_in">f</span>(n<span class="hljs-number">-2</span>);<br><br>    a[n]=a[n<span class="hljs-number">-1</span>]+a[n<span class="hljs-number">-2</span>];<br>    <span class="hljs-keyword">return</span> a[n];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (cin&gt;&gt;n)&#123;<br>        cout&lt;&lt;<span class="hljs-built_in">f</span>(n)&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程实例</title>
    <link href="/2019/11/24/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E4%BE%8B/"/>
    <url>/2019/11/24/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Thread-类的方法"><a href="#1-Thread-类的方法" class="headerlink" title="1 Thread 类的方法"></a>1 Thread 类的方法</h2><p>序号    方法描述<br>1    <strong>public void start()</strong> 使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</p><p>2    <strong>public void run()</strong> 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。<br>3    <strong>public final void setName(String name)</strong> 改变线程名称，使之与参数 name 相同。<br>4    <strong>public final void setPriority(int priority)</strong>  更改线程的优先级。<br>5    <strong>public final void setDaemon(boolean on)</strong> 将该线程标记为守护线程或用户线程。<br>6    <strong>public final void join(long millisec)</strong> 等待该线程终止的时间最长为 millis 毫秒。<br>7    <strong>public void interrupt()</strong> 中断线程。<br>8    <strong>public final boolean isAlive()</strong> 测试线程是否处于活动状态。</p><span id="more"></span><p><strong>用户线程：无论主线线程是否结束，用户线程都会跑完。非用户线程在主线程跑完后会自动终止</strong></p><h2 id="2-通过实现-Runnable-接口方式，实现多线程"><a href="#2-通过实现-Runnable-接口方式，实现多线程" class="headerlink" title="2 通过实现 Runnable 接口方式，实现多线程"></a>2 通过实现 Runnable 接口方式，实现多线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过实现接口方式，实现多线程</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadConuer</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintString</span>(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">1000</span>));<br>    t.setDaemon(<span class="hljs-literal">true</span>);<span class="hljs-comment">//用户线程</span><br>    t.setName(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//修改线程名字</span><br>t.start();<br>&#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印字符串n次</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintString</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PrintString</span> <span class="hljs-params">(String s,<span class="hljs-type">int</span> n)</span>&#123;<br>str = s;<br><span class="hljs-built_in">this</span>.n = n;<br>&#125;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>          System.out.println(str);<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="3-通过继承-Thread-类，实现多线程"><a href="#3-通过继承-Thread-类，实现多线程" class="headerlink" title="3 通过继承 Thread 类，实现多线程"></a>3 通过继承 Thread 类，实现多线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  通过继承方法。实现多线程</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadInherit</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintString2</span>(<span class="hljs-string">&quot;Hello&quot;</span>,<span class="hljs-number">1000</span>);<br>    t.setDaemon(<span class="hljs-literal">true</span>);<span class="hljs-comment">//用户线程</span><br>    t.setName(<span class="hljs-string">&quot;hello&quot;</span>);<span class="hljs-comment">//修改线程名字</span><br>t.start();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印字符串n次</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintString2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">PrintString2</span> <span class="hljs-params">(String s,<span class="hljs-type">int</span> n)</span>&#123;<br>str = s;<br><span class="hljs-built_in">this</span>.n = n;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>          System.out.println(str);<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="4-使用-Runnable-和-Thread-共同创建进程。"><a href="#4-使用-Runnable-和-Thread-共同创建进程。" class="headerlink" title="4 使用 Runnable 和 Thread 共同创建进程。"></a>4 使用 Runnable 和 Thread 共同创建进程。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CSA01</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-type">Runnable</span> <span class="hljs-variable">increment</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++) &#123;<br><span class="hljs-keyword">synchronized</span> (CSA01.class) &#123;<br>i ++;<br>&#125;<br>&#125;<br>&#125;;<br>List&lt;Thread&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++) &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(increment);<br>t.start();<br>list.add(t);<br>&#125;<br><span class="hljs-keyword">for</span>(Thread t: list) &#123;<br>t.join();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>n皇后问题--回溯法</title>
    <link href="/2019/11/08/n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98-%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    <url>/2019/11/08/n%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98-%E5%9B%9E%E6%BA%AF%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题简介"><a href="#一、问题简介" class="headerlink" title="一、问题简介"></a>一、问题简介</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在n×n 格的棋盘上放置彼此不受攻击的n 个皇后。按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。n后问题等价于在n×n格的棋盘上放置n个皇后，任何2 个皇后不放在同一行或同一列或同一斜线上。 设计一个解n 后问题的队列式分支限界法，计算在n× n个方格上放置彼此不受攻击的n个皇后的一个放置方案。</p><span id="more"></span><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入数据只占一行，有1 个正整数n，n≤20。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>将计算出的彼此不受攻击的n个皇后的一个放置方案输出。第1行是n个皇后的放置方案。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h1 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h1><h2 id="回溯法解的生成"><a href="#回溯法解的生成" class="headerlink" title="回溯法解的生成"></a>回溯法解的生成</h2><p>回溯法对任一解的生成，一般都采用逐步扩大解的方式。每前进一步，都试图在当前部分解的基础上扩大该部分解。它在问题的状态空间树中，从开始结点（根结点）出发，以深度优先搜索整个状态空间。这个开始结点成为活结点，同时也成为当前的扩展结点。在当前扩展结点处，搜索向纵深方向移至一个新结点。这个新结点成为新的活结点，并成为当前扩展结点。如果在当前扩展结点处不能再向纵深方向移动，则当前扩展结点就成为死结点。此时，应往回移动（回溯）至最近的活结点处，并使这个活结点成为当前扩展结点。回溯法以这种工作方式递归地在状态空间中搜索，直到找到所要求的解或解空间中已无活结点时为止。</p><h2 id="回溯法与穷举法"><a href="#回溯法与穷举法" class="headerlink" title="回溯法与穷举法"></a>回溯法与穷举法</h2><p>回溯法与穷举法有某些联系，它们都是基于试探的。穷举法要将一个解的各个部分全部生成后，才检查是否满足条件，若不满足，则直接放弃该完整解，然后再尝试另一个可能的完整解，它并没有沿着一个可能的完整解的各个部分逐步回退生成解的过程。而对于回溯法，一个解的各个部分是逐步生成的，当发现当前生成的某部分不满足约束条件时，就放弃该步所做的工作，退到上一步进行新的尝试，而不是放弃整个解重来。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>用 <strong>d[i]=k</strong> 表示第 <strong>i</strong> 个皇后放在第 <strong>k</strong> 个位置上，</li><li>然后从第1个皇后，第1个位置开始，每次放置前先调用 <strong>check()</strong> 函数判断与其他皇后是否冲突</li><li>如果不冲突则放置</li><li>如果冲突则移至下一个位置，如果位置到了最后一个，则不放，且将上一次放置的皇后移至下一个位置，递归调用。</li><li>直至放置完毕所有皇后（flag=true） 或者 所有位置遍历结束。</li></ol><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> d[<span class="hljs-number">21</span>];<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br><br>    <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)<br>        cout&lt;&lt;d[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    cout&lt;&lt;d[n];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<br><br>    <span class="hljs-keyword">if</span> (k == n+<span class="hljs-number">1</span>)&#123;<br>        flag=<span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        d[k] = i;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(k))<br>            <span class="hljs-built_in">backtrack</span>(k+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (flag)<br>            <span class="hljs-keyword">return</span>;<br>        d[k] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;=k;j++)<br>            <span class="hljs-keyword">if</span> (d[i] == d[j] || <span class="hljs-built_in">abs</span>(d[i] - d[j]) == <span class="hljs-built_in">abs</span>(i-j))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="同样的逻辑，用py实现了一下。"><a href="#同样的逻辑，用py实现了一下。" class="headerlink" title="同样的逻辑，用py实现了一下。"></a>同样的逻辑，用py实现了一下。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>d = [<span class="hljs-number">0</span>] * (n+<span class="hljs-number">1</span>)<br>flag = <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">k</span>):<br>    <span class="hljs-keyword">if</span> k == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, k+<span class="hljs-number">1</span>):<br>           <span class="hljs-comment"># print(j,end=&#x27; &#x27;)</span><br>            <span class="hljs-keyword">if</span> d[i] == d[j] <span class="hljs-keyword">or</span> <span class="hljs-built_in">abs</span>(d[i] - d[j]) == <span class="hljs-built_in">abs</span>(i-j):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">k</span>):<br><br>    <span class="hljs-keyword">global</span> flag<br>    <span class="hljs-keyword">if</span> k == n+<span class="hljs-number">1</span>:<br>        flag=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span><br>   <span class="hljs-comment"># print(&#x27;k =&#x27;, k)</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        d[k] = i<br>       <span class="hljs-comment"># print(&#x27;d[&#x27;,k,&#x27;] = &#x27;,i,sep=&#x27;&#x27;)</span><br>        <span class="hljs-keyword">if</span> check(k):<br>            dfs(k+<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span><br>        d[k] = <span class="hljs-number">0</span><br><br><br>dfs(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> d[<span class="hljs-number">1</span>:n]:<br>    <span class="hljs-built_in">print</span>(x,end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>(d[n],end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子集和问题--回溯法</title>
    <link href="/2019/11/07/%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98-%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    <url>/2019/11/07/%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98-%E5%9B%9E%E6%BA%AF%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题简介"><a href="#一、问题简介" class="headerlink" title="一、问题简介"></a>一、问题简介</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>子集和问题的一个实例为〈S,t〉。其中，S={  x1 ， x2 ，…，xn }是一个正整数的集合，c是一个正整数。子集和问题判定是否存在S的一个子集S1，使得：<strong>SUM(S1) = c</strong>。</p><span id="more"></span><p>试设计一个解子集和问题的回溯法。</p><p>对于给定的正整数的集合S={  x1 ， x2 ，…，xn }和正整数c，计算S 的一个子集S1，使得：SUM(S1)=c。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入数据的第1 行有2 个正整数n 和c（n≤10000，c≤10000000），n 表示S 的大小，c是子集和的目标值。接下来的1 行中，有n个正整数，表示集合S中的元素。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>将子集和问题的解输出。当问题无解时，输出“No Solution!”。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">2</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h1 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h1><h2 id="排列树回溯"><a href="#排列树回溯" class="headerlink" title="排列树回溯"></a>排列树回溯</h2><p>时间复杂度为 <strong>O(n!)</strong> 可通过加限制条件达到剪枝效果</p><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br> <br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-type">int</span> n=<span class="hljs-number">0</span>,c=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> d[<span class="hljs-number">10050</span>];<br><span class="hljs-type">int</span> t[<span class="hljs-number">10050</span>];<br><span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> mysum = <span class="hljs-number">0</span>;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span></span>;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//输入</span><br>   cin&gt;&gt;n&gt;&gt;c;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin&gt;&gt;d[i];<br>    &#125;<br> <br>    <span class="hljs-comment">//回溯调用</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        <span class="hljs-built_in">backtrack</span>(i,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">//输出</span><br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;No Solution!&quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; l<span class="hljs-number">-1</span>; ++i) &#123;<br>            cout&lt;&lt;t[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;t[l<span class="hljs-number">-1</span>]&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> s1,<span class="hljs-type">int</span> s2)</span></span>&#123;<br> <br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(mysum == c)<br>            flag = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//cout&lt;&lt;mysum&lt;&lt;endl;</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s1; i &lt;= s2; ++i) &#123;<br>        mysum += d[i];<br>        t[l++] = d[i];<br>        <span class="hljs-keyword">if</span> (mysum&lt;=c)   <span class="hljs-comment">//剪掉不可能的分支</span><br>            <span class="hljs-built_in">backtrack</span>(x<span class="hljs-number">-1</span>,i+<span class="hljs-number">1</span>,s2);<br>        <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)  <span class="hljs-comment">//找到结果，退出</span><br>            <span class="hljs-keyword">return</span>;<br>        l--;<br>        mysum -= d[i];<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任务时间表-贪心算法</title>
    <link href="/2019/11/07/%E4%BB%BB%E5%8A%A1%E6%97%B6%E9%97%B4%E8%A1%A8-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <url>/2019/11/07/%E4%BB%BB%E5%8A%A1%E6%97%B6%E9%97%B4%E8%A1%A8-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题简介"><a href="#一、问题简介" class="headerlink" title="一、问题简介"></a>一、问题简介</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>一个单位时间任务是恰好需要一个单位时间完成的任务。给定一个单位时间任务的有限集S。关于S的一个时间表用于描述S中单位时间任务的执行次序。时间表中第1个任务从时间0 开始执行直至时间1 结束，第2 个任务从时间1 开始执行至时间2 结束，…，第n个任务从时间n-1 开始执行直至时间n结束。</p><span id="more"></span><p>具有截止时间和误时惩罚的单位时间任务时间表问题可描述如下。</p><p>(1) n个单位时间任务的集合S={1,2,…,n}；</p><p>(2) 任务i的截止时间di ,1≤i≤n,1≤ di ≤n，即要求任务i在时间di 之前结束；</p><p>(3) 任务i的误时惩罚wi ,1≤i≤n,即任务i未在时间di 之前结束将招致wi 的惩罚；若按时完成则无惩罚。</p><p>任务时间表问题要求确定S的一个时间表（最优时间表）使得总误时惩罚达到最小。</p><p>给定n 个单位时间任务，各任务的截止时间di ,各任务的误时惩罚wi ,1≤i≤n，计算最优时间表。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入数据的第一行是正整数n（n≤1000），表示任务数。接下来的2行中，每行有n个正整数，分别表示各任务的截止时间和误时惩罚。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>将计算出的最小总误时惩罚输出。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br><span class="hljs-symbol">70 </span><span class="hljs-number">60</span> <span class="hljs-number">50</span> <span class="hljs-number">40</span> <span class="hljs-number">30</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">50<br></code></pre></td></tr></table></figure><h1 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h1><ol><li>按照惩罚大小，从大到小排序把截止时间和误时惩罚同时排序</li><li>采用贪心每次先放惩罚最大的，</li><li>然后从它截止时间的位置向前找一个空闲的位置，如果找到的采用T[i]标记该位置被占用；如果未找到则放弃该任务加上该任务的惩罚。</li></ol><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1050</span>;<br><br><span class="hljs-type">int</span> v[N], w[N];<br><span class="hljs-type">int</span> T[N];<br><span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> t_max=<span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//快速排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> s[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> i = l, j = r, x = s[l], y = w[l];<br>        <span class="hljs-keyword">while</span> (i &lt; j)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; s[j] &lt;= x)<br>                j--;<br>            <span class="hljs-keyword">if</span>(i &lt; j)&#123;<br>                w[i] = w[j];<br>                s[i++] = s[j];<br>            &#125;<br>            <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; s[i] &gt; x)<br>                i++;<br>            <span class="hljs-keyword">if</span>(i &lt; j)&#123;<br>                w[j] = w[i];<br>                s[j--] = s[i];<br>            &#125;<br>        &#125;<br>        s[i] = x;<br>        w[i] = y;<br>        <span class="hljs-built_in">quick_sort</span>(s, l, i - <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">quick_sort</span>(s, i + <span class="hljs-number">1</span>, r);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        cin&gt;&gt;w[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        cin&gt;&gt;v[i];<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(v,<span class="hljs-number">1</span>,n);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">bool</span> flag1 = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = w[i]; j &gt;=<span class="hljs-number">1</span> ; --j) &#123;<br>            <span class="hljs-keyword">if</span>(T[j] == <span class="hljs-number">0</span> )&#123;<br>                T[j] = <span class="hljs-number">1</span>;<br>                flag1 = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag1)<br>            t_max += v[i];<br>    &#125;<br><br>    cout&lt;&lt;t_max&lt;&lt;endl;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++动态申请数组</title>
    <link href="/2019/11/06/C-%E5%8A%A8%E6%80%81%E7%94%B3%E8%AF%B7%E6%95%B0%E7%BB%84/"/>
    <url>/2019/11/06/C-%E5%8A%A8%E6%80%81%E7%94%B3%E8%AF%B7%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="C-动态申请数组"><a href="#C-动态申请数组" class="headerlink" title="C++动态申请数组"></a>C++动态申请数组</h1><p>1.使用new运算符来申请数组更加简便，同时也会使指针更像数组。<br>2.每一次new操作都会向内存申请一块连续的地址空间，也就是说二维数组相邻的列在内存中地址不一定是相邻的。<br>3.C++中申请内存不必区分基本类型还是自定义的类，都是统一的定义方法。</p><span id="more"></span><blockquote><p>申请一个大小为 n=10 的一维数组</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 其余代码</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">delete</span>[]a;<br></code></pre></td></tr></table></figure><blockquote><p>申请一个大小为n * n的二维数组</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> **a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>*[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>a[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 其余代码</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br><span class="hljs-keyword">delete</span>[] a[i];<br><br><span class="hljs-keyword">delete</span>[]a;<br></code></pre></td></tr></table></figure><blockquote><p>申请一个大小为n * n * n的三维数组</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> ***a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>**[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>a[i] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>*[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>a[i][j] = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n];<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 其余代码</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)<br><span class="hljs-keyword">delete</span>[] a[i][j];<br><br><span class="hljs-keyword">delete</span>[] a[i];<br>&#125;<br><span class="hljs-keyword">delete</span>[] a;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电路板排版问题--回溯法</title>
    <link href="/2019/11/05/%E7%94%B5%E8%B7%AF%E6%9D%BF%E6%8E%92%E7%89%88%E9%97%AE%E9%A2%98-%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    <url>/2019/11/05/%E7%94%B5%E8%B7%AF%E6%9D%BF%E6%8E%92%E7%89%88%E9%97%AE%E9%A2%98-%E5%9B%9E%E6%BA%AF%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、问题简介"><a href="#一、问题简介" class="headerlink" title="一、问题简介"></a>一、问题简介</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>最小长度电路板排列问题是大规模电子系统设计中提出的实际问题。该问题的提法是，将n块电路板以最佳排列方案插入带有n个插槽的机箱中。n块电路板的不同的排列方式对应于不同的电路板插入方案。</p><span id="more"></span><p>设B={1，2，…，n }是n块电路板的集合。集合L={  N1 ， N2 ，…，Nm }是n块电路板的m个连接块。其中每个连接块i N 是B的一个子集，且Ni 中的电路板用同一根导线连接在一起。</p><p>例如，设n=8，m=5。给定n块电路板及其m个连接块如下：</p><p>B={1，2，3，4，5，6，7，8}；L={ N1， N2 ，N3 ，N4 ，N5 }；</p><p>N1 ={4，5，6}； N2 ={2，3}； N3 ={1，3}；N4 ={3，6}；N5 ={7，8}。</p><p>这8 块电路板的一个可能的排列如图所示。<br><img src="/myimages/201911042038.png" alt="在这里插入图片描述"></p><p>在最小长度电路板排列问题中，连接块的长度是指该连接块中第1 块电路板到最后1块电路板之间的距离。例如在图示的电路板排列中，连接块N4 的第1 块电路板在插槽3 中，它的最后1块电路板在插槽6中，因此N4 的长度为3。同理 N2 的长度为2。图中连接块最大长度为3。</p><p>对于给定的电路板连接块，试设计一个回溯法找出所给n个电路板的最佳排列，使得m个连接块中最大长度达到最小。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入数据的第一行有2 个正整数n 和m (1≤m,n≤20)。接下来的n行中，每行有m个数。第k行的第j个数为0 表示电路板k不在连接块j 中，1 表示电路板k在连接块j中。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>将计算出的电路板排列最小长度及其最佳排列输出。文件的第一行是最小长度；接下来的1 行是最佳排列。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">8 </span><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h1 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a>二、问题分析</h1><h2 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h2><ul><li>用回溯法解决问题应先明确定义问题的解空间，问题的解空间中至少包含问题的一个最优解，其解空间可看成长度为n的完全二叉树</li><li>本题可看为一个排列树，通过递归加循环的方法求出所有的解，然后计算出最优解。</li></ul><h2 id="排列数"><a href="#排列数" class="headerlink" title="排列数"></a>排列数</h2><ul><li>确定n个元素满足某种性质的排列时，相应的解空间树称为排列树，排列数中通常有n!个叶子节点，因此遍历排列数需要O（n!）时间。</li></ul><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> shuzu_max = <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> min_l = <span class="hljs-number">1000000</span>;<br><span class="hljs-type">int</span> a[shuzu_max];<br><span class="hljs-type">int</span> t[shuzu_max];<br><span class="hljs-type">int</span> data[shuzu_max][shuzu_max];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//输入</span><br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; ++j) &#123;<br>            cin&gt;&gt;data[i][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        a[i]=i;<br>    &#125;<br>    <span class="hljs-comment">//计算</span><br>    <span class="hljs-built_in">backtrack</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//输出</span><br>    cout&lt;&lt;min_l&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; ++i) &#123;<br>            cout&lt;&lt;t[i]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    cout&lt;&lt;t[n<span class="hljs-number">-1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtrack</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (x == n)&#123;<br>        <span class="hljs-type">int</span> t_max = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> l,r;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; x; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (data[a[j]][i] == <span class="hljs-number">1</span>)&#123;<br>                    l = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = x<span class="hljs-number">-1</span>; j &gt;= <span class="hljs-number">0</span>; --j) &#123;<br>                <span class="hljs-keyword">if</span> (data[a[j]][i] == <span class="hljs-number">1</span>)&#123;<br>                    r = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (t_max &lt; r-l)<br>                t_max = r-l;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(t_max&lt;min_l)&#123;<br>            min_l = t_max;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                t[i] = a[i] + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x;i&lt;n;i++)&#123;<br>        <span class="hljs-type">int</span> tmp = a[x];<br>        a[x] = a[i];<br>        a[i] = tmp;<br>        <span class="hljs-comment">//这里应该加个限界函数，但是我没有找到合适的</span><br>        <span class="hljs-built_in">backtrack</span>(x+<span class="hljs-number">1</span>);<br>        tmp = a[x];<br>        a[x] = a[i];<br>        a[i] = tmp;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机专业学生的7个建议</title>
    <link href="/2019/11/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E5%AD%A6%E7%94%9F%E7%9A%847%E4%B8%AA%E5%BB%BA%E8%AE%AE/"/>
    <url>/2019/11/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E5%AD%A6%E7%94%9F%E7%9A%847%E4%B8%AA%E5%BB%BA%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p><strong>注：由于Joel Spolsky的双重身份（昔日耶鲁大学计算机系学长，今日Fog Creek软件公司的CEO），所以听听他的建议，对于当今无数困扰于就业压力的中国高校计算机专业学子来说，是大有裨益的。你们会发现，大多数建议，都在强调“软实力”的价值。</strong></p><span id="more"></span><pre><code class="hljs">如果你喜欢编程，那么你真是受到了上天的眷顾。你是非常幸运的少数人之一，能够以自己喜欢的事谋生。大多数人没有这么幸运。你认为理所当然的观念“热爱你的工作”，其实是一个很现代的概念。通常的看法是，工作是一种让人很不开心的事，你为了拿工资才不得不去上班。你工作的目的是为了攒下钱去干那些自己真正喜欢干的事，但是前提是你得等到65岁退休之后才行，而且还有不少条件。条件一，你的积蓄必须足够多；条件二，你没有老到走不动，你还有体力去干那些事情；条件三，你喜欢的事情不需要用到脆弱的膝盖、昏花的视力，也不要求你走上一里地不喘气，等等。</code></pre><p>　　我刚才说到哪里了？对了，我要提建议。</p><p>　　<strong>毕业前练好写作</strong></p><p>　　如果不是Linus Torvalds不断地散布福音，请问Linux操作系统会成功吗？虽然他是一个非常聪明的计算机天才，但是Linux吸引来全世界一大批志愿者的真正原因却是Linus Torvalds的表达能力。他通过电子邮件和邮件列表用书面形式传播自己的想法，最终引起了所有人的注意。</p><p>　　你听说过现在风靡一时的“极限编程”（Extreme Programming）吗？我在这个地方不谈我对极限编程的看法，我只说如果你听过这个词，那么原因就是它的倡导者都是一些非常有才华的作家和演说家。</p><p>　　即使我们缩小范围，将目光局限在任何一个软件开发团体中，你也会发现该团体中最有权势和影响力的程序员正是那些表达能力强的程序员，他们无论是做书面表达还是做口头表达，都能够清晰、自如、具有说服力地传达观点。此外，长得高也有助于提升影响力，不过这个不取决于你。</p><p>　　一个普通程序员与一个优秀程序员的区别，不在于他们懂得的编程语言谁多谁少，也不在于他们喜欢用Python语言还是喜欢用Java语言，而在于他们能否与他人交流思想。如果你能说服其他人，你的力量就可以得到放大。如果你能写出清晰的注释和技术规格说明书，其他程序员就能够理解你的代码，因此他们就能在自己的代码中使用，而不必重写。如果你做不到这一点，你的代码对其他人就没有价值。如果你能为最终用户写出清晰的使用手册，其他人就能明白你的代码是用来干什么的，这是唯一让别人明白你的代码有何价值的方法。SourceForge[ ]上有许多优美的、有用的代码，但是它们都像被埋葬了一样，根本没人来用，原因就是它们的作者没有写好使用说明（或者压根就没写）。这样一来就没有人知道他们的成果，他们杰出的代码就衰亡了。</p><p>　　如果一个程序员不会用英语写作、没有良好的写作能力，我就不会雇他。如果你能写，不管你去哪家公司工作，你很快就会发现写作技术文档的任务会落到你头上，这意味着你已经开始在放大自己的影响力了，管理层正在注意到你。</p><p>　　大学里有些课程被公认为“写作密集型”（writing intensive）课程，这就是说为了拿到学分，你必须写作多得可怕的文字。一定要去上这样的课程！不要管学科，只要这门课每周甚至每天都要你写东西，你就去上。</p><p>　　你还可以动手写日记或者网志。你写得越多，写作就会变得越容易。写起来越容易，你就会写得越多。这是一个良性循环。</p><p>　　<strong>毕业前学好C语言</strong></p><p>　　第二点我要讲的是C语言。请注意，我说的是C语言，而不是C++。虽然在实际使用中C语言已经越来越罕见，但是它仍然是当前程序员的共同语言。C语言让程序员互相沟通，更重要的是，它比你在大学中学到的“现代语言”（比如ML语言、Java语言、Python语言或者其它正在教授的流行垃圾语言）都更接近机器。你至少需要花一个学期来了解机器原理，否则你永远不可能在高级语言的层次写出高效的代码。你也永远无法开发编译器和操作系统，而它们恰恰属于目前程序员能够得到的最佳工作之列。别人也永远不会放心将大型项目的架构设计交给你。我不管你懂多少延续（continuation）、闭包（closure）、异常处理（exception handling），只要你不能解释为什么while (*s++ = *t++)；这句代码的作用是复制字符串，或者不觉得这是世界上对你来说再自然不过的事情，那么你就是在盲目无知的情况下编程。在我看来，这就好像一个医生不懂得最基本的解剖学就在开处方，他看病的根据完全是因为那些娃娃脸的医药厂商销售代表说这种药有用。</p><p>　　<strong>毕业前学好微观经济学</strong></p><p>　　如果你没有上过任何经济学课程，那么我首先来做一个超短的评论：经济学是这样的学科之一，刚开始学的时候轰轰烈烈，有许多有用的、言之有理的理论和可以在真实世界中得到证明的事实，等等；但是，再学下去就每况愈下，有用的东西就不多了。经济学一开始那个有用的部分正是微观经济学，它是商业领域所有重要理论的基础。跟在微观经济学后面的东西就不行了。你接下来学的是宏观经济学，如果你愿意，尽管跳过去，也不会有什么损失。宏观经济学开头的部分是利息理论，内容比方说是利率与失业之间的关系，但是怎么说呢，看上去这部分里面还没有被证实的东西多于已经被证实的东西。学完这部分，后面的内容越来越糟糕，许多经济学专业的学生实际上都变成在搞物理学，因为这样才能在华尔街上找到更好的工作。但是不管怎样，你一定要去学微观经济学，因为你必须搞懂供给和需求，你必须明白竞争优势，你必须理解什么是净现值（NPV），什么是贴现，什么是边际效用。只有这样，你才会懂得为什么生意是现在这种做法。</p><p>　　为什么计算机系的学生也应该学经济学？因为，从经营一家公司的角度来看，比起那些不懂的程序员，一个理解基本商业规则的程序员将会更有价值。就是这么简单。我无法告诉你有多少次我是那样地充满挫折感，因为我看到了太多的提出一些疯狂的想法的程序员，这些想法在代码上也许可行，但在资本主义世界中毫无意义。如果你懂得商业规则，你就是一个更有价值的程序员，你会因此得到回报的，但是前提是你要去学习微观经济学。</p><p>　　<strong>不要因为枯燥就不选修非计算机专业的课程</strong></p><p>　　想提高GPA绩点的一个好方法就是多选修非计算机系的课程。请千万不要低估你的GPA的重大意义。千千万万的人事经理和招聘人员在拿到一份简历的时候，第一眼就会去看GPA，包括我也是这样。我们不会为这种做法道歉。为什么？因为GPA不反映单个的成绩，而是代表了许多个教授在一段很长的时间中，在不同的情况下，对你的表现的一个总的评估。SAT成绩难道不够吗？哈，那只不过是一场几个小时的测试罢了。GPA中包括了四年大学期间你的小论文、期中考试和课堂表现，总数有几百次之多。当然，GPA也有自己的问题，不是百分之百准确。比如，这些年来，老师对学生的打分越来越宽松，学习成绩有通货膨胀的趋势。再比如，GPA无法反映课程的难度，没人能够看出你的GPA是来自无名社区大学家政系的轻松课程还是来自加州理工学院针对研究生的量子力学课程。渐渐地，我形成了一套自己的做法，首先我会过滤掉所有来自社区大学、GPA低于2.5的简历，然后我会要求剩下的人给我寄成绩单和推荐信。我再从中发现那些成绩一贯优秀的人，而不是那些仅仅在计算机系课程中得到高分的人。</p><p>　　为什么我要关心某人的“欧洲历史”课程成绩呢，毕竟作为雇主我要找的应该是程序员啊？何况，历史是那么枯燥，不得高分很正常。哦，这么说来，你的意思是我应该雇用你，而不用考虑一旦工作变得枯燥你会不会努力工作？别忘了，在编程工作中也有很枯燥的东西。每一项工作都有枯燥难耐的时刻。我不想雇用那些只想干有趣事情的人。</p><p>　　<strong>选修有大量编程实践的课程</strong></p><p>　　我依然清楚记得我发誓绝不读研究生的那一刻。那是在一门叫做“动态逻辑”的课程上，教师是活力十足的耶鲁大学教授Lenore Zuck，她是计算机系那些聪明的老师中最聪明的人之一。</p><p>　　如今， 由于记忆力糟糕， 我已经差不多把这门课的内容忘光了，但是不管怎么说，在这里我还是想要对付着说一下。大致上，形式逻辑的意思是说，如果条件成立，你就能证明结论也成立。比如，根据形式逻辑，已知“只要成绩好，就能被雇用”，然后假定“Johnny的成绩好”，你就可以得到一个崭新的结论“Johnny会被雇用”。这完全是经典方法。但是，一个解构主义者（deconstructionist）只需要10秒钟就能破坏形式逻辑中所有有用的东西。这样一来，留给你的只是一些趣味性，而不是实用性。</p><p>　　现在再来说动态逻辑。它与形式逻辑其实是一回事，但是必须再多考虑时间因素。比如，“你打开灯之后，就能看见自己的鞋子”，已知“灯以前是亮的”，那么这就意味着“你看见了自己的鞋子”。</p><p>　　对于像Zuck教授那样聪明的理论家，动态逻辑充满了吸引力，因为它看上去很有希望让你在形式上证明一些计算机程序的相关理论问题。这样做说不定很有用。比如，你可以用它在形式上证明，火星漫游车的闪存卡不会发生溢出（overflow）问题，不会因而整天一遍又一遍地重启，耽误了它在那颗赤红色的星球上漫游寻找火星人马文（Marvin the Martian）。</p><p>　　在第一堂课上，Zuck博士写满了整整两面黑板，甚至黑板旁边的墙上都写上了很多证明步骤。需要证明的问题是，有一个控制灯泡的开关，现在灯泡没有亮，这时你打开了开关，请证明灯泡将会点亮。</p><p>　　整个证明过程复杂得不可思议，处处都是陷阱，必须十分小心。保证这个证明不出错太困难了，还不如直接相信打开开关灯就会亮。真的，虽然证明过程写满了许多块黑板，但是还是有许多中间步骤被省略了，因为如果要从形式逻辑上完整证明所有步骤，那就琐碎得无法形容了。许多步骤是用各种经典的逻辑证明方法推导得到的，包括归纳法、反证法等，甚至有些部分还是由旁听的研究生证明的。</p><p>　　留给我们的课后作业是证明逆命题：如果灯原来是关着的，现在却亮了，那么请证明开关的状态一定同原来相反。</p><p>　　我动手开始证明，我真的去证明了。</p><p>　　我在图书馆里待了很长时间。</p><p>　　我对照着Zuck博士的原始证明想依样画葫芦。研究了几个小时之后，我在其中发现了一个错误。可能我抄写的时候抄错了，但是这使得我想通了一件事。如果花费3个小时，写满了一块又一块的黑板，每一秒钟都可能出错，最后能够证明的却只是一个很琐碎的结论，那么这种方式有多大的实用性呢？在活生生、充满趣味的现实世界中，你永远都不会有机会使用它。</p><p>　　但是，动态逻辑的理论家们对这一点不感兴趣。他们看上它不是因为它有用，而是因为它可以为他们带来终身教职。</p><p>　　我放弃了这门课，并且发誓绝不会去读计算机科学的研究生。</p><p>　　这个故事告诉我们，计算机科学与软件开发不是一回事。如果你真的非常幸运，你的学校可能会开设很像样的软件开发课程。但是另一种可能是，你的学校根本不教你在现实中如何编程，因为精英学校都觉得，教授工作技能最好留给职业技术学校、犯人重返社会的培训项目去做。你到处都能学怎么写代码。别忘了，我们是耶鲁大学，我们的使命是培养未来的世界领袖。你交了16万美元的学费，却在学循环语句的写法，这怎么可以？你以为这是什么地方，难道是机场沿途的酒店里临时拼凑起来不靠谱的Java语言培训班？哼哼。</p><p>　　麻烦在于我们没有一种真正教授软件开发的专门学校。你如果想成为一个程序员，你可能只能选择计算机科学专业。这是一个不错的专业，但是它同软件开发不是一回事。在那些400等级的课程代号中，去寻找名称中带有“Practicum”这个词的课程吧（编者注：指供人实习的课程）。不要被这个拉丁语单词吓倒，这些都是有用的课程，之所以起这种名字，只是为了让那些文绉绉、装腔作势、满嘴胡说八道的公司经理们觉得高深莫测。</p><p>　　<strong>找一份好的暑期实习工作</strong></p><p>　　精明的招聘负责人都知道，喜欢编程的人高中时就将牙医的信息输入了数据库，进入大学前就去过三次电脑夏令营，为校报做过内容管理系统，有过软件公司的夏季实习经历。招聘负责人就是要在你的简历上找这些东西。</p><p>　　如果你喜欢编程， 就不要随便什么工作都答应，否则你会犯下最大的错误。不管是暑期工作，还是兼职或者其他性质的工作，只要与编程无关，就不要轻易接受。我知道，其他19岁的孩子都想去购物中心里打工，在那里折叠衬衫。但是你与他们不同，你19岁时就已经掌握了一门非常有价值的技能。将时间浪费在折叠衬衫上是很愚蠢的，等到毕业的时候，你的简历上本应该写满了一大堆与编程相关的经历。就让那些财经类的毕业生去租车公司“帮助人们满足他们租车的需要”吧，你要干的是别的事（在电视中扮演超人的Tom Welling注1除外）。</p><p>　　为了让你的生活变得更容易一些，也为了强调这整篇文章完全是为了满足我的个人目的，我要告诉你，我的公司——Fog Creek软件公司——提供软件开发方面的暑期实习机会。我们非常看重简历。“比起其他公司的实习工作，你在Fog Creek最有可能学到更多的编写代码、软件开发、商业运作方面的知识。”这是去年夏天我们的一个实习生Ben说的。他会这样说，并不完全是因为我派了人到他的宿舍让他这样说。我们接受实习申请的截止日期是2月1日。一起来吧。</p><p>　　如果你听从了我的建议，你还是有可能落得一个悲惨的下场，比如很早就卖掉了微软公司的股票，再比如拒绝了谷歌公司的工作机会，原因是你想要一间自己的可以关上门的独立办公室，或者做出了其他生命中愚蠢的决定。但是，这些可不是我的错。我一开始就告诉过你，不要听我的话。</p>]]></content>
    
    
    <categories>
      
      <category>OO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不可变性的优点（以String为例）</title>
    <link href="/2019/10/30/%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%80%A7%E7%9A%84%E4%BC%98%E7%82%B9%EF%BC%88%E4%BB%A5String%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
    <url>/2019/10/30/%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%80%A7%E7%9A%84%E4%BC%98%E7%82%B9%EF%BC%88%E4%BB%A5String%E4%B8%BA%E4%BE%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="不可变类简述："><a href="#不可变类简述：" class="headerlink" title="不可变类简述："></a>不可变类简述：</h1><blockquote><p> 不可变类就是这个类的实例一旦创建完成后，就不能改变其成员变量的值。</p></blockquote><blockquote><ol><li>   不可变类用final修饰，保证其不可以被继承。</li><li>   不可变类的所有成员变量都是私有的，并且需要final修饰。</li></ol></blockquote><span id="more"></span><blockquote><ol start="3"><li>   不提供修改成员变量的方法。</li><li>   通过构造函数来初始化所有成员。</li><li>   类中的getter方法不直接返回对象本身，而是新建一个一模一样对象进行返回。</li></ol></blockquote><h1 id="String对象的不可变性的优点"><a href="#String对象的不可变性的优点" class="headerlink" title="String对象的不可变性的优点"></a>String对象的不可变性的优点</h1><ol><li>   <strong>保证多线程安全</strong>：同一个String可以被多个线程同时使用，不需要考虑同步问题，因为该类的值无法被改变。String被线程使用时只可以读，不可以写，又因为多个线程可以同时读，不可同时写或者同时读写，因此String可以被多个线程同时用，也不必考虑线程安全问题。</li><li>   <strong>便于配合常量池的使用</strong>：常量池会把一些相同的字符重复使用，避免每次都创建相同的对象，节省空间。所以就可能存在两个相同内容的String类指向常量池的同一字符串。当其中一个String变量改变时会创建新的空间来存储，不会对原来空间存放的字符串产生任何影响。因此就保证了另一个String变量的内容不会受影响。当没有String变量指向该空间时该空间会被java JVM自动回收，不会造成内存浪费。</li><li>   <strong>避免了许多网络安全问题</strong>：网络上数据库的用户名、密码等都是以String的形式传入来连接相应的数据库，如果String是可变的那么就容易被其他人钻空子修改你输入的String的值造成安全隐患。而且我们输入的用户名，密码等都是不需要改变的因此String为不可变类既可以保证安全又不影响用户使用。</li><li>   <strong>提高运行速度</strong>：String在创建的时候被hashcode给缓存了，不需要重新计算。因此在String的处理速度上往往比其他可变类要快。例如同样是要输出一个字符串的长度，该字符串被可变类存储时需要先计算才可以输出该字符串的长度。而被String存储时不需要计算，直接有变量存储字符串的长度，直接输出即可。这样就大大节约了程序运行的时间。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>会场安排问题-贪心算法</title>
    <link href="/2019/10/30/%E4%BC%9A%E5%9C%BA%E5%AE%89%E6%8E%92%E9%97%AE%E9%A2%98-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <url>/2019/10/30/%E4%BC%9A%E5%9C%BA%E5%AE%89%E6%8E%92%E9%97%AE%E9%A2%98-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>假设要在足够多的会场里安排一批活动，并希望使用尽可能少的会场。设计一个有效的贪心算法进行安排。 对于给定的k个待安排的活动，计算使用最少会场的时间表。</p><span id="more"></span><p>Input<br>输入数据的第一行有1 个正整数k（k≤10000），表示有k个待安排的活动。接下来的k行中，每行有2个正整数，分别表示k个待安排的活动开始时间和结束时间。时间以0 点开始的分钟计。</p><p>Output<br>输出一个整数，表示最少会场数。</p><p>Sample Input</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">23</span><br><span class="hljs-symbol">12 </span><span class="hljs-number">28</span><br><span class="hljs-symbol">25 </span><span class="hljs-number">35</span><br><span class="hljs-symbol">27 </span><span class="hljs-number">80</span><br><span class="hljs-symbol">36 </span><span class="hljs-number">50</span><br></code></pre></td></tr></table></figure><p>Sample Output</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="证明问题满足贪心选择性质和最优子结构性质"><a href="#证明问题满足贪心选择性质和最优子结构性质" class="headerlink" title="证明问题满足贪心选择性质和最优子结构性质"></a>证明问题满足贪心选择性质和最优子结构性质</h2><p>1.<strong>贪心选择性质</strong>：因为活动安排问题每次安排活动时只需要考虑之前安排过的活动，不需要关心以后要安排的活动。因此该问题满足贪心选择性质。<br>2.<strong>最优子结构与性质</strong>：第n个活动安排时求的最优解一定是在第n-1个活动安排时求的最优解的基础之上的。因此该问题满足最优子结构与性质。</p><h2 id="贪心策略"><a href="#贪心策略" class="headerlink" title="贪心策略"></a>贪心策略</h2><p>1.定义一个结构体（或者类）用来保存需要安排活动的开始时间和结束时间。<br>2.按照开始时间的先后顺序进行排序， 开始时间早的排在前面。<br>3.定义一个整数数组（初始化为0，大小为会场个数），用于保存每个会场的结束时间<br>4.对于每一个活动遍历会场，直到找到一个会场结束时间小于此次活动开始的时间为止。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">huichang</span><br>&#123;<br><span class="hljs-type">int</span> s;<br><span class="hljs-type">int</span> f;<br>&#125;;<br>huichang t[<span class="hljs-number">10000</span>+<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(huichang a, huichang b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a.s &lt; b.s;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">meeting</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> count_chang = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> *a = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n + <span class="hljs-number">1</span>];<span class="hljs-comment">//该数组于保存每个会场的结束时间</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n+<span class="hljs-number">1</span>; i++) &#123;<br>a[i] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br><span class="hljs-keyword">if</span> (a[j] &lt;= t[i].s) &#123;<br>a[j] = t[i].f;<br><span class="hljs-keyword">if</span> (j &gt;= count_chang + <span class="hljs-number">1</span>)<span class="hljs-comment">//记录已使用了的会场个数</span><br>count_chang++;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">delete</span>[]a;<br><span class="hljs-keyword">return</span> count_chang;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>cin &gt;&gt; t[i].s &gt;&gt; t[i].f;<br>&#125;<br><span class="hljs-built_in">sort</span>(t+<span class="hljs-number">1</span>,t+n+<span class="hljs-number">1</span>,cmp);<br>cout &lt;&lt; <span class="hljs-built_in">meeting</span>() &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// TODO Auto-generated method stub</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br> <br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            HuiChang []t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuiChang</span>[n+<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>                t[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HuiChang</span>();<br>             <br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>                t[i].s = sc.nextInt();<br>                t[i].f = sc.nextInt();<br>            &#125;<br>            <span class="hljs-type">MyComparator</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyComparator</span>();<br>            Arrays.sort(t,<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>,cmp);<br>            System.out.println(meeting(t));<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">meeting</span><span class="hljs-params">(HuiChang []t)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count_chang</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> t.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> []a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [n+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length;i++) &#123;<br>            a[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++) &#123;<br>                <span class="hljs-keyword">if</span>(a[j]&lt;=t[i].s) &#123;<br>                    a[j] = t[i].f;<br>                    <span class="hljs-keyword">if</span>(j&gt;=count_chang+<span class="hljs-number">1</span>)<br>                        count_chang++;<br>                     <br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count_chang;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HuiChang</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> s;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> f;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span>&lt;HuiChang&gt;&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(HuiChang o1, HuiChang o2)</span> &#123;<br>        <span class="hljs-keyword">if</span>(o1.s &gt; o2.s) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法不能丢</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>算法不能丢</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
