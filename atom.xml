<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马振东的博客</title>
  
  <subtitle>沉迷钻研，远离浮躁</subtitle>
  <link href="https://plumdong.github.io/atom.xml" rel="self"/>
  
  <link href="https://plumdong.github.io/"/>
  <updated>2021-09-04T07:29:48.545Z</updated>
  <id>https://plumdong.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>子串匹配—KMP算法实现</title>
    <link href="https://plumdong.github.io/2021/08/20/%E5%AD%90%E4%B8%B2%E5%8C%B9%E9%85%8D%E2%80%94KMP%E7%AE%97%E6%B3%95/"/>
    <id>https://plumdong.github.io/2021/08/20/%E5%AD%90%E4%B8%B2%E5%8C%B9%E9%85%8D%E2%80%94KMP%E7%AE%97%E6%B3%95/</id>
    <published>2021-08-19T16:00:00.000Z</published>
    <updated>2021-09-04T07:29:48.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p>实现 strStr() 函数。</p><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  -1 。</p><p>当 <code>needle</code> 是空字符串时，应当返回0。</p><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><p>KMP算法是用于求解字符串匹配的算法，其可以把时间复杂度降为O(m+n)，进而大大提升效率。</p><p>第一步是求解next数组，是子串needle自己对自己做匹配，其定义为： t[0]~t[x] 这一段字符串，使得<strong>K-前缀恰等于K-后缀</strong>的最大的K.</p><p>因此计算next[x]则需要先知道next[x-1]，记为k，然后判断t[x-1]与t[k]是否相等，如果相等表明最长前后相等的前后缀增大了一位即next[x]=k+1，</p><p>如果不相等应该减小k，然后再次判断t[x-1]与t[k]是否相等，为了使k尽可能的大，k应该等于next[k]。</p><p>第二步就是根据所求得的next数组，与s字符数组进行匹配，如果t与s相等则两者都向前移一位，如果相等则t串的指针移至此时的指针对应的next数组的值。</p><p>整个匹配过程s字符串的指针不会后退因此只需要遍历一边s字符串等到结果提升了匹配效率。</p><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KMP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        KMP kmp = <span class="keyword">new</span> KMP();</span><br><span class="line">        System.out.println(kmp.strStr(<span class="string">&quot;abcabaabaabcacb&quot;</span>, <span class="string">&quot;abaabcac&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] s = haystack.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] t = needle.toCharArray();</span><br><span class="line">        <span class="keyword">int</span>[] next = getNext(t);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;s.length &amp;&amp; j&lt;t.length)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || s[i] == t[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == t.length)</span><br><span class="line">            <span class="keyword">return</span> i-j;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getNext(<span class="keyword">char</span>[] t)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[t.length];</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; t.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = next[i-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (k != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (t[i-<span class="number">1</span>] == t[k])&#123;</span><br><span class="line">                    next[i] = k+<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    k = next[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h1&gt;&lt;p&gt;实现 strStr() 函数。&lt;/p&gt;
&lt;p&gt;给你两个字符串 haystack 和 needle ，请你在 </summary>
      
    
    
    
    <category term="算法不能丢" scheme="https://plumdong.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8D%E8%83%BD%E4%B8%A2/"/>
    
    
    <category term="算法不能丢" scheme="https://plumdong.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8D%E8%83%BD%E4%B8%A2/"/>
    
  </entry>
  
  <entry>
    <title>Java中实现a==1&amp;&amp;a==2&amp;&amp;a==3</title>
    <link href="https://plumdong.github.io/2021/07/06/Java%E4%B8%AD%E5%AE%9E%E7%8E%B0a==1&amp;&amp;a==2&amp;&amp;a==3/"/>
    <id>https://plumdong.github.io/2021/07/06/Java%E4%B8%AD%E5%AE%9E%E7%8E%B0a==1&amp;&amp;a==2&amp;&amp;a==3/</id>
    <published>2021-07-05T16:00:00.000Z</published>
    <updated>2021-08-26T13:42:29.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h1><ol><li><p>在Java 5中为了提高<code>Integer</code>的效率为其内部类<code>IntegerCache</code>中 添加了一个常量池<code>cache[]</code>，大小是一个字节范围是固定的 -128到127。</p></li><li><p>因此在创建<code>Integer</code>（-128到127）之间的对象时（例如<code>Integer a = 5</code>）,编译器就会调用<code>Integer.valueOf()</code>方法，直接返回常量池的对象。</p></li><li><p>所以只需要改变常量池<code>cache[]</code>中的数据即可完成<code>a==1&amp;&amp;a==2&amp;&amp;a==3</code></p></li></ol><ul><li>内部类 <code>IntegerCache</code>和<code>valueOf()</code>方法源码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> j = low;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class&lt;?&gt;[] declaredClasses = Integer.class.getDeclaredClasses();</span><br><span class="line">            Class&lt;?&gt; integerCache = declaredClasses[<span class="number">0</span>];</span><br><span class="line">            Field f = integerCache.getDeclaredField(<span class="string">&quot;cache&quot;</span>);</span><br><span class="line">            f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Integer[] cache = (Integer[]) f.get(integerCache);</span><br><span class="line"></span><br><span class="line">            System.out.println(cache[<span class="number">129</span>]);</span><br><span class="line">            System.out.println(cache[<span class="number">130</span>]);</span><br><span class="line">            System.out.println(cache[<span class="number">131</span>]);</span><br><span class="line"></span><br><span class="line">            cache[<span class="number">130</span>] = cache[<span class="number">129</span>];</span><br><span class="line">            cache[<span class="number">131</span>] = cache[<span class="number">129</span>];</span><br><span class="line">            Integer a = <span class="number">1</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------1-----------&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(a==(Integer)<span class="number">1</span> &amp;&amp; a==(Integer)<span class="number">2</span> &amp;&amp; a==(Integer)<span class="number">3</span>)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------2-----------&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(a==Integer.valueOf(<span class="number">1</span>) &amp;&amp; a==Integer.valueOf(<span class="number">2</span>) &amp;&amp; a==Integer.valueOf(<span class="number">3</span>))&#123;</span><br><span class="line">                System.out.println(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------------3-----------&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(a==<span class="keyword">new</span> Integer(<span class="number">1</span>) &amp;&amp; a==<span class="keyword">new</span> Integer(<span class="number">2</span>) &amp;&amp; a==<span class="keyword">new</span> Integer(<span class="number">3</span>))&#123;</span><br><span class="line">                System.out.println(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line">            System.out.println(cache[<span class="number">129</span>]);</span><br><span class="line">            System.out.println(cache[<span class="number">130</span>]);</span><br><span class="line">            System.out.println(cache[<span class="number">131</span>]);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">---------------1-----------</span><br><span class="line">true</span><br><span class="line">---------------2-----------</span><br><span class="line">true</span><br><span class="line">---------------3-----------</span><br><span class="line">---------------------------</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一、原理：利用 Integer 中的 内部类 IntegerCache</summary>
    
    
    
    <category term="Java基础" scheme="https://plumdong.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://plumdong.github.io/tags/Java/"/>
    
    <category term="花里胡哨" scheme="https://plumdong.github.io/tags/%E8%8A%B1%E9%87%8C%E8%83%A1%E5%93%A8/"/>
    
  </entry>
  
  <entry>
    <title>最长回文子串-dp</title>
    <link href="https://plumdong.github.io/2021/06/25/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2-dp/"/>
    <id>https://plumdong.github.io/2021/06/25/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2-dp/</id>
    <published>2021-06-24T16:00:00.000Z</published>
    <updated>2021-09-04T03:36:21.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><h2 id="示例-："><a href="#示例-：" class="headerlink" title="示例 ："></a>示例 ：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><ul><li>动态规划说白了就是空间换时间，保存上次求解的数据，用于此次求解。</li><li>二维数组dp用于存放当前已求得的解，<code>dp[i][j] = true</code>表示 字符串<code>s</code>从第<code>i</code>个到第<code>j</code>个是一个回文子串，并且数组<code>dp[i][j]=dp[j][i]</code>关于对角线对称，所以只需要用<code>i&lt;=j</code>的上半部分。</li><li>因此初始化时二维数组的对角线初始化为<code>true</code>，且如果有两个相邻相同的元素则把<code>dp[i][i+1]</code>也置为<code>true</code>。</li><li>最后填充数组<code>dp</code>，当第<code>i</code>个元素等于第<code>j</code>个元素，即<code>charArray[i] == charArray[j]</code>时，判断前一个元素是否相同即<code>dp[i+1][j-1]</code>是否为<code>true</code>，两个条件同时满足则把当前<code>dp[i][j]</code>置为<code>true</code>并记录当前回文子串的起始位置和长度。</li></ul><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = s.<span class="built_in">toCharArray</span>();</span><br><span class="line">        boolean[][] dp = <span class="keyword">new</span> boolean[length][length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> ( i&lt; length <span class="number">-1</span> &amp;&amp; charArray[i] == charArray[i+<span class="number">1</span>])&#123;</span><br><span class="line">                dp[i][i+<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                maxLen = <span class="number">2</span>;</span><br><span class="line">                begin = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>; l &lt;= length; l++) &#123;<span class="comment">//子串长度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=length -l ; i++) &#123;<span class="comment">//子串起始地址</span></span><br><span class="line">                <span class="keyword">int</span> j = l + i - <span class="number">1</span>;<span class="comment">//字串结束地址</span></span><br><span class="line">                <span class="keyword">if</span>(dp[i+<span class="number">1</span>][j<span class="number">-1</span>] &amp;&amp; charArray[i] == charArray[j])&#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    maxLen = l;</span><br><span class="line">                    begin = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substring</span>(begin, begin + maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">给你一个字符串 s，找到 s 中最长的回文子串。</summary>
    
    
    
    <category term="算法不能丢" scheme="https://plumdong.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8D%E8%83%BD%E4%B8%A2/"/>
    
    
    <category term="算法不能丢" scheme="https://plumdong.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8D%E8%83%BD%E4%B8%A2/"/>
    
  </entry>
  
  <entry>
    <title>docker中安装code-server</title>
    <link href="https://plumdong.github.io/2021/04/14/docker%E4%B8%8B%E5%AE%89%E8%A3%85code-server/"/>
    <id>https://plumdong.github.io/2021/04/14/docker%E4%B8%8B%E5%AE%89%E8%A3%85code-server/</id>
    <published>2021-04-13T16:00:00.000Z</published>
    <updated>2021-07-06T15:53:17.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h1><p>系统采用的时<code>centos8</code>，阿里云的服务器.</p><p>将下列代码保存为 <code>dockerinstall.sh</code> 并运行    <code>sh dockerinstall.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># remove old version</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove all docker data </span></span><br><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#  preinstall utils </span></span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># add repository</span></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># make cache</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line"></span><br><span class="line"><span class="comment"># install the latest stable version of docker</span></span><br><span class="line">sudo yum install -y docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># start deamon and enable auto start when power on</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># add current user </span></span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo gpasswd -a <span class="variable">$&#123;USER&#125;</span> docker</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h1><p>//TODO</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">nginx命令大全</span><br><span class="line"> 508 次浏览  发表于 2021-03-30 11:04 版权</span><br><span class="line">nginx -s reopen #重启Nginx</span><br><span class="line"></span><br><span class="line">nginx -s reload #重新加载Nginx配置文件，然后以优雅的方式重启Nginx</span><br><span class="line"></span><br><span class="line">nginx -s stop #强制停止Nginx服务</span><br><span class="line"></span><br><span class="line">killall nginx #杀死所有nginx进程  </span><br><span class="line"></span><br><span class="line">nginx -s quit #优雅地停止Nginx服务（即处理完所有请求后再停止服务）</span><br><span class="line"></span><br><span class="line">nginx -t #检测配置文件是否有语法错误，然后退出</span><br><span class="line"></span><br><span class="line">nginx -v #显示版本信息并退出</span><br><span class="line"></span><br><span class="line">nginx -V #显示版本和配置选项信息，然后退出</span><br><span class="line"></span><br><span class="line">nginx -t #检测配置文件是否有语法错误，然后退出</span><br><span class="line"></span><br><span class="line">nginx -T #检测配置文件是否有语法错误，转储并退出</span><br><span class="line"></span><br><span class="line">nginx -q #在检测配置文件期间屏蔽非错误信息</span><br><span class="line"></span><br><span class="line">nginx -?,-h #打开帮助信息  </span><br><span class="line"></span><br><span class="line">nginx -p prefix #设置前缀路径(默认是:/usr/share/nginx/)</span><br><span class="line"></span><br><span class="line">nginx -c filename #设置配置文件(默认是:/etc/nginx/nginx.conf)</span><br><span class="line"></span><br><span class="line">nginx -g directives #设置配置文件外的全局指令</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、安装docker&quot;&gt;&lt;a href=&quot;#一、安装docker&quot; class=&quot;headerlink&quot; title=&quot;一、安装docker&quot;&gt;&lt;/a&gt;一、安装docker&lt;/h1&gt;&lt;p&gt;系统采用的时&lt;code&gt;centos8&lt;/code&gt;，阿里云的服务器.&lt;/p</summary>
      
    
    
    
    <category term="linux" scheme="https://plumdong.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://plumdong.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python3 桥接手柄和串口实现通信</title>
    <link href="https://plumdong.github.io/2021/04/14/python%20%E6%A1%A5%E6%8E%A5%E6%89%8B%E6%9F%84%E5%92%8C%E4%B8%B2%E5%8F%A3%E5%AE%9E%E7%8E%B0%E9%80%9A%E4%BF%A1/"/>
    <id>https://plumdong.github.io/2021/04/14/python%20%E6%A1%A5%E6%8E%A5%E6%89%8B%E6%9F%84%E5%92%8C%E4%B8%B2%E5%8F%A3%E5%AE%9E%E7%8E%B0%E9%80%9A%E4%BF%A1/</id>
    <published>2021-04-13T16:00:00.000Z</published>
    <updated>2021-07-02T12:23:31.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h1><p>需要使用游戏手柄来控制平衡小车，由于游戏手柄和平衡小车不能连接，所以使用电脑作为中介实现两者通信。</p><p>需要实现以下功能</p><ol><li>接收手柄或键盘的键值</li><li>处理接受的键值</li><li>通过串口发送指定信息给下位机</li><li>读取下位机发送的消息并显示</li></ol><span id="more"></span><h1 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h1><p>Python扩展程序包的二进制文件下载网址为：</p><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p><code>pygame</code> 是一个可以读取手柄和键盘模块，我的python环境为3.7版本所以我下载的的是<code>pygame‑2.0.1‑cp37‑cp37m‑win_amd64.whl</code>。</p><p><code>pyserial</code>是一个串口通信模块，我下载的为<code>pyserial‑3.5‑py3‑none‑any.whl</code>。</p><p>下载完成后以==管理员==的身份打开命令提示符使用 pip 指令安装：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跳转到文件下载的目录</span></span><br><span class="line">C:\WINDOWS\system32&gt; <span class="built_in">cd</span> C:\Users\Administrator\Downloads</span><br><span class="line"><span class="comment"># 使用 pip 安装 文件</span></span><br><span class="line">C:\Users\Administrator\Downloads&gt; pip install pygame‑<span class="number">2.0</span>.<span class="number">1</span>‑cp37‑cp37m‑win_amd64.whl</span><br></pre></td></tr></table></figure><p><code>pyserial</code>的啊安装也是一样的。</p><p>注意：如果是使用<code>pycharm</code> 编写的程序，会提示找不到模块，因为<code>pycharm</code> 运行环境的扩展库只扫描当前项目下的，因此我是使用VScode 编写。</p><h1 id="三、程序实现"><a href="#三、程序实现" class="headerlink" title="三、程序实现"></a>三、程序实现</h1><p> 定义通信规则：为了方便起见每次只发送一个字符，直行发送 ‘q’，加速发送 ‘s’，减速发送 ‘e’，左转发送 ‘l’，右转发送 ‘r’。</p><p>第一次调试可以打开<code>print(message)</code>查看系统获取的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> serial.tools.list_ports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 串口通信端口号</span></span><br><span class="line">portx = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 串口通信 波特率</span></span><br><span class="line">Baud = <span class="number">115200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序状态</span></span><br><span class="line">state = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息</span></span><br><span class="line">message = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 串口对象</span></span><br><span class="line">ser = serial.Serial()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查并选择端口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_port</span>():</span></span><br><span class="line">    <span class="keyword">global</span> portx</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在检查可用端口。。&quot;</span>)</span><br><span class="line">    port_list = <span class="built_in">list</span>(serial.tools.list_ports.comports())</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(port_list) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无可用串口！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;序号\t名称&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(port_list)):</span><br><span class="line">            <span class="built_in">print</span>(i + <span class="number">1</span>, <span class="string">&#x27;\t&#x27;</span>, port_list[i])</span><br><span class="line"></span><br><span class="line">        n = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(port_list) != <span class="number">1</span>:</span><br><span class="line">            n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入端口序号：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        portx = <span class="built_in">str</span>(port_list[n - <span class="number">1</span>].device)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;已选择端口:&#x27;</span>, portx)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_port</span>():</span></span><br><span class="line">    <span class="keyword">global</span> portx</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ser.baudrate = Baud</span><br><span class="line">        ser.port = portx</span><br><span class="line">        ser.<span class="built_in">open</span>()  <span class="comment"># 打开串口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        ser.close()  <span class="comment"># 关闭端口</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;端口打开失败,尝试更换端口：&#x27;</span>, e)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_joystick</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;连接成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    pygame.init()</span><br><span class="line">    pygame.joystick.init()</span><br><span class="line">    <span class="keyword">while</span> state:</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        message.clear()</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                done = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.JOYBUTTONDOWN:</span><br><span class="line">                message[<span class="string">&#x27;JOYBUTTONDOWN&#x27;</span>] = event.button</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.JOYBUTTONUP:</span><br><span class="line">                message[<span class="string">&#x27;JOYBUTTONUP&#x27;</span>] = event.button</span><br><span class="line"></span><br><span class="line">        joystick_count = pygame.joystick.get_count()</span><br><span class="line">        <span class="keyword">for</span> nums <span class="keyword">in</span> <span class="built_in">range</span>(joystick_count):</span><br><span class="line"></span><br><span class="line">            joystick = pygame.joystick.Joystick(nums)</span><br><span class="line">            joystick.init()</span><br><span class="line"></span><br><span class="line">            axes = joystick.get_numaxes()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(axes):</span><br><span class="line">                axis = joystick.get_axis(i)</span><br><span class="line">                message[<span class="string">&#x27;axes&#x27;</span> + <span class="built_in">str</span>(i)] = <span class="built_in">int</span>(axis * <span class="number">10</span>)</span><br><span class="line">        <span class="comment"># print(message)#打印获取的信息</span></span><br><span class="line">        <span class="keyword">if</span> message == &#123;&#125;:  <span class="comment"># 未连接</span></span><br><span class="line">            state = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;没有找到手柄&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.get(<span class="string">&#x27;JOYBUTTONDOWN&#x27;</span>) == <span class="number">0</span>:  <span class="comment"># 直行</span></span><br><span class="line">            ser.write(<span class="string">b&#x27;z&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;直行&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.get(<span class="string">&#x27;JOYBUTTONDOWN&#x27;</span>) == <span class="number">1</span>:  <span class="comment"># 停车</span></span><br><span class="line">            ser.write(<span class="string">b&#x27;q&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;停车&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> message.get(<span class="string">&#x27;axes5&#x27;</span>) &gt;= <span class="number">0</span>:  <span class="comment"># 加速</span></span><br><span class="line">            ser.write(<span class="string">b&#x27;s&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;加速&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> message.get(<span class="string">&#x27;axes2&#x27;</span>) &gt;= <span class="number">0</span>:  <span class="comment"># 减速</span></span><br><span class="line">            ser.write(<span class="string">b&#x27;e&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;减速&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> message.get(<span class="string">&#x27;axes0&#x27;</span>) &lt;= -<span class="number">5</span>:  <span class="comment"># 左转</span></span><br><span class="line">            ser.write(<span class="string">b&#x27;l&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;左转&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> message.get(<span class="string">&#x27;axes0&#x27;</span>) &gt;= <span class="number">5</span>:  <span class="comment"># 右转</span></span><br><span class="line">            ser.write(<span class="string">b&#x27;r&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;右转&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> message.get(<span class="string">&#x27;JOYBUTTONDOWN&#x27;</span>) == <span class="number">7</span>:  <span class="comment"># 退出</span></span><br><span class="line">            state = <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;退出&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ser.in_waiting:</span><br><span class="line">            <span class="built_in">print</span>(ser.read(ser.in_waiting).decode(<span class="string">&quot;gbk&quot;</span>), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> set_port() == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> open_port() == <span class="number">1</span>:</span><br><span class="line">        send_joystick()</span><br><span class="line"></span><br><span class="line">    ser.close()  <span class="comment"># 关闭端口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;按任意键退出！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">需要使用游戏手柄来控制平衡小车，由于游戏手柄和平衡小车不能连接，所以使用电脑作为中介实现两者通信。</summary>
    
    
    
    <category term="python3基础" scheme="https://plumdong.github.io/categories/python3%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="python3" scheme="https://plumdong.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>并发编程三大特性：可见性，有序性，原子性</title>
    <link href="https://plumdong.github.io/2021/02/20/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%EF%BC%9A%E5%8F%AF%E8%A7%81%E6%80%A7%EF%BC%8C%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%8C%E5%8E%9F%E5%AD%90%E6%80%A7/"/>
    <id>https://plumdong.github.io/2021/02/20/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%EF%BC%9A%E5%8F%AF%E8%A7%81%E6%80%A7%EF%BC%8C%E6%9C%89%E5%BA%8F%E6%80%A7%EF%BC%8C%E5%8E%9F%E5%AD%90%E6%80%A7/</id>
    <published>2021-02-19T16:00:00.000Z</published>
    <updated>2021-07-11T15:11:23.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、线程的可见性"><a href="#一、线程的可见性" class="headerlink" title="一、线程的可见性"></a>一、线程的可见性</h1><ol><li>线程在执行时会把使用的变量从内存中读取到<strong>线程的本地缓存</strong>。</li><li>线程在使用这个变量时会直接在本地缓存中读取，并不会取内存中读。</li><li>也就是说此时内存中变量的值改变时，该线程是察觉不到的，也就是导致了线程的不可见性。</li></ol><h2 id="1-线程不可见案例"><a href="#1-线程不可见案例" class="headerlink" title="1. 线程不可见案例"></a>1. 线程不可见案例</h2><p>​        新建一个线程在变量<code>runing</code>等于<code>false</code>时结束，主线程等待100毫秒（防止新线程未启动）把变量置位 <code>false</code>。</p><p>但是新线程无论等多久都不会结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> runing = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;启动&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (runing)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;结束&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        runing = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-解决方案：通过-volatile-修饰变量"><a href="#2-解决方案：通过-volatile-修饰变量" class="headerlink" title="2. 解决方案：通过 volatile 修饰变量"></a>2. 解决方案：通过 volatile 修饰变量</h2><p>​        volatile 关键字的作用是当变量发生改变时，其他其他线程本地缓存该变量失效，需要重新从主存中读取。因此下面程序重4中新建的线程会立即结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> runing = <span class="keyword">true</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;启动&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (runing)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;结束&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        runing = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、线程的有序性"><a href="#二、线程的有序性" class="headerlink" title="二、线程的有序性"></a>二、线程的有序性</h1><ol><li>处理器为了提高程序运行效率，可能会对输入代码进行优化，发生指令重排序现象。</li><li>不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是会保证程序最终执行结果和代码顺序执行的结果是一致的。</li><li>指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</li></ol><h2 id="1-指令重排案例"><a href="#1-指令重排案例" class="headerlink" title="1. 指令重排案例"></a>1. 指令重排案例</h2><p>​    一般情况下程序会经常发生指令重排，但较难发生语句重排，因为一条语句由多条指令组成，较难发生多条指令重排序的情况。</p><p>​        但是下面的案例可以证明确实存在语句重排现象：程序中只有当<code>x==0 &amp;&amp; y == 0</code>时才会退出循环，如果不发生指令重排序无论两个线程如何执行都不会发生满足上述条件情况。</p><p>​        满足上述条件的情况为线程1先启动且先执行<code>x=b</code>，此时x为0，a为0，然后切换到线程2执行<code>b=1;y=a</code>（此时与这两条语句执行顺序无关），此时y也为0。满足了上述条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>,y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">0</span>,b = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            x = <span class="number">0</span>;y = <span class="number">0</span>;</span><br><span class="line">            a = <span class="number">0</span>;b = <span class="number">0</span>;</span><br><span class="line">            Thread one = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                a=<span class="number">1</span>;</span><br><span class="line">                x=b;</span><br><span class="line">            &#125;);</span><br><span class="line">            Thread other = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                b=<span class="number">1</span>;</span><br><span class="line">                y=a;</span><br><span class="line">            &#125;);</span><br><span class="line">            one.start();other.start();</span><br><span class="line">            one.join();other.join();</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">0</span> &amp;&amp; y == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;第 &quot;</span>+i+<span class="string">&quot; 次循环，x=&quot;</span>+x+<span class="string">&quot;;y=&quot;</span>+y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 第 949632 次循环，x=0;y=0</span></span><br></pre></td></tr></table></figure><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h2><p>​        通过volatile关键字修饰变量来保证对该变量操作时不会乱序。还可以通过synchronized和Lock来保证有序性，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p><h1 id="三、线程原子性"><a href="#三、线程原子性" class="headerlink" title="三、线程原子性"></a>三、线程原子性</h1><p>​        即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><h2 id="1-无法保证原子性案例"><a href="#1-无法保证原子性案例" class="headerlink" title="1.无法保证原子性案例"></a>1.无法保证原子性案例</h2><ol><li>建立两个线程分别同时对变量x进行五千次加1操作，理论结果是<code>x=10000</code>,一般最终得到的结果却是小于10000的数，即便使用volatile关键字修饰也无法保证原子性。</li><li>原因是一个线程在执行<code>x++</code>时，被另一个线程打断，两个线程基于同一个旧的x的数值进行了加一操作，因此最终得到的数值会偏小。</li><li>下图是在x=100时两个线程同时对其进行加一操作引发的原子性问题。</li></ol><p><img src="/myimages/202107112252.png" alt="线程原子性验证"></p><p>原子性问题案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Runnable r = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread one = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread tow = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        one.start();tow.start();</span><br><span class="line">        one.join();tow.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;x=&quot;</span>+x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出  x=8334</span></span><br></pre></td></tr></table></figure><h2 id="2-解决方案-1"><a href="#2-解决方案-1" class="headerlink" title="2.解决方案"></a>2.解决方案</h2><p>​        通过synchronized关键字或者Lock锁对象锁住一块区域保证程序执行时的原子性，下面两组代码分别对其实现，最终变量x的值是固定的10000。</p><p>通过synchronized关键字方法解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Runnable r = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (Demo.class)&#123;</span><br><span class="line">                    x++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread one = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread tow = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        one.start();tow.start();</span><br><span class="line">        one.join();tow.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;x=&quot;</span>+x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过ReentrantLock可重入锁解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Runnable r = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                    x++;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread one = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread tow = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        one.start();tow.start();</span><br><span class="line">        one.join();tow.join();</span><br><span class="line">        System.out.println(<span class="string">&quot;x=&quot;</span>+x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><ol><li><p>并发编程三大特性的重要性：并发程序想要正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p></li><li><p>在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p></li><li><p>通过volatile关键字可以保证线程间的的可见性和有序性，但不能保证原子性。原子性可以通过synchronized和Lock保证。</p></li></ol>]]></content>
    
    
    <summary type="html">一、线程的可见性 1. 线程在执行时会把使用的变量从内存中读取到线程的本地缓存。 2. 线程在使用这个变量时会直接在本地缓存中读取，并不会取内存中读。 3. 也就是说此时内存中变量的值改变时，该线程是察觉不到的，也就是导致了线程的不可见性。</summary>
    
    
    
    <category term="Java基础" scheme="https://plumdong.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://plumdong.github.io/tags/Java/"/>
    
    <category term="多线程" scheme="https://plumdong.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaJUC源码解析</title>
    <link href="https://plumdong.github.io/2020/12/21/JavaJUC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://plumdong.github.io/2020/12/21/JavaJUC%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2020-12-20T16:00:00.000Z</published>
    <updated>2021-07-11T09:27:33.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Java-JUC是什么"><a href="#一、Java-JUC是什么" class="headerlink" title="一、Java JUC是什么"></a>一、Java JUC是什么</h1><p><code>JUC</code>是 <code>Java JDK1.5 </code>版本后提供多种并发容器类工具包。  全名：<code>java.util.concurrent</code></p><h2 id="1-什么是线程-进程"><a href="#1-什么是线程-进程" class="headerlink" title="1. 什么是线程/进程"></a>1. 什么是线程/进程</h2><ol><li>进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。</li><li>线程通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，</li><li>通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。</li></ol><span id="more"></span><h2 id="2-什么是并发-并行"><a href="#2-什么是并发-并行" class="headerlink" title="2. 什么是并发/并行"></a>2. 什么是并发/并行</h2><p>并发：是指多个工作交替进行，只有一条任务线</p><p>并行：是指多个工作同时进行，有多个任务线</p><h1 id="二、volatile-关键字"><a href="#二、volatile-关键字" class="headerlink" title="二、volatile 关键字"></a>二、volatile 关键字</h1><p>当多个线程共享数据时，可以保证内存中的数据可见。</p><p>相较于 synchronized 是一种轻量的同步策略</p><h1 id="三、并发举例"><a href="#三、并发举例" class="headerlink" title="三、并发举例"></a>三、并发举例</h1><h2 id="1-生产者-消费者举例"><a href="#1-生产者-消费者举例" class="headerlink" title="1. 生产者/消费者举例"></a>1. 生产者/消费者举例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目： 两个生产者两个消费者，缓存区大小为1</span></span><br><span class="line"><span class="comment"> * 1. 在高内聚低耦合的前提下：线程     操作     资源类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        Runnable r = () -&gt; &#123;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) ticket.increment();&#125;;</span><br><span class="line">        Runnable r2 = () -&gt; &#123;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) ticket.decrease();&#125;;</span><br><span class="line">        <span class="keyword">new</span> Thread(r, <span class="string">&quot;生产者A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r, <span class="string">&quot;生产者B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r, <span class="string">&quot;生产者C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r2, <span class="string">&quot;消费者A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r2, <span class="string">&quot;消费者B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(r2, <span class="string">&quot;消费者C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span></span>&#123;       <span class="comment">//资源类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加一操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(number!=<span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t现存面包数目：&quot;</span>+number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减一操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(number==<span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t现存面包数目：&quot;</span>+number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-精确顺序执行"><a href="#2-精确顺序执行" class="headerlink" title="2. 精确顺序执行"></a>2. 精确顺序执行</h2><p><code>lock</code>配和<code>Condition</code>实现精准控制线程唤醒，避免把线程全部唤醒，造成资源浪费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目： 按顺序，线程A打印5次，线程B打印10次，线程C打印15次</span></span><br><span class="line"><span class="comment"> *      循环10次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) ticket.printA5();&#125;,<span class="string">&quot;A&quot;</span>).start();;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) ticket.printB10();&#125;,<span class="string">&quot;B&quot;</span>).start();;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) ticket.printC15();&#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span></span>&#123;       <span class="comment">//资源类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;     <span class="comment">//  1：A 2：B 3：C</span></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition conditionA = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition conditionB = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition conditionC = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printA5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(number!=<span class="number">1</span>) &#123;</span><br><span class="line">                conditionA.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            conditionB.signal();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printB10</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(number!=<span class="number">2</span>) &#123;</span><br><span class="line">                conditionB.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            conditionC.signal();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printC15</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(number!=<span class="number">3</span>) &#123;</span><br><span class="line">                conditionC.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">15</span>;i++)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            conditionA.signal();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、JUC常用类举例"><a href="#四、JUC常用类举例" class="headerlink" title="四、JUC常用类举例"></a>四、JUC常用类举例</h1><h2 id="1-CopyOnWriteArrayList"><a href="#1-CopyOnWriteArrayList" class="headerlink" title="1. CopyOnWriteArrayList"></a>1. CopyOnWriteArrayList</h2><p><code>CopyOnWriteArrayList</code>是一个线程安全队列，解决<code>ArrayList</code>线程不安全问题。</p><h3 id="1）应用举例"><a href="#1）应用举例" class="headerlink" title="1）应用举例"></a>1）应用举例</h3><p>普通<code>ArrayList</code>类不是线程安全的，因此在多线程情况下执行时会报：==<code>ConcurrentModificationException</code>并发修改异常==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                list.add(<span class="string">&quot;&quot;</span>+finalI);</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>CopyOnWriteArrayList</code>类保证多线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                list.add(<span class="string">&quot;&quot;</span>+finalI);</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）原理："><a href="#2）原理：" class="headerlink" title="2）原理："></a>2）原理：</h3><p>写时复制：每次向队列中添加元素时，即调用<code>CopyOnWriteArrayList</code>类的add()方法时。会拷贝一个新的一样的数组，然后把要添加的元素放入新的数组中，最后将新的数组替换掉原来的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-CopyOnWriteArraySet"><a href="#2-CopyOnWriteArraySet" class="headerlink" title="2. CopyOnWriteArraySet"></a>2. CopyOnWriteArraySet</h2><p><code>CopyOnWriteArraySet</code>线程安全的集合类，解决<code>HashSet</code>线程不安全问题。</p><h3 id="1）应用举例-1"><a href="#1）应用举例-1" class="headerlink" title="1）应用举例"></a>1）应用举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">30</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                set.add(<span class="string">&quot;&quot;</span>+finalI);</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）HashSet与HashMap关系"><a href="#2）HashSet与HashMap关系" class="headerlink" title="2）HashSet与HashMap关系"></a>2）HashSet与HashMap关系</h3><p><code>HashSet</code>的底层就是<code>HashMap</code>，因为<code>HashSet</code>的构造方法就是创造一个<code>HashMap</code>对象。</p><p><code>HashSet</code>和<code>HashMap</code>都是线程不安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>HashSet</code>的add方法实质是：使用<code>HashMap</code>的put方法把需要添加的元素作为键，值是一个写死的常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-ConcurrentHashMap"><a href="#3-ConcurrentHashMap" class="headerlink" title="3. ConcurrentHashMap"></a>3. ConcurrentHashMap</h2><p><code>ConcurrentHashMap</code>是线程安全的映射类，解决<code>HashMap</code>线程不安全问题。</p><p>用法与线程安全类一致，使用<code>Map</code>引用。</p><h2 id="4-Callable"><a href="#4-Callable" class="headerlink" title="4. Callable"></a>4. Callable</h2><p>实现<code>Callable</code>接口是第三种获得多线程的方式，相对于前两种（实现<code>Runnable</code>接口和继承Thread类）这个第三种方式可以获取线程执行后的返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        FutureTask futrueTask = <span class="keyword">new</span> FutureTask(<span class="keyword">new</span> MyThread());</span><br><span class="line">        <span class="keyword">new</span> Thread(futrueTask, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        System.out.println(futrueTask.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将要执行的命令写入Callable接口中的<code>call()</code>方法，也可以指定返回值类型。</p><p>然后将线程类实例打包到<code>FutureTask</code>类，传入<code>Thread</code>类中执行。</p><ul><li><code>FutureTask.get()</code>方法可以获取线程执行的返回值，如果线程未执行结束，将会等待线程结束。</li></ul><h1 id="五、JUC常用辅助类"><a href="#五、JUC常用辅助类" class="headerlink" title="五、JUC常用辅助类"></a>五、JUC常用辅助类</h1><h2 id="1-CountDownLatch"><a href="#1-CountDownLatch" class="headerlink" title="1.  CountDownLatch"></a>1.  CountDownLatch</h2><p>允许一个或多个线程等待直到在其他线程中执行完成的同步辅助类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等待其他线程结束后，主线程再结束.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numberThreads = <span class="number">10</span>;</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(numberThreads);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numberThreads;i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;结束。。。&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();<span class="comment">//等待其他线程结束</span></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-CyclicBarrier"><a href="#2-CyclicBarrier" class="headerlink" title="2. CyclicBarrier"></a>2. CyclicBarrier</h2><p><code>CyclicBarrier</code>是允许一组线程全部等待彼此达到共同屏障点的辅助类。</p><p> 屏障被称为循环，因为它可以在等待的线程被释放之后重新使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numberThreads = <span class="number">10</span>;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(numberThreads,() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;全部就绪！！！！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numberThreads;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t准备就绪！&quot;</span>);</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t结束！&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CyclicBarrier</code>在定义时也可以不指定要执行的语句，如果指定则由最后进入的进程执行。</p><h2 id="3-Semaphore"><a href="#3-Semaphore" class="headerlink" title="3. Semaphore"></a>3. Semaphore</h2><p><code>Semaphore</code>类用于控制并发线程数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numberThreads = <span class="number">5</span>;</span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(numberThreads);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numberThreads + <span class="number">10</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t抢到了执行权！！！&quot;</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t执行结束！！！&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-ReadWriteLock"><a href="#4-ReadWriteLock" class="headerlink" title="4. ReadWriteLock"></a>4. ReadWriteLock</h2><p><code>ReadWriteLock</code>类维护一个Lock类，允许多个线程同时进行读操作，不允许多个线程同时读写和同时写操作。</p><p>可以保证进行写操作时数据的一致性.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">十个线程线程写操作，十个线程进行读操作，</span></span><br><span class="line"><span class="comment">多个线程读操作可以同时进行，写操作只能单独依次进行.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        MyMap myMap = <span class="keyword">new</span> MyMap();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                myMap.put(finalI + <span class="string">&quot;&quot;</span>, finalI + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span> ;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                myMap.get(finalI + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMap</span></span>&#123;</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, String value)</span></span>&#123;</span><br><span class="line">        readWriteLock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t ---写入数据&quot;</span> + key);</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t ---写入结束&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            readWriteLock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        readWriteLock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t ---读取数据&quot;</span>);</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">            Object res = map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;\t ---读取结束&quot;</span> + res);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            readWriteLock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、线程池的使用"><a href="#六、线程池的使用" class="headerlink" title="六、线程池的使用"></a>六、线程池的使用</h1><h2 id="1-线程池类接口的继承实现关系图："><a href="#1-线程池类接口的继承实现关系图：" class="headerlink" title="1. 线程池类接口的继承实现关系图："></a>1. 线程池类接口的继承实现关系图：</h2><p><img src="/myimages/image-20201228215230382.png" alt="线程池类接口的继承实现关系图"></p><h2 id="2-Executors类常用方法"><a href="#2-Executors类常用方法" class="headerlink" title="2. Executors类常用方法"></a>2. Executors类常用方法</h2><p>创建线程池可以使用<code>java.util.concurrent.Executors</code>类的不同静态方法，返回不同的线程池。</p><ol><li><code>static ExecutorService newCachedThreadPool()</code> 函数返回一个根据需要创建新线程的线程池，在可用时重新使用以前的线程。 </li><li><code>static ExecutorService newFixedThreadPool(int nThreads)  </code>创建一个固定线程数量，无上限等待队列的线程池。</li><li><code>static ExecutorService newSingleThreadExecutor() </code>创建单个线程的线程池</li></ol><p>==【建议：线程池不允许使用Executors去创建】==</p><ul><li><code>FixedThreadPool</code>和<code>SingleThreadPool</code>允许的请求队列长度为<code>Integer.MAX_VALUE</code>，可能会堆积大量请求导致OOM</li><li><code>CachedThreadPool</code>和<code>ScheduledThreadPool</code>允许的创建线程数量为<code>Integer.MAX_VALUE</code>，可能会创建大量线程导致OOM</li><li>因此建议使用<code>ThreadPoolExecutor</code>类手动控制线程池的创建。</li></ul><h2 id="3-线程池源码解析"><a href="#3-线程池源码解析" class="headerlink" title="3.线程池源码解析"></a>3.线程池源码解析</h2><ul><li><p><code>ThreadPoolExecutor</code>类是常用的线程池实现类</p></li><li><p><code>Executors</code>类返回的线程池都是通过新建一个<code>ThreadPoolExecutor</code>返回</p></li></ul><p><code>ThreadPoolExecutor</code>构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure><h3 id="1）参数说明"><a href="#1）参数说明" class="headerlink" title="1）参数说明"></a>1）参数说明</h3><ul><li><p><code>corePoolSize</code>：线程池种的线程数量，即使线程空闲也不会销毁。</p></li><li><p><code>maximumPoolSize</code>：线程池中最大的线程数，一旦超过这个数量，就会采取饱和策略</p></li><li><p><code>keepAliveTime</code>：时间，新增的线程空闲时间一旦超过这个量就会被销毁</p></li><li><p><code>unit</code>：前者的之间单位，例如秒（TimeUnit.SECONDS）</p></li><li><p><code>workQueue</code>：线程等待队列。</p></li><li><p><code>threadFactory</code>：可选参数，线程生产的工厂，可自定义产生新线程，一般使用默认值，默认值为Executors.defaultThreadFactory()</p></li><li><p><code>handler</code>：可选参数，饱和策略，当等待队列满且线程数达到最大值时需要执行的策略，默认AbortPolicy类抛出异常。</p></li></ul><h3 id="2）饱和策略"><a href="#2）饱和策略" class="headerlink" title="2）饱和策略"></a>2）饱和策略</h3><ol><li><code>AbortPolicy</code>默认饱和策略，直接抛出 java.util.concurrent.RejectedExecutionException 异常，并结束线程池，但是主线程还是会正常运行。</li><li><code>CallerRunsPolicy</code>调用者运行机制，该策略不会抛弃任务，会将任务退还给调用者执行。</li><li><code>DiscardOldestPolicy</code>抛弃队列中等待最久的任务，然后把当前任务加入队列中。</li><li><code>DiscardPolicy</code>默默抛弃无法处理的任务，不做任何处理也不抛出异常，如果允许任务丢失应选用这种策略。</li></ol><p>CallerRunsPolicy举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                <span class="number">4</span>,</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">2</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                threadPoolExecutor.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;\t执行！！！&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPoolExecutor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）选择最大线程数"><a href="#3）选择最大线程数" class="headerlink" title="3）选择最大线程数"></a>3）选择最大线程数</h3><ol><li><p>CPU密集型：</p><p>​    要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码</p><p>最大线程数应为CPU核心数加一，即<code>Runtime.getRuntime().availableProcessors() + 1</code></p></li><li><p>IO密集型：  </p><p>CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度。比如Web应用</p></li></ol><p>​    最大线程数应为CPU核心数乘2加一，即<code>Runtime.getRuntime().availableProcessors()*2 + 1</code></p><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>在<code>java.util.function</code>包中定义了常用的函数接口，用于快速实现接口。</p><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer 消费型接口</td><td>T</td><td>void</td><td>对类型为T的对象应用操作。方法为：void accept(T t)</td></tr><tr><td>Supplier 供给型接口</td><td>无</td><td>T</td><td>返回类型为T的对象。方法为：T get()</td></tr><tr><td>Function 函数型接口</td><td>T</td><td>R</td><td>对类型为T的对象应用操作，并返回结果。方法为：R apply(T t)</td></tr><tr><td>Predicate 断定型接口</td><td>T</td><td>boolean</td><td>确定类型为T的对象是否满足某约束，并返回boolean值。方法为：boolean test(T t)</td></tr></tbody></table><h2 id="1-函数型接口举例"><a href="#1-函数型接口举例" class="headerlink" title="1. 函数型接口举例"></a>1. 函数型接口举例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//函数型接口,要求有输入参数和返回值，输入参数类型为String，返回值类型为Integer</span></span><br><span class="line">        Function&lt;String, Integer&gt; function = s -&gt; Integer.parseInt(s) * <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Function 接口测试：&quot;</span> + function.apply(<span class="string">&quot;2654&quot;</span>));</span><br><span class="line"><span class="comment">//断定型接口，自定义输入参数类型，返回值参数类型始终为boolean</span></span><br><span class="line">        Predicate&lt;String&gt; predicate = s -&gt; s==<span class="string">&quot;a&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Predicate 接口测试：&quot;</span> + predicate.test(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"><span class="comment">//消费型接口，只有输入参数，没有返回值</span></span><br><span class="line">        Consumer&lt;String&gt; consumer = s -&gt; System.out.println(<span class="string">&quot;Consumer 接口测试：&quot;</span> + s);</span><br><span class="line">        consumer.accept(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="comment">//供给型接口，只有返回值，没有输入参数</span></span><br><span class="line">        Supplier supplier = () -&gt; <span class="string">&quot;Supplier 接口测试&quot;</span>;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Stream流式计算"><a href="#Stream流式计算" class="headerlink" title="Stream流式计算"></a>Stream流式计算</h1><h2 id="1-filter"><a href="#1-filter" class="headerlink" title="1. filter"></a>1. filter</h2><p>函数原型：<code>Stream&lt;T&gt; filter(Predicate&lt;T&gt; predicate)</code> </p><p>需要输入一个断定型接口，用于筛选数据，返回筛选后的流。</p><h2 id="2-forEach"><a href="#2-forEach" class="headerlink" title="2. forEach"></a>2. forEach</h2><p>函数原型：<code>void forEach(Consumer&lt;T&gt; action) </code></p><p>输入一个消费型接口，无返回值。</p><h2 id="3-map"><a href="#3-map" class="headerlink" title="3.map"></a>3.map</h2><p>函数原型：<code>Stream&lt;R&gt; map(Function&lt;T, R&gt; mapper)  </code></p><p>输入一个函数式接口，对流中的数据进行操作，返回指定类型的数据。</p><h2 id="4-collect"><a href="#4-collect" class="headerlink" title="4. collect"></a>4. collect</h2><p>函数原型：<code>R collect(Collector&lt;T,A,R&gt; collector)  </code></p><p>将数据流转成指定的数据类型，返回值为指定的数据类型。</p><h2 id="5-Stream流举例："><a href="#5-Stream流举例：" class="headerlink" title="5. Stream流举例："></a>5. Stream流举例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">            list.add(i);</span><br><span class="line">        list.stream().filter(t -&gt; t%<span class="number">2</span> == <span class="number">0</span>).filter(t -&gt; t&lt;=<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list2 = list.stream().map(x -&gt; <span class="string">&quot;x = &quot;</span> + x).collect(Collectors.toList());</span><br><span class="line">        System.out.println(list2);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list3 = list.stream().sorted((x, y) -&gt; y-x).collect(Collectors.toList());</span><br><span class="line">        System.out.println(list3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h1><h2 id="1-ForkJoin继承关系图"><a href="#1-ForkJoin继承关系图" class="headerlink" title="1.ForkJoin继承关系图"></a>1.ForkJoin继承关系图</h2><p><img src="/myimages/image-20201230094708636.png" alt="ForkJoin继承关系图"></p><h2 id="2）应用"><a href="#2）应用" class="headerlink" title="2）应用"></a>2）应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyTask myTask = <span class="keyword">new</span> MyTask(<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        ForkJoinTask&lt;Integer&gt; forkJoinTask = pool.submit(myTask);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(forkJoinTask.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            pool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer ADJUSY_VALUE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> begin;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.begin = begin;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((begin - end) &lt;= ADJUSY_VALUE)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=begin;i&lt;=end;i++)&#123;</span><br><span class="line">                res = res + i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (begin + end)/<span class="number">2</span>;</span><br><span class="line">            MyTask myTask1 = <span class="keyword">new</span> MyTask(begin, mid);</span><br><span class="line">            MyTask myTask2 = <span class="keyword">new</span> MyTask(mid+<span class="number">1</span>, end);</span><br><span class="line">            myTask1.fork();</span><br><span class="line">            myTask1.fork();</span><br><span class="line">            res = myTask1.join() + myTask2.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、Java-JUC是什么&quot;&gt;&lt;a href=&quot;#一、Java-JUC是什么&quot; class=&quot;headerlink&quot; title=&quot;一、Java JUC是什么&quot;&gt;&lt;/a&gt;一、Java JUC是什么&lt;/h1&gt;&lt;p&gt;&lt;code&gt;JUC&lt;/code&gt;是 &lt;code&gt;Java JDK1.5 &lt;/code&gt;版本后提供多种并发容器类工具包。  全名：&lt;code&gt;java.util.concurrent&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-什么是线程-进程&quot;&gt;&lt;a href=&quot;#1-什么是线程-进程&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是线程/进程&quot;&gt;&lt;/a&gt;1. 什么是线程/进程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。&lt;/li&gt;
&lt;li&gt;线程通常在一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程可以利用进程所拥有的资源，在引入线程的操作系统中，&lt;/li&gt;
&lt;li&gt;通常都是把进程作为分配资源的基本单位，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的程度。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://plumdong.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://plumdong.github.io/tags/Java/"/>
    
    <category term="多线程" scheme="https://plumdong.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Springboot开发遇到的问题</title>
    <link href="https://plumdong.github.io/2020/12/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    <id>https://plumdong.github.io/2020/12/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-08T16:00:00.000Z</published>
    <updated>2021-07-11T09:26:15.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、-springboot之间版本对应问题"><a href="#一、-springboot之间版本对应问题" class="headerlink" title="一、 springboot之间版本对应问题"></a>一、 springboot之间版本对应问题</h1><span id="more"></span><ol><li>Spring Boot 不同版本间差距较大</li><li>版本号的第三位影响不大，但是版本号的第二位不同则大概率是不兼容的</li><li>因此Spring Boot 版本要慎重选择</li></ol><table><thead><tr><th>Spring Boot版本</th><th>Spring Cloud版本</th><th>Spring Cloud Alibaba版本</th></tr></thead><tbody><tr><td>2.2.6.RELEASE</td><td>Hoxton.SR9</td><td>2.2.3.RELEASE</td></tr></tbody></table><p>Spring Boot 与 Spring Cloud对应关系，详细信息网址：<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></p><p>Spring Cloud 当前可用版本，详细信息网址： <a href="https://spring.io/projects/spring-cloud#learn">https://spring.io/projects/spring-cloud#learn</a></p><p>Spring Cloud Alibaba版本 与Spring Cloud 对应关系： <a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">Spring Cloud Alibaba版本说明</a></p><h1 id="二、Win下nacos-server-2-0-0启动报错java-io-IOException-java-lang-IllegalArgumentException-db-num-is-null"><a href="#二、Win下nacos-server-2-0-0启动报错java-io-IOException-java-lang-IllegalArgumentException-db-num-is-null" class="headerlink" title="二、Win下nacos-server-2.0.0启动报错java.io.IOException java.lang.IllegalArgumentException db.num is null"></a>二、Win下nacos-server-2.0.0启动报错java.io.IOException java.lang.IllegalArgumentException db.num is null</h1><h2 id="1-报错现象"><a href="#1-报错现象" class="headerlink" title="1.报错现象"></a>1.报错现象</h2><p>Win环境下启动nacos提示下列信息：</p><!--more--><p><img src="/myimages/202012092042.png" alt="在这里插入图片描述"></p><h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h2><p>原因是因为nacos默认集群启动，只需要将其修改为单机启动即可</p><p>将<code>startup.cmd</code>文件以为本方式打开，大约在27行修改<code>set MODE=&quot;cluster&quot;</code>为<code>set MODE=&quot;standalone&quot;</code>。</p><p>即修改为下列形式，其中<code>rem</code>为行注释</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">rem set MODE=&quot;cluster&quot;</span></span><br><span class="line"><span class="built_in">set</span> <span class="built_in">MODE</span>=&quot;standalone&quot;</span><br></pre></td></tr></table></figure><h1 id="三、前后端分离项目跨域问题"><a href="#三、前后端分离项目跨域问题" class="headerlink" title="三、前后端分离项目跨域问题"></a>三、前后端分离项目跨域问题</h1><h2 id="1-报错信息："><a href="#1-报错信息：" class="headerlink" title="1. 报错信息："></a>1. 报错信息：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://localhost:8081/****&#x27; from origin &#x27;http://localhost:3000&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>所请求的资源上没有“ Access-Control-Allow-Origin”标头。 </p><h2 id="2-问题分析"><a href="#2-问题分析" class="headerlink" title="2. 问题分析"></a>2. 问题分析</h2><ol><li>当使用ajax访问远程服务器时，出于安全的考虑，默认禁止跨域访问导致的。</li><li>也就是使用 ajax 只能请求当前ip+端口号下面的接口，一旦ip和端口号不同时就会被拦截</li></ol><p>springboot下的注解<code>@CrossOrigin</code>是允许进行跨域请求的注释.</p><h2 id="3-解决办法"><a href="#3-解决办法" class="headerlink" title="3. 解决办法"></a>3. 解决办法</h2><p>对于springboot项目：</p><p>在<code>controller</code>包下文件的类名前添加<br><code>org.springframework.web.bind.annotation</code>下的<code>@CrossOrigin</code>注解</p><h1 id="四、Vue-运行报错，无法运行nuxt"><a href="#四、Vue-运行报错，无法运行nuxt" class="headerlink" title="四、Vue 运行报错，无法运行nuxt"></a>四、Vue 运行报错，无法运行nuxt</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! ylgh@1.0.0 dev: `nuxt`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the ylgh@1.0.0 dev script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br></pre></td></tr></table></figure><ol><li><p>重新下载node最新版，并在环境变量中替换当前node</p></li><li><p>删除<code>node_modules</code>和<code>package-lock.json</code>文件</p></li><li><p>重新打开cmd窗口到当前项目下，执行<code>node -v</code>查看版本是否是下载的最新版</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如果是则执行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">下载依赖</span></span><br><span class="line">npm -install</span><br><span class="line"><span class="meta">#</span><span class="bash">重新运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、-springboot之间版本对应问题&quot;&gt;&lt;a href=&quot;#一、-springboot之间版本对应问题&quot; class=&quot;headerlink&quot; title=&quot;一、 springboot之间版本对应问题&quot;&gt;&lt;/a&gt;一、 springboot之间版本对应问题&lt;/h1&gt;</summary>
    
    
    
    <category term="SpringBoot" scheme="https://plumdong.github.io/categories/SpringBoot/"/>
    
    
    <category term="SpringBoot" scheme="https://plumdong.github.io/tags/SpringBoot/"/>
    
    <category term="Spring" scheme="https://plumdong.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>鸡蛋掉落——动态规划</title>
    <link href="https://plumdong.github.io/2020/11/21/%E9%B8%A1%E8%9B%8B%E6%8E%89%E8%90%BD-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://plumdong.github.io/2020/11/21/%E9%B8%A1%E8%9B%8B%E6%8E%89%E8%90%BD-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-11-20T16:00:00.000Z</published>
    <updated>2021-07-11T09:25:05.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。1 &lt;= K &lt;= 100</p><p>1 &lt;= N &lt;= 10000</p><p>每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。</p><p>你知道存在楼层 F ，满足 0 &lt;= F &lt;= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。</p><p>每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 &lt;= X &lt;= N）。</p><p>你的目标是确切地知道 F 的值是多少。</p><p>无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？</p><span id="more"></span><h2 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h2><p>输入：K = 1, N = 2</p><p>输出：2</p><p>解释：<br>鸡蛋从 1 楼掉落。如果它碎了，我们肯定知道 F = 0 。<br>否则，鸡蛋从 2 楼掉落。如果它碎了，我们肯定知道 F = 1 。<br>如果它没碎，那么我们肯定知道 F = 2 。<br>因此，在最坏的情况下我们需要移动 2 次以确定 F 是多少。</p><h2 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h2><p>输入：K = 2, N = 6</p><p>输出：3</p><h2 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h2><p>输入：K = 3, N = 14</p><p>输出：4</p><h1 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h1><p>题目中并没有说鸡蛋什么时候会碎，但是需要知道的是鸡蛋一定是恰好摔碎再最坏情况下的那层楼，即鸡蛋破碎一定发生在搜索区间穷尽时</p><h2 id="思路一、"><a href="#思路一、" class="headerlink" title="思路一、"></a>思路一、</h2><ol><li><p>首先考虑如果只有一个鸡蛋的情况下，我们就必须从1楼开始到N楼一层一层的尝试，也就是需要N次。</p></li><li><p>然后假设有K个鸡蛋，第一个鸡蛋开始从X层楼向下丢，就会分为碎和不碎两种情况：</p></li><li><p>第一种情况：鸡蛋没碎就会剩余K个蛋，N-X层楼，然后递归求解</p></li><li><p>第二种情况：鸡蛋碎了就会剩余K-1个蛋，X-1层楼，然后递归求解</p></li><li><p>最后求的两种解取最大值加一就等到了K个鸡蛋N层楼需要移动的次数</p></li><li><p>定义二维数组P存放K个鸡蛋N层楼所有情况的最优解，其中：<code> P(K,N)= 1+ min(max(dp(K−1,X−1),dp(K,N−X)))，1≤X≤N</code></p></li><li><p>此种解法时间复杂度O(KN^2)，空间复杂度为O(KN)，都非常高</p></li></ol><h2 id="思路二、"><a href="#思路二、" class="headerlink" title="思路二、"></a>思路二、</h2><ol><li><p>首先考虑如果只能移动一次的话，无论你有多少个鸡蛋，你最多只能确定1层楼</p></li><li><p>假设有K个鸡蛋，需要至少移动T次才能找N层楼的解，因此要找到P[K][T]&gt;=N时最小的T</p></li><li><p>同理用动态规划找满足条件的T，每次也要分为鸡蛋碎和不碎两种可能</p></li><li><p>第一种情况：鸡蛋没碎，那么对应的是 P[K,T−1]，也就是说在这一层的上方可以有 P[K,T-1]层；+</p></li><li><p>第二种情况：鸡蛋碎了，那么对应的是 P[K−1,T−1]，也就是说在这一层的下方可以有 P[T-1，K - 1]层。</p></li><li><p>定义二维数组P需要T次移动和有K个鸡蛋时能证明最大的层数为<code>p[K][T] = 1 + p[K - 1][T - 1] + p[K][T-1];</code></p></li><li><p>时间复杂度O(KN)，空间复杂度为O(KN)</p></li></ol><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><h2 id="思路一、-1"><a href="#思路一、-1" class="headerlink" title="思路一、"></a>思路一、</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">101</span>][<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k,n;</span><br><span class="line">    cin&gt;&gt;k&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">backtrack</span>(k, n);</span><br><span class="line">    cout&lt;&lt;p[k][n]&lt;&lt;endl;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=k;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=n;j++)</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;p[i][j]&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>)&#123;</span><br><span class="line">        p[k][n] = n;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p[k][n] == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> res = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++) &#123;</span><br><span class="line">            res = <span class="built_in">min</span>(res, <span class="built_in">max</span>(<span class="built_in">backtrack</span>(k<span class="number">-1</span>, x<span class="number">-1</span>), <span class="built_in">backtrack</span>(k, n-x)) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        p[k][n] = res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[k][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路二、-1"><a href="#思路二、-1" class="headerlink" title="思路二、"></a>思路二、</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">101</span>][<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k,n;</span><br><span class="line">    cin&gt;&gt;k&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">        p[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">2</span>;t&lt;=n;t++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)&#123;</span><br><span class="line">            p[j][t] = <span class="number">1</span> + p[j - <span class="number">1</span>][t - <span class="number">1</span>] + p[j][t<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p[k][t] &gt;= n) &#123;</span><br><span class="line">            res = t;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=res;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=k;j++)</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;p[j][i]&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h1&gt;&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;你将获得 K 个鸡蛋，并可以使用一栋从 1 到 N  共有 N 层楼的建筑。1 &amp;lt;= K &amp;lt;= 100&lt;/p&gt;
&lt;p&gt;1 &amp;lt;= N &amp;lt;= 10000&lt;/p&gt;
&lt;p&gt;每个蛋的功能都是一样的，如果一个蛋碎了，你就不能再把它掉下去。&lt;/p&gt;
&lt;p&gt;你知道存在楼层 F ，满足 0 &amp;lt;= F &amp;lt;= N 任何从高于 F 的楼层落下的鸡蛋都会碎，从 F 楼层或比它低的楼层落下的鸡蛋都不会破。&lt;/p&gt;
&lt;p&gt;每次移动，你可以取一个鸡蛋（如果你有完整的鸡蛋）并把它从任一楼层 X 扔下（满足 1 &amp;lt;= X &amp;lt;= N）。&lt;/p&gt;
&lt;p&gt;你的目标是确切地知道 F 的值是多少。&lt;/p&gt;
&lt;p&gt;无论 F 的初始值如何，你确定 F 的值的最小移动次数是多少？&lt;/p&gt;</summary>
    
    
    
    <category term="算法不能丢" scheme="https://plumdong.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8D%E8%83%BD%E4%B8%A2/"/>
    
    
    <category term="C++" scheme="https://plumdong.github.io/tags/C/"/>
    
    <category term="算法不能丢" scheme="https://plumdong.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8D%E8%83%BD%E4%B8%A2/"/>
    
  </entry>
  
  <entry>
    <title>MySQL七种JOIN理论</title>
    <link href="https://plumdong.github.io/2020/11/19/MySQL%E4%B8%83%E7%A7%8DJOIN%E7%90%86%E8%AE%BA/"/>
    <id>https://plumdong.github.io/2020/11/19/MySQL%E4%B8%83%E7%A7%8DJOIN%E7%90%86%E8%AE%BA/</id>
    <published>2020-11-18T16:00:00.000Z</published>
    <updated>2021-07-11T09:27:53.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、读取JOIN语句过程"><a href="#一、读取JOIN语句过程" class="headerlink" title="一、读取JOIN语句过程"></a>一、读取JOIN语句过程</h1><p><img src="/myimages/202011191022.png" alt="JOIN图"></p><span id="more"></span><h1 id="二、JOIN查询方式图"><a href="#二、JOIN查询方式图" class="headerlink" title="二、JOIN查询方式图"></a>二、JOIN查询方式图</h1><p><img src="/myimages/202011190913.png" alt="JOIN图"></p><h1 id="三、JOIN查询语句示例"><a href="#三、JOIN查询语句示例" class="headerlink" title="三、JOIN查询语句示例"></a>三、JOIN查询语句示例</h1><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tbl_emp;</span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tbl_emp`  (</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">20</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`deptId` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`) ,</span><br><span class="line">KEY `fk_dept_id`(`deptId`)</span><br><span class="line">)ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8;</span><br><span class="line"> <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tbl_dept;</span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tbl_dept`  (</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`deptName` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> `locAdd` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="keyword">VALUES</span>(<span class="string">&#x27;RD&#x27;</span>,<span class="number">11</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="keyword">VALUES</span>(<span class="string">&#x27;HR&#x27;</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="keyword">VALUES</span>(<span class="string">&#x27;MK&#x27;</span>,<span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="keyword">VALUES</span>(<span class="string">&#x27;MIS&#x27;</span>,<span class="number">14</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="keyword">VALUES</span>(<span class="string">&#x27;FD&#x27;</span>,<span class="number">15</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_dept(deptName,locAdd) <span class="keyword">VALUES</span>(<span class="string">&#x27;BSR&#x27;</span>,<span class="number">250</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(NAME ,deptId) <span class="keyword">VALUES</span>(<span class="string">&#x27;z3&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(NAME,deptId) <span class="keyword">VALUES</span>(<span class="string">&#x27;z4&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(NAME ,deptId) <span class="keyword">VALUES</span>(<span class="string">&#x27;z5&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(NAME ,deptId) <span class="keyword">VALUES</span>(<span class="string">&#x27;w5&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(NAME,deptId) <span class="keyword">VALUES</span>(<span class="string">&#x27;w6&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(NAME,deptId) <span class="keyword">VALUES</span>(<span class="string">&#x27;s7&#x27;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(NAME,deptId) <span class="keyword">VALUES</span>(<span class="string">&#x27;s8&#x27;</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(NAME,deptId) <span class="keyword">VALUES</span>(<span class="string">&#x27;s9&#x27;</span>,<span class="number">5</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_emp(NAME,deptId) <span class="keyword">VALUES</span>(<span class="string">&#x27;wgk&#x27;</span>,<span class="number">999</span>);</span><br></pre></td></tr></table></figure><h2 id="1-示例一"><a href="#1-示例一" class="headerlink" title="1. 示例一"></a>1. 示例一</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_emp a <span class="keyword">inner</span> <span class="keyword">join</span> tbl_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure><p>查询返回两个表共有的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+----+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> deptId <span class="operator">|</span> id <span class="operator">|</span> deptName <span class="operator">|</span> locAdd <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+----+----------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> z3   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> z4   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> z5   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> w5   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> HR       <span class="operator">|</span> <span class="number">12</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> w6   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> HR       <span class="operator">|</span> <span class="number">12</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> s7   <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> MK       <span class="operator">|</span> <span class="number">13</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> s8   <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> MIS      <span class="operator">|</span> <span class="number">14</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> s9   <span class="operator">|</span>      <span class="number">5</span> <span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> FD       <span class="operator">|</span> <span class="number">15</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+----+----------+--------+</span></span><br></pre></td></tr></table></figure><h2 id="2-示例二"><a href="#2-示例二" class="headerlink" title="2. 示例二"></a>2. 示例二</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_emp a <span class="keyword">left</span> <span class="keyword">join</span> tbl_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure><p>查询返回 tbl_emp 所有记录和两个表共有的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> deptId <span class="operator">|</span> id   <span class="operator">|</span> deptName <span class="operator">|</span> locAdd <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> z3   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> z4   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> z5   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> w5   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> HR       <span class="operator">|</span> <span class="number">12</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> w6   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> HR       <span class="operator">|</span> <span class="number">12</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> s7   <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> MK       <span class="operator">|</span> <span class="number">13</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> s8   <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> MIS      <span class="operator">|</span> <span class="number">14</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> s9   <span class="operator">|</span>      <span class="number">5</span> <span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> FD       <span class="operator">|</span> <span class="number">15</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> wgk  <span class="operator">|</span>    <span class="number">999</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+------+----------+--------+</span></span><br></pre></td></tr></table></figure><h2 id="3-示例三"><a href="#3-示例三" class="headerlink" title="3. 示例三"></a>3. 示例三</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_emp a <span class="keyword">right</span> <span class="keyword">join</span> tbl_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure><p>查询返回 tbl_dept 所有记录和两个表共有的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+----+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> deptId <span class="operator">|</span> id <span class="operator">|</span> deptName <span class="operator">|</span> locAdd <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+----+----------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> z3   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> z4   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> z5   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> w5   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> HR       <span class="operator">|</span> <span class="number">12</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> w6   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> HR       <span class="operator">|</span> <span class="number">12</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span> s7   <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> MK       <span class="operator">|</span> <span class="number">13</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> s8   <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> MIS      <span class="operator">|</span> <span class="number">14</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> s9   <span class="operator">|</span>      <span class="number">5</span> <span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> FD       <span class="operator">|</span> <span class="number">15</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> BSR      <span class="operator">|</span> <span class="number">250</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+----+----------+--------+</span></span><br></pre></td></tr></table></figure><h2 id="4-示例四"><a href="#4-示例四" class="headerlink" title="4. 示例四"></a>4. 示例四</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_emp a <span class="keyword">left</span> <span class="keyword">join</span> tbl_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id <span class="keyword">where</span> b.id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>查询返回 tbl_emp 独有的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name <span class="operator">|</span> deptId <span class="operator">|</span> id   <span class="operator">|</span> deptName <span class="operator">|</span> locAdd <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">9</span> <span class="operator">|</span> wgk  <span class="operator">|</span>    <span class="number">999</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+--------+------+----------+--------+</span></span><br></pre></td></tr></table></figure><h2 id="5-示例五"><a href="#5-示例五" class="headerlink" title="5. 示例五"></a>5. 示例五</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_emp a <span class="keyword">right</span> <span class="keyword">join</span> tbl_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id <span class="keyword">where</span> a.deptId <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>查询返回 tbl_dept 独有的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+----+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> deptId <span class="operator">|</span> id <span class="operator">|</span> deptName <span class="operator">|</span> locAdd <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+----+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> BSR      <span class="operator">|</span> <span class="number">250</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+----+----------+--------+</span></span><br></pre></td></tr></table></figure><h2 id="6-示例六"><a href="#6-示例六" class="headerlink" title="6. 示例六"></a>6. 示例六</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_emp a <span class="keyword">left</span> <span class="keyword">join</span> tbl_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_emp a <span class="keyword">right</span> <span class="keyword">join</span> tbl_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure><p>查询返回 两个表全部 的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> deptId <span class="operator">|</span> id   <span class="operator">|</span> deptName <span class="operator">|</span> locAdd <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> z3   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> z4   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> z5   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span> RD       <span class="operator">|</span> <span class="number">11</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> w5   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> HR       <span class="operator">|</span> <span class="number">12</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> w6   <span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> HR       <span class="operator">|</span> <span class="number">12</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span> s7   <span class="operator">|</span>      <span class="number">3</span> <span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> MK       <span class="operator">|</span> <span class="number">13</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">7</span> <span class="operator">|</span> s8   <span class="operator">|</span>      <span class="number">4</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> MIS      <span class="operator">|</span> <span class="number">14</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">8</span> <span class="operator">|</span> s9   <span class="operator">|</span>      <span class="number">5</span> <span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> FD       <span class="operator">|</span> <span class="number">15</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> wgk  <span class="operator">|</span>    <span class="number">999</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span> BSR      <span class="operator">|</span> <span class="number">250</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+------+----------+--------+</span></span><br></pre></td></tr></table></figure><h2 id="7-示例七"><a href="#7-示例七" class="headerlink" title="7. 示例七"></a>7. 示例七</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_emp a <span class="keyword">left</span> <span class="keyword">join</span> tbl_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id <span class="keyword">WHERE</span>  b.id <span class="keyword">is</span> <span class="keyword">null</span> </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_emp a <span class="keyword">right</span> <span class="keyword">join</span> tbl_dept b <span class="keyword">on</span> a.deptId <span class="operator">=</span> b.id <span class="keyword">WHERE</span> a.deptId <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>查询返回 两个表各自独有 的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> name <span class="operator">|</span> deptId <span class="operator">|</span> id   <span class="operator">|</span> deptName <span class="operator">|</span> locAdd <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span> wgk  <span class="operator">|</span>    <span class="number">999</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>     <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span> BSR      <span class="operator">|</span> <span class="number">250</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------+--------+------+----------+--------+</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、读取JOIN语句过程&quot;&gt;&lt;a href=&quot;#一、读取JOIN语句过程&quot; class=&quot;headerlink&quot; title=&quot;一、读取JOIN语句过程&quot;&gt;&lt;/a&gt;一、读取JOIN语句过程&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/myimages/202011191022.png&quot; alt=&quot;JOIN图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://plumdong.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://plumdong.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的 EXPLAIN 使用</title>
    <link href="https://plumdong.github.io/2020/11/19/MySQL%E7%9A%84Explain%E4%BD%BF%E7%94%A8/"/>
    <id>https://plumdong.github.io/2020/11/19/MySQL%E7%9A%84Explain%E4%BD%BF%E7%94%A8/</id>
    <published>2020-11-18T16:00:00.000Z</published>
    <updated>2021-07-11T09:27:45.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、EXPLAIN简介"><a href="#一、EXPLAIN简介" class="headerlink" title="一、EXPLAIN简介"></a>一、EXPLAIN简介</h1><p>使用 EXPLAIN 关键字可以模拟优化器执行sql查询语句，从而知道MySQL是如何处理你的sql语句，分析查询语句或者表结构的性能瓶颈.</p><span id="more"></span><h1 id="二、EXPLAIN用法"><a href="#二、EXPLAIN用法" class="headerlink" title="二、EXPLAIN用法"></a>二、EXPLAIN用法</h1><p>EXPLAIN + SQL语句</p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tbl_emp;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> tbl_emp <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">9</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------+</span></span><br></pre></td></tr></table></figure><p>其中五个比较重要的字段分别为：id、type、key、rows、Extra</p><h2 id="ID字段："><a href="#ID字段：" class="headerlink" title="ID字段："></a>ID字段：</h2><p>表示执行的顺序，ID字段分为两种情况：</p><ol><li>相同：按照顺序从上到下执行</li><li>不同：按照ID字段的大小，从大到小执行</li><li>既有相同也有不同：把id相同的认为是一组，从上往下顺序执行。 在所有组中首先执行ID数值大的。其中：DERIVED = 衍生</li></ol><p>注：<br><strong>id 号每个号码， 表示一趟独立的查询。 一个 sql 的查询趟数越少越好。</strong></p><h2 id="SELECT-TYPE字段："><a href="#SELECT-TYPE字段：" class="headerlink" title="SELECT_TYPE字段："></a>SELECT_TYPE字段：</h2><p>表示查询类型，主要分为6种：</p><ol><li><code>SIMPLE</code>  普通查询：简单的select查询，查询中不包含子查询或者union</li><li><code>PRIMARY</code>  联合查询：查询中若包含任何复杂的子部分，最外层查询则被标记为联合查询</li><li><code>SUBQUERY</code> 子查询：在 select 或 where 列表中包含的子查询</li><li><code>DERIVED</code> 嵌套查询：在from列表种包含的子查询被标记为DERIVED（衍生），MySQL会递归执行这些子查询，把结果放到临时表中</li><li><code>UNION</code>   连接查询：若查询语句中第二个 select 出现在 UNION 标识符之后，则被标记为 UNION ，若 UNION 包含在from子句中，则外层 select 将被标记为：DERIVED</li><li><code>UNION RESULT</code> 从 UNION 表中获取结果的 select</li></ol><h2 id="TABLE字段："><a href="#TABLE字段：" class="headerlink" title="TABLE字段："></a>TABLE字段：</h2><p>表示与哪一张表相关</p><h2 id="TYPE字段："><a href="#TYPE字段：" class="headerlink" title="TYPE字段："></a>TYPE字段：</h2><p>显示访问类型，是一个较为重要的指标，结果值从好到坏依次为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL </span><br></pre></td></tr></table></figure><p>一般情况下查询至少达到 <code>range</code> 级别，最好能达到 <code>ref</code> </p><ol><li>system ：表只有一行记录，平时不会出现，可以忽略</li><li>const ：表示通过一次索引就能找到</li><li>eq_ref ： 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配</li><li>ref ： 非唯一性索引扫描，返回匹配某个单独值的所有行，属于查找和扫描的混合体</li><li>range ： 只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引</li><li>index ： 与ALL区别是只遍历索引树</li><li>ALL ： 全表扫描</li></ol><h2 id="POSSIBLE-KEYS和KEY字段："><a href="#POSSIBLE-KEYS和KEY字段：" class="headerlink" title="POSSIBLE_KEYS和KEY字段："></a>POSSIBLE_KEYS和KEY字段：</h2><p>possible_keys</p><ul><li>显示可能应用在这张表种的索引，一个或多个。</li><li>查询涉及到的字段上若存在索引，则索引将被列出，<code>但不一定被查询实际使用</code></li></ul><p>key</p><ul><li>实际使用的索引，如果为null则证明没有使用索引</li><li>查询中若使用了覆盖索引，则该索引仅出现在key列表中</li><li>查询使用的索引时以<code>key</code>列为准</li></ul><h2 id="key-len-字段："><a href="#key-len-字段：" class="headerlink" title="key_len 字段："></a>key_len 字段：</h2><ul><li>表示索引种使用的字节数，可通过该列计算查询中使用的索引长度。在不损失精度的情况下，长度越短越好</li><li>key_len 显示的值为索引字段的最大可能长度，<code>并非实际使用长度</code>，即key_len是根据表定义计算而得，不是通过表内检索出的</li></ul><h2 id="ref字段："><a href="#ref字段：" class="headerlink" title="ref字段："></a>ref字段：</h2><p>显示索引的哪一列被使用了，可能是一个常数，哪些列或者常量被用于查找索引列的值</p><h2 id="rows字段："><a href="#rows字段：" class="headerlink" title="rows字段："></a>rows字段：</h2><p>显示表有多少行被优化器查询，是一个衡量索引优化的重要指标，值越小越好</p><h2 id="Extra-字段："><a href="#Extra-字段：" class="headerlink" title="Extra 字段："></a>Extra 字段：</h2><p>包含不适合在其他列种显示但十分重要的额外信息，其可能的信息</p><ol><li><p><code>Using filesort</code> ： MySQL无法利用索引完成排序操作，需要自己重新从对数据进行排序</p></li><li><p><code>Using temporary</code> ： MySQL无法利用索引完成分组，需要创建临时表来完成分组</p></li><li><p><code>Using index</code> ： 查询的列被所建的索引覆盖，只需要从索引中获取数据，不必读数据行，查询到的数据叫覆盖索引，效率较高</p></li><li><p>Using where ：表明使用了where过滤</p></li><li><p>Using join buff ：表明 join 次数过多，应调大缓冲区的join buff</p></li><li><p>impossible where：表明where子句的值总是false</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、EXPLAIN简介&quot;&gt;&lt;a href=&quot;#一、EXPLAIN简介&quot; class=&quot;headerlink&quot; title=&quot;一、EXPLAIN简介&quot;&gt;&lt;/a&gt;一、EXPLAIN简介&lt;/h1&gt;&lt;p&gt;使用 EXPLAIN 关键字可以模拟优化器执行sql查询语句，从而知道MySQL是如何处理你的sql语句，分析查询语句或者表结构的性能瓶颈.&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://plumdong.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://plumdong.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>linux(centos7)安装MySQL5.7</title>
    <link href="https://plumdong.github.io/2020/11/17/linux(centos7)%E5%AE%89%E8%A3%85MySQL5.7/"/>
    <id>https://plumdong.github.io/2020/11/17/linux(centos7)%E5%AE%89%E8%A3%85MySQL5.7/</id>
    <published>2020-11-16T16:00:00.000Z</published>
    <updated>2020-11-18T10:12:58.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、下载MySQL"><a href="#一、下载MySQL" class="headerlink" title="一、下载MySQL"></a>一、下载MySQL</h1><p>首先进入opt文件夹下，下载mysql-5.7.27的安装包，下载过程可能比较慢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# cd /opt</span><br><span class="line">[root@localhost opt]# wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>其他版本可去官网下载：<br><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><span id="more"></span><h1 id="二、解压-MySQL-并配置"><a href="#二、解压-MySQL-并配置" class="headerlink" title="二、解压 MySQL 并配置"></a>二、解压 MySQL 并配置</h1><h2 id="1-解压MySQL"><a href="#1-解压MySQL" class="headerlink" title="1.解压MySQL"></a>1.解压MySQL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# tar -zvxf mysql-5.7.24-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="2-移动解压好的文件夹"><a href="#2-移动解压好的文件夹" class="headerlink" title="2.移动解压好的文件夹"></a>2.移动解压好的文件夹</h2><p>保证 目录 /usr/local 下无mysql重名的文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost opt]# mv mysql-5.7.24-linux-glibc2.12-x86_64 /usr/local/mysql</span><br><span class="line">[root@localhost opt]# cd /usr/local/mysql</span><br></pre></td></tr></table></figure><h2 id="3-在-usr-local-mysql目录下创建data目录"><a href="#3-在-usr-local-mysql目录下创建data目录" class="headerlink" title="3.在/usr/local/mysql目录下创建data目录"></a>3.在/usr/local/mysql目录下创建data目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# mkdir data</span><br></pre></td></tr></table></figure><h2 id="4-修改MySQL配置文件"><a href="#4-修改MySQL配置文件" class="headerlink" title="4.修改MySQL配置文件"></a>4.修改MySQL配置文件</h2><p>打开 <code>/etc/my.cnf</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# vi /etc/my.cnf</span><br></pre></td></tr></table></figure><p>将其内容改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">port = 3306</span><br><span class="line">socket = /var/lib/mysql/mysql.sock</span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">log-error = /usr/local/mysql/data/mysqld.log</span><br><span class="line">pid-file = /usr/local/mysql/data/mysqld.pid</span><br></pre></td></tr></table></figure><h2 id="5-创建mysql用户组"><a href="#5-创建mysql用户组" class="headerlink" title="5.创建mysql用户组"></a>5.创建mysql用户组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# chown -R mysql:mysql /usr/local/mysql</span><br><span class="line">[root@localhost mysql]# chmod -R 755 /usr/local/mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-安装并初始化mysql"><a href="#6-安装并初始化mysql" class="headerlink" title="6.安装并初始化mysql"></a>6.安装并初始化mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# bin/mysqld --initialize --user=mysql --datadir=/usr/local/mysql/data --basedir=/usr/local/mysql</span><br></pre></td></tr></table></figure><p>查看初始密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# cat /usr/local/mysql/data/mysqld.log</span><br></pre></td></tr></table></figure><p>执行后会输出日志，日志最后一行尾部就是初始密码<br><img src="/myimages/202011181628.png" alt="MySQL日志"></p><h2 id="7-添加软连接"><a href="#7-添加软连接" class="headerlink" title="7.添加软连接"></a>7.添加软连接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]#  ln -s /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql </span><br><span class="line">[root@localhost mysql]#  ln -s /usr/local/mysql/bin/mysql /usr/bin/mysql</span><br></pre></td></tr></table></figure><h2 id="8-启动MySQL"><a href="#8-启动MySQL" class="headerlink" title="8.启动MySQL"></a>8.启动MySQL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]#  service mysql start</span><br></pre></td></tr></table></figure><p>查看MySQL进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]# ps -ef | grep mysql</span><br></pre></td></tr></table></figure><h2 id="9、登录mysql，修改密码"><a href="#9、登录mysql，修改密码" class="headerlink" title="9、登录mysql，修改密码"></a>9、登录mysql，修改密码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mysql]#  mysql -u root -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 密码为 MySQL日志 中的初始密码</span></span><br></pre></td></tr></table></figure><p>将密码改为 123456，也可以改为别的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set password for root@localhost = password(&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure><h2 id="10、远程连接"><a href="#10、远程连接" class="headerlink" title="10、远程连接"></a>10、远程连接</h2><p>user.Host=’%’表示任何主机，User=’root’表示使用 root 用户访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash">use mysql;</span></span><br><span class="line"><span class="meta">msyql&gt;</span><span class="bash">update user <span class="built_in">set</span> user.Host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user.User=<span class="string">&#x27;root&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash">flush privileges;</span></span><br></pre></td></tr></table></figure><p>重启mysql生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# service mysql restart</span><br></pre></td></tr></table></figure><p>打开防火墙3306端口，查看端口是否开放</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# firewall-cmd --list-ports</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没有 3306/tcp 则证明3306端口没有开放</span></span><br></pre></td></tr></table></figure><p>打开3306端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> success</span></span><br></pre></td></tr></table></figure><p>重启防火墙生效设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# firewall-cmd --reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> success</span></span><br></pre></td></tr></table></figure><p>下载 mysql workbench 可视化工具，就可以远程连接到服务器的MySQL进行配置</p><p>下载地址：<a href="https://dev.mysql.com/downloads/workbench/">https://dev.mysql.com/downloads/workbench/</a></p><h2 id="11、开机启动"><a href="#11、开机启动" class="headerlink" title="11、开机启动"></a>11、开机启动</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost init.d]#  cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">[root@localhost init.d]# chkconfig --add mysqld</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、下载MySQL&quot;&gt;&lt;a href=&quot;#一、下载MySQL&quot; class=&quot;headerlink&quot; title=&quot;一、下载MySQL&quot;&gt;&lt;/a&gt;一、下载MySQL&lt;/h1&gt;&lt;p&gt;首先进入opt文件夹下，下载mysql-5.7.27的安装包，下载过程可能比较慢&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost /]# cd /opt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@localhost opt]# wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.27-linux-glibc2.12-x86_64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其他版本可去官网下载：&lt;br&gt;&lt;a href=&quot;https://downloads.mysql.com/archives/community/&quot;&gt;https://downloads.mysql.com/archives/community/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://plumdong.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://plumdong.github.io/tags/linux/"/>
    
    <category term="MySQL" scheme="https://plumdong.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7初始化环境搭建</title>
    <link href="https://plumdong.github.io/2020/11/16/CentOS7%E5%88%9D%E5%A7%8B%E5%8C%96%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://plumdong.github.io/2020/11/16/CentOS7%E5%88%9D%E5%A7%8B%E5%8C%96%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-11-15T16:00:00.000Z</published>
    <updated>2021-07-04T15:09:48.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、更新yum源"><a href="#一、更新yum源" class="headerlink" title="一、更新yum源"></a>一、更新yum源</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#安装wget</span><br><span class="line">[root@localhost ~]# yum -y install wget</span><br><span class="line"></span><br><span class="line">#备份CentOS-Base.repo，更新失败时切换回去</span><br><span class="line">[root@localhost ~]# mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"> </span><br><span class="line">#下载新的CentOS-Base.repo到/etc/yum.repos.d/</span><br><span class="line">[root@localhost ~]# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"> </span><br><span class="line">#生成缓存</span><br><span class="line">[root@localhost ~]# yum makecache</span><br></pre></td></tr></table></figure><h1 id="二、设置静态IP"><a href="#二、设置静态IP" class="headerlink" title="二、设置静态IP"></a>二、设置静态IP</h1><h2 id="1-查看本地IP"><a href="#1-查看本地IP" class="headerlink" title="1. 查看本地IP"></a>1. 查看本地IP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ip a</span><br></pre></td></tr></table></figure><p><img src="/myimages/202011172152.png" alt="网卡信息"></p><ul><li><p>ens33 表示第一个网卡名，以及该网卡的信息</p></li><li><p>lo 表示主机的回坏地址，般是用来测试一个网络程序</p><span id="more"></span></li></ul><p>打开ens33 的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p>其中尾部的 <code>ifcfg-ens33</code> 取决与上述网卡名称</p><h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h2><p>其中：网段的静态IP 和网关需要在 虚拟网络编辑器中配置 并关闭 DHCP 服务</p><p>​        <code>DNS</code> 要与主机或外部网络对应 默认的 <code>DNS1=192.168.1.1</code></p><p>主要配置属性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ONBOOT=yes# 起用网络服务</span><br><span class="line">IPADDR#网段的静态IP</span><br><span class="line">NETMASK #网段的子网掩码</span><br><span class="line">GATEWAY#网关</span><br><span class="line">DNS1#DNS1服务器地址</span><br></pre></td></tr></table></figure><p>全部配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static    #设置为静态IP</span><br><span class="line">NETMASK=255.255.255.0   #网段的子网掩码</span><br><span class="line">IPADDR=10.32.77.35  #网段的静态IP</span><br><span class="line">GATEWAY=10.32.77.1  #网关</span><br><span class="line">DNS1=202.194.104.35 #DNS1服务器</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6_INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=ae3bba41-51d9-4efd-909e-9f726590df7f</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes  # 是否开机起用，永久生效</span><br></pre></td></tr></table></figure><h2 id="3-重启网络服务"><a href="#3-重启网络服务" class="headerlink" title="3.重启网络服务"></a>3.重启网络服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# service network restart</span><br></pre></td></tr></table></figure><p>再次输入ifconfig查看ens33下的inet，即可看到配置好的静态ip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ifconfig</span><br></pre></td></tr></table></figure><h1 id="三、关闭系统防火墙"><a href="#三、关闭系统防火墙" class="headerlink" title="三、关闭系统防火墙"></a>三、关闭系统防火墙</h1><p>如果是买的服务器，因为有外部的防火墙，</p><p>如果是本地的服务器，因为在内网中也用不到防火墙，因此我一般都会关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看防火墙状态，其属性为 Active: inactive (dead)  即为关闭状态</span></span><br><span class="line">[root@localhost ~]# systemctl status firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭防火墙</span></span><br><span class="line">[root@localhost ~]# systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h1 id="四、创建用户并授权"><a href="#四、创建用户并授权" class="headerlink" title="四、创建用户并授权"></a>四、创建用户并授权</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建新用户</span></span><br><span class="line">[root@localhost ~]# useradd  username</span><br><span class="line"><span class="meta">#</span><span class="bash">创建密码</span></span><br><span class="line">[root@localhost ~]# passwd username</span><br><span class="line"><span class="meta">#</span><span class="bash">sudo命令的授权管理是在sudoers文件里的</span></span><br><span class="line">[root@localhost ~]# ls -l /etc/sudoers#sudoers 文件只有查看权，</span><br><span class="line">-r--r-----. 1 root root 4328 11月 28 2019 /etc/sudoers</span><br><span class="line"><span class="meta">#</span><span class="bash">添加修改权限</span></span><br><span class="line">[root@localhost ~]# chmod -v u+w /etc/sudoers</span><br><span class="line"><span class="meta">#</span><span class="bash">为新用户添加sudo权限</span></span><br><span class="line">[root@localhost ~]# vim /etc/sudoers</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Allow root to run any commands anywher</span></span>  </span><br><span class="line">root    ALL=(ALL)       ALL  </span><br><span class="line">username  ALL=(ALL)       ALL  #这个是新增的用户</span><br><span class="line"><span class="meta">#</span><span class="bash">收回 sudoers   修改权限</span></span><br><span class="line">[root@localhost ~]# chmod -v u-w /etc/sudoers</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="五、调整字符集，使其支持中文"><a href="#五、调整字符集，使其支持中文" class="headerlink" title="五、调整字符集，使其支持中文"></a>五、调整字符集，使其支持中文</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/locale.conf</span><br><span class="line">LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">[root@localhost ~]# source /etc/locale.conf</span><br></pre></td></tr></table></figure><h1 id="六、Linux清理内存缓存"><a href="#六、Linux清理内存缓存" class="headerlink" title="六、Linux清理内存缓存"></a>六、Linux清理内存缓存</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3.7G        223M        2.7G         11M        823M        3.2G</span><br><span class="line">Swap:          3.9G          0B        3.9G</span><br><span class="line">[root@localhost ~]# echo 1 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">一、更新yum源及必要软件安装，二、设置静态IP</summary>
    
    
    
    <category term="linux" scheme="https://plumdong.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://plumdong.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Java中Object六大方法简介</title>
    <link href="https://plumdong.github.io/2020/11/11/Object%E5%85%AD%E5%A4%A7%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>https://plumdong.github.io/2020/11/11/Object%E5%85%AD%E5%A4%A7%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/</id>
    <published>2020-11-11T06:37:08.000Z</published>
    <updated>2021-07-11T09:28:40.347Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Object类是类层次结构的根。每个类都有 Object作为超类。所有对象，包括数组。</strong></p><h1 id="一、方法摘要"><a href="#一、方法摘要" class="headerlink" title="一、方法摘要"></a>一、方法摘要</h1><table><thead><tr><th>修饰符和类型</th><th>方法和说明</th></tr></thead><tbody><tr><td>final Class&lt;?&gt; getClass()</td><td>返回该 Object运行时类</td></tr><tr><td>String toString()</td><td>返回对象的字符串表示形式。</td></tr><tr><td>protected Object clone()</td><td>创建并返回此对象的副本。</td></tr><tr><td>boolean equals(Object obj)</td><td>判断其他对象与该对象是否相同</td></tr><tr><td>int hashCode()</td><td>返回对象的哈希码值</td></tr><tr><td>void notify()</td><td>唤醒正在等待对象锁的单个线程。</td></tr><tr><td>void notifyAll()</td><td>唤醒正在等待对象锁的所有线程</td></tr><tr><td>void wait()</td><td>当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法。</td></tr><tr><td>void wait(long timeout)</td><td>当前线程等待，直到另一个线程调用 notify()方法或该对象的 notifyAll()方法，或超时。</td></tr><tr><td>void wait(long timeout, int nanos)</td><td>当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法，或者被其他线程中断，或超时。</td></tr></tbody></table><span id="more"></span><h1 id="二、方法详细信息"><a href="#二、方法详细信息" class="headerlink" title="二、方法详细信息"></a>二、方法详细信息</h1><h2 id="1-getClass"><a href="#1-getClass" class="headerlink" title="1. getClass"></a>1. getClass</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span>&lt;?&gt; <span class="title">getClass</span>()</span></span><br></pre></td></tr></table></figure><ul><li><p>返回此Object的运行时类。 返回的类对象是被表示类的static synchronized方法锁定的对象。 </p></li><li><p>实际结果的类型是Class&lt;? extends |X|&gt;其中|X|是静态类型上其表达的擦除getClass被调用。</p></li><li><p>结果表示 类对象的运行时类的Class对象。 </p></li></ul><h2 id="2-hashCode"><a href="#2-hashCode" class="headerlink" title="2. hashCode"></a>2. hashCode</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>返回对象的哈希码值。 支持这种方法是为了散列表，如HashMap提供的那样 。<br>hashCode的条约： </p><ul><li>一个Java程序多次在同一个对象上调用该方法该方法必须返回相同的整数，前提是对象中equals方法没有被修改。 </li><li>如果equals(Object)方法两个对象相等，则两个对象的hashCode方法返回的整数也必须相同。 </li><li>如果两个对象的 equals(java.lang.Object) 方法不相等，那么这两个对象调用 hashCode 方法可以返回相同的结果。 但是为不相等的对象生成不同的整数结果可能会提高哈希表的性能。 </li></ul><h2 id="3-equals"><a href="#3-equals" class="headerlink" title="3. equals"></a>3. equals</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span></span><br></pre></td></tr></table></figure><p>指示一些其他对象是否等于该对象。 </p><p>equals方法在非空对象引用上实现等价关系： </p><ul><li>自反性 ：对于任何非空的参考值x ， x.equals(x)应该返回true 。 </li><li>对称的 ：对于任何非空引用值x和y ， 当x.equals(y)返回true时，y.equals(x)也应该返回true 。 </li><li>传递性 ：对于任何非空引用值x ， y和z ，如果x.equals(y)返回true且y.equals(z)也返回true ，那么x.equals(z)也一定返回true 。 </li><li>一致的 ：对于任何非空引用值x和y ，多次调用x.equals(y)始终返回true或始终返回false ，前提是对象的equals方法没有被修改。 </li><li>对于任何非空的参考值x ， x.equals(null)应该返回false 。<br>该equals类方法Object实现对象上差别可能性最大的相等关系; 也就是说，对于任何非空的参考值x和y ，当且仅当x和y引用相同的对象（ x == y具有值true ）时，该方法返回true 。 </li></ul><p>无论何时覆盖该方法，通常需要覆盖 hashCode 方法，以便维护hashCode方法的通用合同，该方法规定相等的对象必须具有相等的哈希码。 </p><h2 id="4-clone"><a href="#4-clone" class="headerlink" title="4. clone"></a>4. clone</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br></pre></td></tr></table></figure><h3 id="创建并返回此对象的副本。"><a href="#创建并返回此对象的副本。" class="headerlink" title="- 创建并返回此对象的副本。"></a>- 创建并返回此对象的副本。</h3><p>该方法执行该对象的“浅拷贝”，而不是“深度拷贝”操作。<br>其中克隆对象满足：</p><ul><li>x.clone() != x </li><li>x.clone().getClass() == x.getClass() </li></ul><h3 id="异常-CloneNotSupportedException"><a href="#异常-CloneNotSupportedException" class="headerlink" title="- 异常 CloneNotSupportedException -"></a>- 异常 CloneNotSupportedException -</h3><ul><li><p>如果Object类不实现接口 Cloneable ，则抛出CloneNotSupportedException 。</p></li><li><p>Object类本身并不实现接口Cloneable ，因此在类别为Object的对象上调用clone方法将导致运行时抛出异常。 </p></li><li><p>如果对象的类不支持Cloneable接口。      子类也可以抛出该异常表示实例无法被克隆。 </p></li></ul><h2 id="5-toString"><a href="#5-toString" class="headerlink" title="5. toString"></a>5. toString</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>返回对象的字符串表示形式。 一般来说， toString方法返回一个用于说明这个对象的字符串。 </p><p>返回值应该是一个简明扼要的表达，容易让人阅读。 建议所有子类覆盖此方法。 </p><h2 id="6-notify"><a href="#6-notify" class="headerlink" title="6. notify"></a>6. notify</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li><p>唤醒正在等待该对象锁的单个线程。 如果有多个线程正在等待该对象的锁，则任意选其中一个唤醒。 线程通过调用wait方法等待对象的锁。 </p></li><li><p>唤醒的线程要等待当前线程结束该对象的锁定才可继续。 唤醒的线程将以通常的方式与其他线程竞争。 </p></li><li><p>该方法只能由作为该对象的锁的所有者的线程调用。如果当前线程不是锁的所有者。 则会抛出异常IllegalMonitorStateException</p></li><li><p>线程以三种方式之一成为对象锁的所有者： </p><ul><li>通过执行该对象的同步实例方法。 </li><li>通过执行在对象上synchronized synchronized语句</li><li>对于类型为Class的对象，通过执行该类的同步静态方法。 </li></ul></li></ul><h2 id="7-notifyAll"><a href="#7-notifyAll" class="headerlink" title="7. notifyAll"></a>7. notifyAll</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><ul><li><p>唤醒正在等待对象锁的所有线程。 线程通过调用wait方法之一等待对象的锁。 </p></li><li><p>唤醒的线程要等待当前线程结束该对象的锁定才可继续。 唤醒的线程将以通常的方式与其他线程竞争。 </p></li><li><p>该方法只能由作为该对象的锁的所有者的线程调用。如果当前线程不是锁的所有者。 则会抛出异常IllegalMonitorStateException</p></li></ul><h2 id="8-wait"><a href="#8-wait" class="headerlink" title="8. wait"></a>8. wait</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><p>导致当前线程等待，直到另一个线程调用此对象的notify()方法或notifyAll()方法，或超时。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout,</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="keyword">int</span> nanos)</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><p>它允许对放弃之前等待通知的时间进行更精细的控制。 以纳秒为单位的实时数量由下式给出：<br> 1000000*timeout+nanos在所有其他方面，该方法与一个参数的方法wait(long)相同。 特别是， wait(0, 0)意味着同样的事情wait(0) 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function">                <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><p>这个方法的就是直接简单的执行了 wait(0) 。 </p><ul><li>参数 <ul><li>timeout - 以毫秒为单位等待的最长时间。 </li><li>nanos - 额外的时间，以纳秒范围0-999999。 </li></ul></li><li>异常 <ul><li>IllegalArgumentException - 如果超时值为负值或值不在0-999999范围内。 </li><li>IllegalMonitorStateException - 如果当前线程不是此对象的锁的所有者。 </li><li>InterruptedException - 如果任何线程在当前线程等待通知之前或当前线程中断当前线程。 当抛出此异常时，当前线程的中断状态将被清除。 </li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Object类是类层次结构的根。每个类都有 Object作为超类。所有对象，包括数组。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、方法摘要&quot;&gt;&lt;a href=&quot;#一、方法摘要&quot; class=&quot;headerlink&quot; title=&quot;一、方法摘要&quot;&gt;&lt;/a&gt;一、方法摘要&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;修饰符和类型&lt;/th&gt;
&lt;th&gt;方法和说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;final Class&amp;lt;?&amp;gt; getClass()&lt;/td&gt;
&lt;td&gt;返回该 Object运行时类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String toString()&lt;/td&gt;
&lt;td&gt;返回对象的字符串表示形式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;protected Object clone()&lt;/td&gt;
&lt;td&gt;创建并返回此对象的副本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean equals(Object obj)&lt;/td&gt;
&lt;td&gt;判断其他对象与该对象是否相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int hashCode()&lt;/td&gt;
&lt;td&gt;返回对象的哈希码值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void notify()&lt;/td&gt;
&lt;td&gt;唤醒正在等待对象锁的单个线程。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void notifyAll()&lt;/td&gt;
&lt;td&gt;唤醒正在等待对象锁的所有线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void wait()&lt;/td&gt;
&lt;td&gt;当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void wait(long timeout)&lt;/td&gt;
&lt;td&gt;当前线程等待，直到另一个线程调用 notify()方法或该对象的 notifyAll()方法，或超时。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void wait(long timeout, int nanos)&lt;/td&gt;
&lt;td&gt;当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法，或者被其他线程中断，或超时。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://plumdong.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://plumdong.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的三大集合类 List、Set、Map区别</title>
    <link href="https://plumdong.github.io/2020/11/10/Java%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E9%9B%86%E5%90%88%E7%B1%BB/"/>
    <id>https://plumdong.github.io/2020/11/10/Java%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E9%9B%86%E5%90%88%E7%B1%BB/</id>
    <published>2020-11-10T07:23:56.000Z</published>
    <updated>2021-07-11T09:27:23.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、List（列表）Set（集合）Map（映射）和实现关系"><a href="#一、List（列表）Set（集合）Map（映射）和实现关系" class="headerlink" title="一、List（列表）Set（集合）Map（映射）和实现关系"></a>一、List（列表）Set（集合）Map（映射）和实现关系</h1><ul><li> <strong>List</strong> 和 <strong>Set</strong> 接口都是继承 <strong>Collection</strong> 接口，<strong>Map</strong> 未继承任何接口，因此它与 <strong>Collection</strong> 接口平级。</li><li>List主要有两个实现类 <strong>ArrayList</strong>（数组列表） 和 <strong>LinkedList</strong> （双向链表）。</li><li>set 主要有两个实现类 <strong>HashSet</strong> 和 <strong>TreeSet</strong> </li><li>map 主要实现类有 <strong>Hashtable</strong> 、<strong>HashMap</strong> 、 <strong>TreeMap</strong>。<span id="more"></span></li></ul><p><img src="/myimages/202011101957.png" alt="list,set,map"></p><h1 id="二、-List-实现类"><a href="#二、-List-实现类" class="headerlink" title="二、 List 实现类"></a>二、 List 实现类</h1><ul><li>List 是以线性方式存储数据，可以存储相同数据</li><li>ArrayList 是一个可以动态修改的数组，没有固定大小的限制，可快速访问数据。</li><li>LinkedList 是一个由双向链表组成的列表，快速插入或删除数据。</li><li>ArrayList 和 LinkedList 都是线程不安全的。Vector类是线程安全的。</li></ul><h1 id="三、-Set-实现类"><a href="#三、-Set-实现类" class="headerlink" title="三、 Set 实现类"></a>三、 Set 实现类</h1><ul><li><p>Set 是 按照数据的 HashCode 存储对象，不可以存储相同对象，存取速度快。</p></li><li><p>HashSet 是基于HashMap实现的集合。允许有 null 值，不是线程安全的。</p></li><li><p>TreeSet 是基于TreeMap实现的有序的集合。实现了SortedSet 接口可以对集合中的对象进行排序底层结构是红黑树，依靠比较器去重。不是线程安全的。</p><h1 id="四、-Map-实现类"><a href="#四、-Map-实现类" class="headerlink" title="四、 Map 实现类"></a>四、 Map 实现类</h1></li><li><p>Map是一种把键和值映射的集合，每一元素都包含一个键和一个值。不可重复。</p></li><li><p>HashMap 是一个散列表、存储键值对(key-value)的映射。<br>根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一个的键为 null，无序且不是线程安全的。</p></li><li><p>TreeMap 是一个基于红黑树实现的映射，内部会按照键值有序存储。不是线程安全的。</p></li><li><p>Hashtable 键和值都是非空且，是线程安全的每次锁住整张表，如果需要线程安全且高并发应该使用  java.util.concurrent.ConcurrentHashMap&lt;K,V&gt;类</p></li><li><p>线程安全的map类有：1.HashTable 2. SynchronizedMap 3. ConcurrentHashMap（推荐）</p></li></ul><h1 id="五、主要区别"><a href="#五、主要区别" class="headerlink" title="五、主要区别"></a>五、主要区别</h1><table><thead><tr><th></th><th>List</th><th>Set</th><th>Map</th></tr></thead><tbody><tr><td>继承接口</td><td>Collection</td><td>Collection</td><td></td></tr><tr><td>常用实现类</td><td>ArrayList、LinkedList、Vector</td><td>HashSet、TreeSet</td><td>HashMap、HashTable、TreeMap</td></tr><tr><td>是否可重复</td><td>可重复</td><td>不可重复</td><td>不可重复</td></tr><tr><td>顺序</td><td>有序</td><td>无序</td><td>无序</td></tr><tr><td>线程安全</td><td>Vector 类线程安全</td><td></td><td>Hashtable 类线程安全</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、List（列表）Set（集合）Map（映射）和实现关系&quot;&gt;&lt;a href=&quot;#一、List（列表）Set（集合）Map（映射）和实现关系&quot; class=&quot;headerlink&quot; title=&quot;一、List（列表）Set（集合）Map（映射）和实现关系&quot;&gt;&lt;/a&gt;一、List（列表）Set（集合）Map（映射）和实现关系&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt; &lt;strong&gt;List&lt;/strong&gt; 和 &lt;strong&gt;Set&lt;/strong&gt; 接口都是继承 &lt;strong&gt;Collection&lt;/strong&gt; 接口，&lt;strong&gt;Map&lt;/strong&gt; 未继承任何接口，因此它与 &lt;strong&gt;Collection&lt;/strong&gt; 接口平级。&lt;/li&gt;
&lt;li&gt;List主要有两个实现类 &lt;strong&gt;ArrayList&lt;/strong&gt;（数组列表） 和 &lt;strong&gt;LinkedList&lt;/strong&gt; （双向链表）。&lt;/li&gt;
&lt;li&gt;set 主要有两个实现类 &lt;strong&gt;HashSet&lt;/strong&gt; 和 &lt;strong&gt;TreeSet&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;map 主要实现类有 &lt;strong&gt;Hashtable&lt;/strong&gt; 、&lt;strong&gt;HashMap&lt;/strong&gt; 、 &lt;strong&gt;TreeMap&lt;/strong&gt;。</summary>
    
    
    
    <category term="Java基础" scheme="https://plumdong.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://plumdong.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出JavaSpring5框架</title>
    <link href="https://plumdong.github.io/2020/11/06/Java-spring5%E6%A1%86%E6%9E%B6/"/>
    <id>https://plumdong.github.io/2020/11/06/Java-spring5%E6%A1%86%E6%9E%B6/</id>
    <published>2020-11-05T16:00:00.000Z</published>
    <updated>2021-07-11T09:26:39.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Spring框架概念"><a href="#一、Spring框架概念" class="headerlink" title="一、Spring框架概念"></a>一、Spring框架概念</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li><strong>Spring是一个轻量级的开源的JavaEE框架</strong></li><li>Spring框架可以解决企业开发的复杂性</li><li>Spring有两个核心部分：IOC和AOP</li><li>IOC:控制反转，把创建对象的过程教给Spring进行管理</li><li>Aop：面向切面，在不修改源代码的情况下进行功能增强</li><li>Spring特点：1.方便解耦，简化开发  2.方便测试程序 3.方便和其他框架整合  4. 方便进行事务操作</li></ol><span id="more"></span><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://repo.spring.io/release/org/springframework/spring/">spring官网下载</a></p><ul><li>我这里下载的是<strong>spring-5.2.9.RELEASE-dist.zip</strong>版本</li><li>下载完成后将<strong>libs</strong>文件夹下的.jar文件复制到项目中，并导入依赖。</li></ul><h1 id="二、IOC容器"><a href="#二、IOC容器" class="headerlink" title="二、IOC容器"></a>二、IOC容器</h1><ol><li>控制反转：把对象的创建个对象之间的调用过程，交给Spring进行管理</li><li>使用IOC目的：为了降低耦合度</li></ol><h2 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h2><p>xml解析、工厂模式、反射     </p><p>IOC过程:</p><ul><li>第一步：xml配置文件，配置创建的对象<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;classpath&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>第二步：有service类和dao类，创建工厂类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String classValue = <span class="class"><span class="keyword">class</span>属性值</span>;</span><br><span class="line">        Class cla = Class.forName(classValue);</span><br><span class="line">        <span class="keyword">return</span> (UserDao)cla.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="IOC接口（BeanFactory）"><a href="#IOC接口（BeanFactory）" class="headerlink" title="IOC接口（BeanFactory）"></a>IOC接口（BeanFactory）</h2><ol><li><p>IOC思想基于IOC容器完成，IOC容器的底层就是对象工厂</p></li><li><p>Spring提供IOC容器实现的两种方式：</p></li><li><p>BeanFactory:IOC容器基本实现，是Spring内部的使用接口，不提供开发人员进行使用</p><ul><li>加载配置文件的时候不会创建对象，在获取（使用）对象时候才去创建对象</li></ul></li><li><p>ApplicationContext: BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人员进行使用。</p><ul><li>加载配置文件时候会把在配置文件对象进行创建</li></ul></li></ol><h2 id="IOC操作Bean管理（基于xml）"><a href="#IOC操作Bean管理（基于xml）" class="headerlink" title="IOC操作Bean管理（基于xml）"></a>IOC操作Bean管理（基于xml）</h2><h3 id="1-Spring创建对象"><a href="#1-Spring创建对象" class="headerlink" title="1. Spring创建对象"></a>1. Spring创建对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.springDemo.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在spring配置文件中使用bean标签，标签种添加对应的属性，就可以实现对象的创建</li><li>创建对象时候，默认是执行无参数构造方法完成对象创建。</li></ul><h3 id="2-Spring注入属性"><a href="#2-Spring注入属性" class="headerlink" title="2. Spring注入属性"></a>2. Spring注入属性</h3><p><strong>DI：依赖注入，就是注入属性。</strong></p><p><strong>Spring_demo目录结构：</strong><br><img src="/myimages/202011081524.png" alt="Spring目录结构"></p><h3 id="3-set方法注入："><a href="#3-set方法注入：" class="headerlink" title="3.set方法注入："></a><strong>3.set方法注入：</strong></h3><p><strong>bean1.xml配置文件</strong><br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">beans</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//SPRING//DTD BEAN//EN&quot;</span> <span class="meta-string">&quot;http://www.springframework.org/dtd/spring-beans.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小王&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><br><strong>User 持久类：</strong><br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;,age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context =</span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-构造方法注入："><a href="#4-构造方法注入：" class="headerlink" title="4.构造方法注入："></a><strong>4.构造方法注入：</strong></h3><p><strong>bean1.xml配置文件</strong><br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orders&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.spring.Orders&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;电脑&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>Orders 持久类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String oname;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Orders</span><span class="params">(String oname, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oname = oname;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Orders&#123;&quot;</span> + <span class="string">&quot;oname=&#x27;&quot;</span> + oname + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context =</span><br><span class="line">                <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">        Orders orders = context.getBean(<span class="string">&quot;orders&quot;</span>, Orders.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(orders.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bean的作用域："><a href="#Bean的作用域：" class="headerlink" title="Bean的作用域："></a>Bean的作用域：</h2><h3 id="Spring的bean默认为单例："><a href="#Spring的bean默认为单例：" class="headerlink" title="Spring的bean默认为单例："></a>Spring的bean默认为单例：</h3><p><strong>单例对象只能创建一次，且在使用getBean()方法多次获取的都是同一个对象</strong></p><h3 id="4-把Spring的bean设置为多实例："><a href="#4-把Spring的bean设置为多实例：" class="headerlink" title="4.把Spring的bean设置为多实例："></a>4.把Spring的bean设置为多实例：</h3><p>把 <strong>bean</strong> 标签的 <strong>scope</strong> 属性设置为 <strong>prototype</strong><br>其默认值为 <strong>singleton</strong> 单例模式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Bean的生命周期："><a href="#Bean的生命周期：" class="headerlink" title="Bean的生命周期："></a>Bean的生命周期：</h2><ol><li><p>通过构造器创建 bean 实例（无参数构造）</p></li><li><p>为 bean 的属性设置值和对其他 bean 引用（调用set方法）</p></li><li><p>调用 bean 的初始化的方法（需要进行配置）</p><ul><li>需要在xml文件中对应的bean下 添加<code>init-method</code>标签，内容为类中对应的初始化函数。</li></ul></li><li><p>bean 可以使用</p></li><li><p>当容器关闭的时候，调用 bean 的销毁的方法（需要配置销毁的方法）</p><ul><li><p>bean需要手动销毁，调用<code>ClassPathXmlApplicationContext</code>对象中的<code>colos()</code>方法完成销毁。</p></li><li><p>同理需要在<code>destroy-method</code>属性中添加对应的销毁方法。</p></li></ul></li></ol><h2 id="Bean自动装配"><a href="#Bean自动装配" class="headerlink" title="Bean自动装配"></a>Bean自动装配</h2><ol><li>根据属性名自动装配：将bean属性的 <code>autowire</code> 标签设置为<code>byName</code><ul><li>按属性名注入是需要装配的变量名与其他bean属性的id相同。</li></ul></li><li>根据属性类型自动装配：将bean属性的 <code>autowire</code> 标签设置为<code>byType</code><ul><li>按类型注入就是其他bean的返回属性与其需要装配的属性相同，就会自动完成</li><li>类型装配时：符合的有且只能有一个，当有多个类型的bean符合时会报错。</li></ul></li></ol><h2 id="IOC操作Bean管理（基于注解）"><a href="#IOC操作Bean管理（基于注解）" class="headerlink" title="IOC操作Bean管理（基于注解）"></a>IOC操作Bean管理（基于注解）</h2><ol><li>注解是代码的特殊标记，格式：@注解名称（属性名称=属性值，…）</li><li>使用注解，注解作用在类上，方法上，属性上</li><li>使用注解的目的：简化xml配置</li></ol><h2 id="Spring针对Bean管理中创建对象提供注解"><a href="#Spring针对Bean管理中创建对象提供注解" class="headerlink" title="Spring针对Bean管理中创建对象提供注解"></a>Spring针对Bean管理中创建对象提供注解</h2><ol><li>@Component   普通注解</li><li>@Service     一般用于业务逻辑层</li><li>@Controller  用在web层</li><li>@Repository  用在dao或者持久层</li></ol><ul><li>上述四个注解功能一样，都可以用来创建bean实例</li></ul><h3 id="1-配置文件-bean1-xml-设置"><a href="#1-配置文件-bean1-xml-设置" class="headerlink" title="1.配置文件 bean1.xml 设置"></a>1.<strong>配置文件 bean1.xml 设置</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    自动扫描 com.spring 包下 **所有类 **是否有注解，如果有则创建实例--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    示例1</span></span><br><span class="line"><span class="comment">                use-default-filters=&quot;false&quot;：需要手动配置需要扫描的类</span></span><br><span class="line"><span class="comment">                &lt;context:include-filter：只扫描 @Component 注解的类</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Component&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    示例2：</span></span><br><span class="line"><span class="comment">                &lt;context:exclude-filter ：排除带有 @Service 注解的类</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-类中添加注解方法："><a href="#2-类中添加注解方法：" class="headerlink" title="2. 类中添加注解方法："></a>2. 类中添加注解方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**在注解里 value 属性可以省略不写</span></span><br><span class="line"><span class="comment"> * 默认是类名称，首字母小写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(value = &quot;user&quot; )</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于注解方式实现属性注入"><a href="#基于注解方式实现属性注入" class="headerlink" title="基于注解方式实现属性注入"></a>基于注解方式实现属性注入</h2><ol><li><p>@Autowired：根据类型注入</p></li><li><p>@Qualifier：根据名称注入</p></li><li><p>@Resource：可以根据类型注入，也可以根据名称注入</p></li><li><p>@Value：注入普通类型属性</p></li></ol><h3 id="1-各类注解说明"><a href="#1-各类注解说明" class="headerlink" title="1. 各类注解说明"></a>1. 各类注解说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 1.按照属性类型注入，</span></span><br><span class="line"><span class="comment">     * 当有配置文件种有多个相同类型时，使用该注解会报错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="comment">/** 2.按照属性名称注入，</span></span><br><span class="line"><span class="comment">     * 建议与 <span class="doctag">@Autowired</span> 一起使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Qualifier(value = &quot;userDao&quot;)</span></span><br><span class="line">    <span class="comment">/** 3.按照属性名称或者类型注入，</span></span><br><span class="line"><span class="comment">     *  若不给 name 赋值则是按照类型注入，赋值后按照属性名称注入</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@Resource</span> 属于javax中的扩展包，不建议使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Resource(name = &quot;userDao&quot;)</span></span><br><span class="line">    <span class="comment">/** 4. 注入普通类型属性</span></span><br><span class="line"><span class="comment">     *  直接给普通变量赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(value = &quot;123&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全注解开发"><a href="#完全注解开发" class="headerlink" title="完全注解开发"></a>完全注解开发</h2><h3 id="1-创建配置类"><a href="#1-创建配置类" class="headerlink" title="1. 创建配置类"></a>1. 创建配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//标记该类为配置类，替代xml文件</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.spring&quot;&#125;)</span>   <span class="comment">//加载 &quot;com.spring&quot; 包下的注解 创建类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-测试类"><a href="#2-测试类" class="headerlink" title="2. 测试类"></a>2. 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">        UserDao userDao = context.getBean(<span class="string">&quot;userDao&quot;</span>,UserDao.class);</span><br><span class="line">        System.out.println(userDao.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、Aop"><a href="#三、Aop" class="headerlink" title="三、Aop"></a>三、Aop</h1><ol><li>Aop是一个面向切面编程方法，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高开发效率。</li><li>也就是不通过修改源代码方式在主干功能里添加新功能</li></ol><h2 id="AOP底层原理"><a href="#AOP底层原理" class="headerlink" title="AOP底层原理"></a>AOP底层原理</h2><ol><li>AOP底层使用动态代理，分为有接口和无接口两种情况</li><li>如果有接口，则创建接口实现类的代理对象</li><li>如果没有接口，则创建当前类子类的代理对象</li></ol><h2 id="Aop（JDK动态代理）"><a href="#Aop（JDK动态代理）" class="headerlink" title="Aop（JDK动态代理）"></a>Aop（JDK动态代理）</h2><h3 id="1-如何使用"><a href="#1-如何使用" class="headerlink" title="1. 如何使用"></a>1. 如何使用</h3><p>使用<code>java.lang.reflect.Proxy </code>类中的<code>newProxyInstance</code>方法创建动态代理</p><ul><li>参数一： 类加载器</li><li>参数二：增强方法所在的类，这个类的实现接口，支持多个接口</li><li>参数三：实现这个接口<code>InvocationHandler</code>，创建代理对象，写增强方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, 类&lt;?&gt;[] interfaces, InvocationHandler h)</span> </span></span><br><span class="line"><span class="function">返回指定接口的代理类的实例，该接口将方法调用分派给指定的调用处理程序。  </span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-JDK动态代理代码"><a href="#2-JDK动态代理代码" class="headerlink" title="2. JDK动态代理代码"></a>2. JDK动态代理代码</h3><ul><li>创建接口 <code>UserDao.java</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>创建接口实现类 <code>UserDaoImpl</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在执行add方法。。。&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>使用Proxy类对类进行增强<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDKProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class[] interfaces = &#123;UserDao.class&#125;;</span><br><span class="line">        <span class="comment">//方法一：使用匿名内部类增强</span></span><br><span class="line"><span class="comment">//        UserDao dao = (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() &#123;</span></span><br><span class="line"><span class="comment">//            private Object obj = new UserDaoImpl();</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;方法：&quot; + method + &quot;执行之前，参数：&quot; + Arrays.toString(args));</span></span><br><span class="line"><span class="comment">//                Object res = method.invoke(obj, args);</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;方法：&quot; + method + &quot;执行之后，返回值：&quot; + res);</span></span><br><span class="line"><span class="comment">//                return res;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"><span class="comment">//        dao.add(1,2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二：创建一个类实现 InvocationHandler 接口中的 invoke方法</span></span><br><span class="line">        UserDaoImpl userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">        UserDao dao = (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> UserDaoProxy(userDao));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = dao.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 把需要代理的对象传入</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoProxy</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增强逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法：&quot;</span> + method + <span class="string">&quot;执行之前，参数：&quot;</span> + Arrays.toString(args));</span><br><span class="line">        Object res = method.invoke(obj, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;方法：&quot;</span> + method + <span class="string">&quot;执行之后，返回值：&quot;</span> + res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h2></li></ul><h3 id="1-连接点"><a href="#1-连接点" class="headerlink" title="1. 连接点"></a>1. 连接点</h3><p>类中的哪些方法可以被增强，这些方法成为连接点</p><h3 id="2-切入点"><a href="#2-切入点" class="headerlink" title="2. 切入点"></a>2. 切入点</h3><p>类中实际真正被增强的方法，称为切入点</p><h3 id="3-通知（增强）"><a href="#3-通知（增强）" class="headerlink" title="3. 通知（增强）"></a>3. 通知（增强）</h3><ul><li>被增强的方法中实际增强的逻辑部分，称为通知</li><li>通知分为：前置通知、后置通知、环绕通知、异常通知、最终通知</li></ul><h3 id="4-切面"><a href="#4-切面" class="headerlink" title="4. 切面"></a>4. 切面</h3><p>把通知应用到切入点的过程</p><h2 id="AOP（基于AspectJ实现）"><a href="#AOP（基于AspectJ实现）" class="headerlink" title="AOP（基于AspectJ实现）"></a>AOP（基于AspectJ实现）</h2><h3 id="1-在spring配置文件中，开启注解扫描"><a href="#1-在spring配置文件中，开启注解扫描" class="headerlink" title="1. 在spring配置文件中，开启注解扫描"></a>1. 在spring配置文件中，开启注解扫描</h3><h3 id="2-使用注解创建User和UserProxy对象"><a href="#2-使用注解创建User和UserProxy对象" class="headerlink" title="2. 使用注解创建User和UserProxy对象"></a>2. 使用注解创建User和UserProxy对象</h3><h3 id="3-在增强类的方法上面添加注解-Aspect"><a href="#3-在增强类的方法上面添加注解-Aspect" class="headerlink" title="3. 在增强类的方法上面添加注解 @Aspect"></a>3. 在增强类的方法上面添加注解 @Aspect</h3><h3 id="4-在spring配置文件中开启生成代理对象"><a href="#4-在spring配置文件中开启生成代理对象" class="headerlink" title="4. 在spring配置文件中开启生成代理对象"></a>4. 在spring配置文件中开启生成代理对象</h3><h1 id="四、JdbcTemplate（Jdbc模板）"><a href="#四、JdbcTemplate（Jdbc模板）" class="headerlink" title="四、JdbcTemplate（Jdbc模板）"></a>四、JdbcTemplate（Jdbc模板）</h1><h2 id="配置数据库连接池"><a href="#配置数据库连接池" class="headerlink" title="配置数据库连接池"></a>配置数据库连接池</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    开启组件扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    配置数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///user_db&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    创建数据库对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--    name表示要注入JdbcTemplate类中的变量名，ref表示进行注入的内部bean的id--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="五、事务管理"><a href="#五、事务管理" class="headerlink" title="五、事务管理"></a>五、事务管理</h1><ol><li>事务是数据库操作的最基本单元，逻辑上一组操作，要么都成功，如果一个失败则所有操作都失败</li><li>事务的四个特性：原子性、一致性、隔离性、持久性</li><li>声明事务管理主要有：基于注解和基于xml配置</li><li>在spring进行声明式事务管理，底层使用AOP原理</li></ol><h2 id="基于注解声明式事务管理"><a href="#基于注解声明式事务管理" class="headerlink" title="基于注解声明式事务管理"></a>基于注解声明式事务管理</h2><h3 id="1-在配置文件中配置事务管理器"><a href="#1-在配置文件中配置事务管理器" class="headerlink" title="1.在配置文件中配置事务管理器"></a>1.在配置文件中配置事务管理器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--    开启组件扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    配置数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///user_db&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    创建数据库对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--    name表示要注入JdbcTemplate类中的变量名，ref表示进行注入的内部bean的id--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--创建事务管理器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启事务注解--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-在service类上面添加事务注解"><a href="#2-在service类上面添加事务注解" class="headerlink" title="2.在service类上面添加事务注解"></a>2.在service类上面添加事务注解</h3><ol><li><code>@Transactional</code> ，这个注解可以添加到类上，也可以添加到方法上面</li></ol><h1 id="六、Spring5新特性"><a href="#六、Spring5新特性" class="headerlink" title="六、Spring5新特性"></a>六、Spring5新特性</h1><ol><li>整个Spring5框架的代码基于Java8，同时兼容JAVA9</li><li>Spring5框架核心容器支持 @Nullable 注解，可以使用在方法上，属性上，参数上，表示方法返回可以为空，属性值可以为空，参数值可以为空</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、Spring框架概念&quot;&gt;&lt;a href=&quot;#一、Spring框架概念&quot; class=&quot;headerlink&quot; title=&quot;一、Spring框架概念&quot;&gt;&lt;/a&gt;一、Spring框架概念&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Spring是一个轻量级的开源的JavaEE框架&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Spring框架可以解决企业开发的复杂性&lt;/li&gt;
&lt;li&gt;Spring有两个核心部分：IOC和AOP&lt;/li&gt;
&lt;li&gt;IOC:控制反转，把创建对象的过程教给Spring进行管理&lt;/li&gt;
&lt;li&gt;Aop：面向切面，在不修改源代码的情况下进行功能增强&lt;/li&gt;
&lt;li&gt;Spring特点：1.方便解耦，简化开发  2.方便测试程序 3.方便和其他框架整合  4. 方便进行事务操作&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Spring" scheme="https://plumdong.github.io/categories/Spring/"/>
    
    
    <category term="Java" scheme="https://plumdong.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://plumdong.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>多元Huffman编码--贪心算法</title>
    <link href="https://plumdong.github.io/2020/11/05/%E5%A4%9A%E5%85%83Huffman%E7%BC%96%E7%A0%81-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>https://plumdong.github.io/2020/11/05/%E5%A4%9A%E5%85%83Huffman%E7%BC%96%E7%A0%81-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</id>
    <published>2020-11-04T16:00:00.000Z</published>
    <updated>2021-07-11T09:24:52.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在一个操场的四周摆放着n堆石子。现要将石子有次序地合并成一堆。规定每次至少选2 堆最多选k堆石子合并成新的一堆，合并的费用为新的一堆的石子数。试设计一个算法，计算出将n堆石子合并成一堆的最大总费用和最小总费用。 对于给定n堆石子,计算合并成一堆的最大总费用和最小总费用。</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入数据的第1 行有2 个正整数n和k（n≤100000，k≤10000），表示有n堆石子，每次至少选2 堆最多选k堆石子合并。第2 行有n个数，分别表示每堆石子的个数。</p><h2 id="输出Output"><a href="#输出Output" class="headerlink" title="输出Output"></a>输出Output</h2><p>将计算出的最大总费用和最小总费用输出，两个整数之间用空格分开。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7 3</span><br><span class="line">45 13 12 16 9 5 22</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">593 199</span><br></pre></td></tr></table></figure><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><ul><li>最大值是每次取数量最大的两堆合并，然后把合并的数记录下来，然后放回数组种</li><li>最小值是除第一次外每次取K个最小的合并，然后把合并的放回数组，递归调用。除去第一次每次都取K个是因为要保证最后一次取到K个数据</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">200000</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">把数组P中的第n-1个数据，插入到i到n-2数据里，</span></span><br><span class="line"><span class="comment">相当于把i到n从小到大排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_sorted</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= i; --j) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[j]&lt;p[j<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="built_in">swap</span>(p[j],p[j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扩大数组，保证每次都能取K个数据</span></span><br><span class="line">    <span class="keyword">while</span>(n%(k<span class="number">-1</span>)!=<span class="number">1</span>)</span><br><span class="line">        p[n++]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//从小到大排序</span></span><br><span class="line">    <span class="built_in">sort</span>(p,p+n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算最大值</span></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max2 = p[n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[i] == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        max2 += p[i];</span><br><span class="line">        max += max2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算最小值</span></span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>;) &#123;</span><br><span class="line">        <span class="keyword">int</span> min2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j) &#123;</span><br><span class="line">            min2 += p[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        p[n++] = min2;</span><br><span class="line">        min += min2;</span><br><span class="line">        <span class="built_in">my_sorted</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        for (int j = i; j &lt; n; ++j) &#123;</span></span><br><span class="line"><span class="comment">//            cout&lt;&lt;p[j]&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        cout&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;max&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;min&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;在一个操场的四周摆放着n堆石子。现要将石子有次序地合并成一堆。规定每次至少选2 堆最多选k堆石子合并成新的一堆，合并的费用为新的一堆的石子数。试设计一个算法，计算出将n堆石子合并成一堆的最大总费用和最小总费用。 对于给定n堆石子,计算合并成一堆的最大总费用和最小总费用。&lt;/p&gt;</summary>
    
    
    
    <category term="算法不能丢" scheme="https://plumdong.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8D%E8%83%BD%E4%B8%A2/"/>
    
    
    <category term="C++" scheme="https://plumdong.github.io/tags/C/"/>
    
    <category term="算法不能丢" scheme="https://plumdong.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8D%E8%83%BD%E4%B8%A2/"/>
    
  </entry>
  
  <entry>
    <title>多元Huffman编码变形—回溯</title>
    <link href="https://plumdong.github.io/2020/11/05/%E5%A4%9A%E5%85%83Huffman%E7%BC%96%E7%A0%81%E5%8F%98%E5%BD%A2%E2%80%94%E5%9B%9E%E6%BA%AF/"/>
    <id>https://plumdong.github.io/2020/11/05/%E5%A4%9A%E5%85%83Huffman%E7%BC%96%E7%A0%81%E5%8F%98%E5%BD%A2%E2%80%94%E5%9B%9E%E6%BA%AF/</id>
    <published>2020-11-04T16:00:00.000Z</published>
    <updated>2021-07-11T09:24:55.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在一个操场的四周摆放着n堆石子。现要将石子有次序地合并成一堆。规定在合并过程中最多可以有m(k)次选k堆石子合并成新的一堆，2≤k≤n，合并的费用为新的一堆的石子数。试设计一个算法，计算出将n堆石子合并成一堆的最小总费用。 对于给定n堆石子,计算合并成一堆的最小总费用。</p><span id="more"></span><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入数据的第1 行有1 个正整数n（n≤100），表示有n 堆石子。第2行有n个数，分别表示每堆石子的个数。第3 行有n-1 个数，分别表示m(k)（2≤k≤n）的值。</p><h2 id="输出Output"><a href="#输出Output" class="headerlink" title="输出Output"></a>输出Output</h2><p>将计算出的最小总费用输出。问题无解时输出“No solution!”</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">45 13 12 16 9 5 22</span><br><span class="line">3 3 0 2 1 0</span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">136</span><br></pre></td></tr></table></figure><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><ul><li>首先用分支界限法（回溯法）找出每次合并石子堆数和可用次数<code>v[i]</code></li><li>然后对石子从小到大排序，每次取最小堆数合并石子（这样保证越往后合并的堆数就越多）</li><li>这样就就可以保证最小输出</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">201</span>];</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">101</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">分支界限法 找出每次合并石子堆数和可用次数</span></span><br><span class="line"><span class="comment">参数：第i次合并，还剩余sum堆石子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">branch</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=m[i];j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">        v[i] = j;</span><br><span class="line">        <span class="keyword">if</span>(sum-v[i]*(i<span class="number">-1</span>)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">branch</span>(i<span class="number">-1</span>,sum-v[i]*(i<span class="number">-1</span>)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">把数组P中的第n-1个数据，插入到i到n-2数据里，</span></span><br><span class="line"><span class="comment">相当于把i到n从小到大排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_sorted</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt;= i; --j) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p[j]&lt;p[j<span class="number">-1</span>])&#123;</span><br><span class="line">            <span class="built_in">swap</span>(p[j],p[j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin&gt;&gt;m[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否有解，并且把每次需要合并多少堆石子求出来</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">branch</span>(n,n))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;No solution!&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(p,p+n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        for(int i=0;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">//            cout&lt;&lt;v[i]&lt;&lt;&#x27; &#x27;;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        cout&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; v[i];k++)&#123;</span><br><span class="line">            <span class="keyword">int</span> min2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">                min2 += p[start++];</span><br><span class="line">            &#125;</span><br><span class="line">            p[n++] = min2;</span><br><span class="line">            min += min2;</span><br><span class="line">            <span class="built_in">my_sorted</span>(start);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;min&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、问题描述&quot;&gt;&lt;a href=&quot;#一、问题描述&quot; class=&quot;headerlink&quot; title=&quot;一、问题描述&quot;&gt;&lt;/a&gt;一、问题描述&lt;/h1&gt;&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;在一个操场的四周摆放着n堆石子。现要将石子有次序地合并成一堆。规定在合并过程中最多可以有m(k)次选k堆石子合并成新的一堆，2≤k≤n，合并的费用为新的一堆的石子数。试设计一个算法，计算出将n堆石子合并成一堆的最小总费用。 对于给定n堆石子,计算合并成一堆的最小总费用。&lt;/p&gt;</summary>
    
    
    
    <category term="算法不能丢" scheme="https://plumdong.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8D%E8%83%BD%E4%B8%A2/"/>
    
    
    <category term="C++" scheme="https://plumdong.github.io/tags/C/"/>
    
    <category term="算法不能丢" scheme="https://plumdong.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8D%E8%83%BD%E4%B8%A2/"/>
    
  </entry>
  
  <entry>
    <title>Java中的HashMap（jdk1.8版本）</title>
    <link href="https://plumdong.github.io/2020/11/03/Java%E4%B8%AD%E7%9A%84HashMap/"/>
    <id>https://plumdong.github.io/2020/11/03/Java%E4%B8%AD%E7%9A%84HashMap/</id>
    <published>2020-11-03T07:23:56.000Z</published>
    <updated>2021-07-11T09:27:27.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>基于哈希表Map接口实现，是以key-value存储形式存在，即主要用来存放键值对。HashMap的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外HashMap中的映射不是有序的。</p><span id="more"></span><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>JDK1.8 之后HashMap由数组+链表+红黑树组成，链表主要是为了解决哈希冲突，当链表长度大于阈值（默认为8）且数组长度大于64时链表会改为红黑树存储，小于64则会扩容。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>存取无序的   </li><li>键和值为的位置都可以是null，但是键位置只能有一个null  </li><li>键位置唯一，底层数据结构控制  </li><li>非线程安全。</li></ol><h1 id="HashMap-实现原理"><a href="#HashMap-实现原理" class="headerlink" title="HashMap 实现原理"></a>HashMap 实现原理</h1><h2 id="哈希表底层采用何种算法计算出hash值？"><a href="#哈希表底层采用何种算法计算出hash值？" class="headerlink" title="哈希表底层采用何种算法计算出hash值？"></a>哈希表底层采用何种算法计算出hash值？</h2><ul><li>底层采用的key的hashCode方法的值结合数组的长度进行无符号右移（&gt;&gt;&gt;）、按位异或（^）、按位与（&amp;）计算出索引。</li><li>还可以使用：平方取中法、取余法、伪随机数法</li><li>按位算法效率要高于其他算法<h2 id="何时发生哈希碰撞、如何解决哈希碰撞"><a href="#何时发生哈希碰撞、如何解决哈希碰撞" class="headerlink" title="何时发生哈希碰撞、如何解决哈希碰撞"></a>何时发生哈希碰撞、如何解决哈希碰撞</h2>只要两个元素的key计算的哈希码相同就会发生哈希碰撞，jdk8之后采用链表+红黑树解决哈希碰撞。<h2 id="如果两个键的hashcode相同，如何存储。"><a href="#如果两个键的hashcode相同，如何存储。" class="headerlink" title="如果两个键的hashcode相同，如何存储。"></a>如果两个键的hashcode相同，如何存储。</h2>hashcode相同，通过键的equals方法比较内容是否相同，<br>相同：新的value会覆盖之前的value<br>不同：则将新的键值对添加至哈希表</li></ul><h2 id="何时扩容，如何扩容"><a href="#何时扩容，如何扩容" class="headerlink" title="何时扩容，如何扩容"></a>何时扩容，如何扩容</h2><p>当元素数量超过临界值且当前放至元素的位置非空时扩容，<br>默认扩容为原来容量的二倍，并将原来的数据复制。</p><h2 id="红黑树示例"><a href="#红黑树示例" class="headerlink" title="红黑树示例"></a>红黑树示例</h2><blockquote><p>依次插入1-8，8个数据。</p></blockquote><p><img src="/myimages/202011051024.png" alt="红黑树示例"></p><p><a href="https://rbtree.phpisfuture.com/">红黑树在线演示</a></p><h1 id="HashMap-源码"><a href="#HashMap-源码" class="headerlink" title="HashMap 源码"></a>HashMap 源码</h1><h2 id="put方法流程"><a href="#put方法流程" class="headerlink" title="put方法流程"></a>put方法流程</h2><p><img src="/myimages/202011041524.png" alt="put方法流程"></p><h2 id="构造方法1"><a href="#构造方法1" class="headerlink" title="构造方法1"></a>构造方法1</h2><ul><li> initialCapacity 可选，初始容量，<br>若不是2的整数次幂则自动加至2的整数次幂（默认是16在第一次put操作时扩容）  </li></ul><p><strong>在开发时我们应指定足够大初始容量，尽量避免多次扩容带来的性能损耗。</strong></p><ul><li> loadFactor 可选，加载因子,<br>表示实际容量达到最大容量的多少时扩容。（默认是0.75）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span></span><br></pre></td></tr></table></figure></li></ul><h2 id="构造方法2"><a href="#构造方法2" class="headerlink" title="构造方法2"></a>构造方法2</h2><p>传入一个哈希表，将表中的键值对复制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span></span></span><br></pre></td></tr></table></figure><h2 id="forEach方法遍历"><a href="#forEach方法遍历" class="headerlink" title="forEach方法遍历"></a>forEach方法遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap h = <span class="keyword">new</span> HashMap();</span><br><span class="line">        h.put(<span class="string">&quot;今天&quot;</span>,<span class="number">4</span>);</span><br><span class="line">        h.put(<span class="string">&quot;明天&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        h.put(<span class="string">&quot;后天&quot;</span>,<span class="number">6</span>);</span><br><span class="line">        h.put(<span class="string">&quot;昨天&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        h.forEach((k,v)-&gt;&#123;</span><br><span class="line">            System.out.println(k + <span class="string">&quot;---&quot;</span> + v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;HashMap简介&quot;&gt;&lt;a href=&quot;#HashMap简介&quot; class=&quot;headerlink&quot; title=&quot;HashMap简介&quot;&gt;&lt;/a&gt;HashMap简介&lt;/h1&gt;&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;基于哈希表Map接口实现，是以key-value存储形式存在，即主要用来存放键值对。HashMap的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外HashMap中的映射不是有序的。&lt;/p&gt;</summary>
    
    
    
    <category term="Java基础" scheme="https://plumdong.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://plumdong.github.io/tags/Java/"/>
    
    <category term="HashMap" scheme="https://plumdong.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>MySQL整体架构</title>
    <link href="https://plumdong.github.io/2020/11/03/MySQL%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
    <id>https://plumdong.github.io/2020/11/03/MySQL%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</id>
    <published>2020-11-03T01:12:55.000Z</published>
    <updated>2021-07-11T09:28:26.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><span id="more"></span><p><img src="/myimages/202011030922.png" alt="在这里插入图片描述"></p><h1 id="MySQL存储引擎"><a href="#MySQL存储引擎" class="headerlink" title="MySQL存储引擎"></a>MySQL存储引擎</h1><h2 id="MyISAM和InnoDB的区别"><a href="#MyISAM和InnoDB的区别" class="headerlink" title="MyISAM和InnoDB的区别"></a>MyISAM和InnoDB的区别</h2><p><img src="/myimages/202011031010.png" alt="在这里插入图片描述"></p><h2 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h2><p><strong>表示数据行和相邻的键值紧凑地存储在一起。一个表只能有一个聚簇索引</strong></p><h1 id="原子性和持久性怎么保证"><a href="#原子性和持久性怎么保证" class="headerlink" title="原子性和持久性怎么保证"></a>原子性和持久性怎么保证</h1><h2 id="原子性实现原理：Undo-log"><a href="#原子性实现原理：Undo-log" class="headerlink" title="原子性实现原理：Undo log"></a>原子性实现原理：Undo log</h2><ul><li>Undo log是为了实现事务的原子性，在MySQL数据库innoDB存储引擎中，还用Undo Log来实现多版本并发控制。</li><li>在操作任何数据之前，首先将数据备份带一个地方（这个地方称为Undo Log）。然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态</li><li>undo log是逻辑日志：1.当delete一条记录时，undo log中会记录一条对应的insert记录2.当insert一条记录时，undo log中会记录一条对应的delete记录3.当update一条记录时，会记录一条对应的相反的update记录</li></ul><h2 id="持久性实现原理：Redo-log"><a href="#持久性实现原理：Redo-log" class="headerlink" title="持久性实现原理：Redo log"></a>持久性实现原理：Redo log</h2><ul><li><p>持久性：事务一旦提交，其对数据库的更新是持久的。任何事务或者系统故障都不会导致数据丢失。</p></li><li><p>Redo log保存每次修改信息。每秒把修改的信息刷新到磁盘。<br>三种实现方法：<br><img src="/myimages/202011031109.png" alt="在这里插入图片描述"></p></li><li><p>系统默认第一种，最安全但数据量大时效率低。<br><img src="/myimages/202011031110.png" alt="在这里插入图片描述"></p></li><li><p>Redo log用于实现第0种</p></li></ul><h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><ul><li>事务具有隔离性，理论上来说事务之间执行不应该相互产生影响，其对数据库的影响应该和它们串行执行时一致。</li><li>然而完全的隔离性会导致系统并发性能很低，降低对资源的利用率，因此实际上对隔离性的要求会有所放宽，这也会一定程度上造成对数据库一致性要求降低。</li><li>SQL标准为事务定义了不同的隔离级别，从低到高依次是：1.读未提交 2.读已提交 3.可重复读（MySQL默认） 4.序列化</li></ul><p>事务隔离中存在的问题：</p><ol><li>脏读：存在于<strong>读未提交</strong>中，一个用户可以读取另一个用户未提交的事务，当用户回滚事务时会造成其他用户之前读取的脏数据。</li><li>不可重复读：存在于<strong>读未提交、读已提交</strong>中，一个用户可以读取另一个用户修改前和修改后的数据，会造成两次读取数据的不一致性。</li><li>幻读：存在于<strong>读未提交、读已提交、可重复读</strong>中，一个用户进行插入操作后另一用户不能插入相同的数据，且不能插入数据的用户也无法看到该数据。</li></ol><h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><p>事务的执行结果必须使数据库从一个一致性状态到另一个一致性状态。一致性状态是指：1系统的状态满足数据的完整性约束（主码，参照，check）2.系统的状态反应数据库本应描述的现实世界的真实状态，比如转账前后的两个账户的金额总和应该保持不变。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;整体架构&quot;&gt;&lt;a href=&quot;#整体架构&quot; class=&quot;headerlink&quot; title=&quot;整体架构&quot;&gt;&lt;/a&gt;整体架构&lt;/h1&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://plumdong.github.io/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://plumdong.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
